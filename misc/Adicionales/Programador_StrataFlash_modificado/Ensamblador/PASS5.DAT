    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;KCPSM3 Program - UART programming of StrataFLASH memory on the Spartan-3E Starter Kit.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;MODIFICADO POR JORGE MÁRQUEZ EN LA LÍNEA 578
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Ken Chapman - Xilinx Ltd
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Version v1.00 - 28th March 2006
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;This program uses a 115200 baud UART connection with XON/XOFF flow control
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;to allow a standard MCS file for the configuration of a Spartan-3E device to
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;be programmed into the Intel StrataFLASH device on the board.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Port definitions
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT status_port, 00
  LOGFORMAT-CONSTANT status_port, 00
INSTRUCTION-CONSTANT
   OPERAND1-status_port
  OP1 VALUE-status_port
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;UART and filter status input
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT tx_data_present, 01
  LOGFORMAT-CONSTANT tx_data_present, 01
INSTRUCTION-CONSTANT
   OPERAND1-tx_data_present
  OP1 VALUE-tx_data_present
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;  Transmitter  data present - bit0
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT tx_half_full, 02
  LOGFORMAT-CONSTANT tx_half_full, 02
INSTRUCTION-CONSTANT
   OPERAND1-tx_half_full
  OP1 VALUE-tx_half_full
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;    FIFO          half full - bit1
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT tx_full, 04
  LOGFORMAT-CONSTANT tx_full, 04
INSTRUCTION-CONSTANT
   OPERAND1-tx_full
  OP1 VALUE-tx_full
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;                       full - bit2
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT rx_data_present, 08
  LOGFORMAT-CONSTANT rx_data_present, 08
INSTRUCTION-CONSTANT
   OPERAND1-rx_data_present
  OP1 VALUE-rx_data_present
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-;               data present - bit3
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT rx_half_full, 10
  LOGFORMAT-CONSTANT rx_half_full, 10
INSTRUCTION-CONSTANT
   OPERAND1-rx_half_full
  OP1 VALUE-rx_half_full
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-;  Receiver        half full - bit4
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT rx_full, 20
  LOGFORMAT-CONSTANT rx_full, 20
INSTRUCTION-CONSTANT
   OPERAND1-rx_full
  OP1 VALUE-rx_full
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-;    FIFO               full - bit5
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT spare1, 40
  LOGFORMAT-CONSTANT spare1, 40
INSTRUCTION-CONSTANT
   OPERAND1-spare1
  OP1 VALUE-spare1
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-;                  spare '0' - bit6
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_STS, 80
  LOGFORMAT-CONSTANT SF_STS, 80
INSTRUCTION-CONSTANT
   OPERAND1-SF_STS
  OP1 VALUE-SF_STS
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-;            StrataFLASH STS - bit7
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT UART_read_port, 01
  LOGFORMAT-CONSTANT UART_read_port, 01
INSTRUCTION-CONSTANT
   OPERAND1-UART_read_port
  OP1 VALUE-UART_read_port
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;UART Rx data input
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT UART_write_port, 04
  LOGFORMAT-CONSTANT UART_write_port, 04
INSTRUCTION-CONSTANT
   OPERAND1-UART_write_port
  OP1 VALUE-UART_write_port
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;UART Tx data output
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_data_in_port, 02
  LOGFORMAT-CONSTANT SF_data_in_port, 02
INSTRUCTION-CONSTANT
   OPERAND1-SF_data_in_port
  OP1 VALUE-SF_data_in_port
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;Read data from StrataFLASH device
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_data_out_port, 10
  LOGFORMAT-CONSTANT SF_data_out_port, 10
INSTRUCTION-CONSTANT
   OPERAND1-SF_data_out_port
  OP1 VALUE-SF_data_out_port
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-;Data to write into StrataFLASH device
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_addr_hi_port, 80
  LOGFORMAT-CONSTANT SF_addr_hi_port, 80
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_hi_port
  OP1 VALUE-SF_addr_hi_port
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-;StrataFLASH address[23:16]
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_addr_mi_port, 40
  LOGFORMAT-CONSTANT SF_addr_mi_port, 40
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_mi_port
  OP1 VALUE-SF_addr_mi_port
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-;StrataFLASH address[15:8]
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_addr_lo_port, 20
  LOGFORMAT-CONSTANT SF_addr_lo_port, 20
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_lo_port
  OP1 VALUE-SF_addr_lo_port
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-;StrataFLASH address[7:0]
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_control_port, 08
  LOGFORMAT-CONSTANT SF_control_port, 08
INSTRUCTION-CONSTANT
   OPERAND1-SF_control_port
  OP1 VALUE-SF_control_port
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-;StrataFLASH control
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_read, 01
  LOGFORMAT-CONSTANT SF_read, 01
INSTRUCTION-CONSTANT
   OPERAND1-SF_read
  OP1 VALUE-SF_read
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;         active High read - bit0
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_ce, 02
  LOGFORMAT-CONSTANT SF_ce, 02
INSTRUCTION-CONSTANT
   OPERAND1-SF_ce
  OP1 VALUE-SF_ce
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-; active Low device enable - bit1
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT SF_we, 04
  LOGFORMAT-CONSTANT SF_we, 04
INSTRUCTION-CONSTANT
   OPERAND1-SF_we
  OP1 VALUE-SF_we
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;         active Low write - bit2
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Special Register usage
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-NAMEREG sF, UART_data
  LOGFORMAT-NAMEREG sF, UART_data
INSTRUCTION-NAMEREG
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-UART_data
  OP2 VALUE-UART_data
    COMMENT-;used to pass data to and from the UART
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Useful data constants
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Constant to define a software delay of 1us. This must be adjusted to reflect the
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;calculation highly predictable. The '6' in the following equation even allows for
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;'CALL delay_1us' instruction in the initiating code.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;For clock rates below 10MHz the value of 1 must be used and the operation will
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;become lower than intended.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT delay_1us_constant, 0B
  LOGFORMAT-CONSTANT delay_1us_constant, 0B
INSTRUCTION-CONSTANT
   OPERAND1-delay_1us_constant
  OP1 VALUE-delay_1us_constant
   OPERAND2-0B
  OP2 VALUE-0B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;ASCII table
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_a, 61
  LOGFORMAT-CONSTANT character_a, 61
INSTRUCTION-CONSTANT
   OPERAND1-character_a
  OP1 VALUE-character_a
   OPERAND2-61
  OP2 VALUE-61
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_b, 62
  LOGFORMAT-CONSTANT character_b, 62
INSTRUCTION-CONSTANT
   OPERAND1-character_b
  OP1 VALUE-character_b
   OPERAND2-62
  OP2 VALUE-62
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_c, 63
  LOGFORMAT-CONSTANT character_c, 63
INSTRUCTION-CONSTANT
   OPERAND1-character_c
  OP1 VALUE-character_c
   OPERAND2-63
  OP2 VALUE-63
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_d, 64
  LOGFORMAT-CONSTANT character_d, 64
INSTRUCTION-CONSTANT
   OPERAND1-character_d
  OP1 VALUE-character_d
   OPERAND2-64
  OP2 VALUE-64
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_e, 65
  LOGFORMAT-CONSTANT character_e, 65
INSTRUCTION-CONSTANT
   OPERAND1-character_e
  OP1 VALUE-character_e
   OPERAND2-65
  OP2 VALUE-65
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_f, 66
  LOGFORMAT-CONSTANT character_f, 66
INSTRUCTION-CONSTANT
   OPERAND1-character_f
  OP1 VALUE-character_f
   OPERAND2-66
  OP2 VALUE-66
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_g, 67
  LOGFORMAT-CONSTANT character_g, 67
INSTRUCTION-CONSTANT
   OPERAND1-character_g
  OP1 VALUE-character_g
   OPERAND2-67
  OP2 VALUE-67
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_h, 68
  LOGFORMAT-CONSTANT character_h, 68
INSTRUCTION-CONSTANT
   OPERAND1-character_h
  OP1 VALUE-character_h
   OPERAND2-68
  OP2 VALUE-68
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_i, 69
  LOGFORMAT-CONSTANT character_i, 69
INSTRUCTION-CONSTANT
   OPERAND1-character_i
  OP1 VALUE-character_i
   OPERAND2-69
  OP2 VALUE-69
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_j, 6A
  LOGFORMAT-CONSTANT character_j, 6A
INSTRUCTION-CONSTANT
   OPERAND1-character_j
  OP1 VALUE-character_j
   OPERAND2-6A
  OP2 VALUE-6A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_k, 6B
  LOGFORMAT-CONSTANT character_k, 6B
INSTRUCTION-CONSTANT
   OPERAND1-character_k
  OP1 VALUE-character_k
   OPERAND2-6B
  OP2 VALUE-6B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_l, 6C
  LOGFORMAT-CONSTANT character_l, 6C
INSTRUCTION-CONSTANT
   OPERAND1-character_l
  OP1 VALUE-character_l
   OPERAND2-6C
  OP2 VALUE-6C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_m, 6D
  LOGFORMAT-CONSTANT character_m, 6D
INSTRUCTION-CONSTANT
   OPERAND1-character_m
  OP1 VALUE-character_m
   OPERAND2-6D
  OP2 VALUE-6D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_n, 6E
  LOGFORMAT-CONSTANT character_n, 6E
INSTRUCTION-CONSTANT
   OPERAND1-character_n
  OP1 VALUE-character_n
   OPERAND2-6E
  OP2 VALUE-6E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_o, 6F
  LOGFORMAT-CONSTANT character_o, 6F
INSTRUCTION-CONSTANT
   OPERAND1-character_o
  OP1 VALUE-character_o
   OPERAND2-6F
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_p, 70
  LOGFORMAT-CONSTANT character_p, 70
INSTRUCTION-CONSTANT
   OPERAND1-character_p
  OP1 VALUE-character_p
   OPERAND2-70
  OP2 VALUE-70
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_q, 71
  LOGFORMAT-CONSTANT character_q, 71
INSTRUCTION-CONSTANT
   OPERAND1-character_q
  OP1 VALUE-character_q
   OPERAND2-71
  OP2 VALUE-71
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_r, 72
  LOGFORMAT-CONSTANT character_r, 72
INSTRUCTION-CONSTANT
   OPERAND1-character_r
  OP1 VALUE-character_r
   OPERAND2-72
  OP2 VALUE-72
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_s, 73
  LOGFORMAT-CONSTANT character_s, 73
INSTRUCTION-CONSTANT
   OPERAND1-character_s
  OP1 VALUE-character_s
   OPERAND2-73
  OP2 VALUE-73
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_t, 74
  LOGFORMAT-CONSTANT character_t, 74
INSTRUCTION-CONSTANT
   OPERAND1-character_t
  OP1 VALUE-character_t
   OPERAND2-74
  OP2 VALUE-74
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_u, 75
  LOGFORMAT-CONSTANT character_u, 75
INSTRUCTION-CONSTANT
   OPERAND1-character_u
  OP1 VALUE-character_u
   OPERAND2-75
  OP2 VALUE-75
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_v, 76
  LOGFORMAT-CONSTANT character_v, 76
INSTRUCTION-CONSTANT
   OPERAND1-character_v
  OP1 VALUE-character_v
   OPERAND2-76
  OP2 VALUE-76
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_w, 77
  LOGFORMAT-CONSTANT character_w, 77
INSTRUCTION-CONSTANT
   OPERAND1-character_w
  OP1 VALUE-character_w
   OPERAND2-77
  OP2 VALUE-77
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_x, 78
  LOGFORMAT-CONSTANT character_x, 78
INSTRUCTION-CONSTANT
   OPERAND1-character_x
  OP1 VALUE-character_x
   OPERAND2-78
  OP2 VALUE-78
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_y, 79
  LOGFORMAT-CONSTANT character_y, 79
INSTRUCTION-CONSTANT
   OPERAND1-character_y
  OP1 VALUE-character_y
   OPERAND2-79
  OP2 VALUE-79
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_z, 7A
  LOGFORMAT-CONSTANT character_z, 7A
INSTRUCTION-CONSTANT
   OPERAND1-character_z
  OP1 VALUE-character_z
   OPERAND2-7A
  OP2 VALUE-7A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_A, 41
  LOGFORMAT-CONSTANT character_A, 41
INSTRUCTION-CONSTANT
   OPERAND1-character_A
  OP1 VALUE-character_A
   OPERAND2-41
  OP2 VALUE-41
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_B, 42
  LOGFORMAT-CONSTANT character_B, 42
INSTRUCTION-CONSTANT
   OPERAND1-character_B
  OP1 VALUE-character_B
   OPERAND2-42
  OP2 VALUE-42
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_C, 43
  LOGFORMAT-CONSTANT character_C, 43
INSTRUCTION-CONSTANT
   OPERAND1-character_C
  OP1 VALUE-character_C
   OPERAND2-43
  OP2 VALUE-43
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_D, 44
  LOGFORMAT-CONSTANT character_D, 44
INSTRUCTION-CONSTANT
   OPERAND1-character_D
  OP1 VALUE-character_D
   OPERAND2-44
  OP2 VALUE-44
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_E, 45
  LOGFORMAT-CONSTANT character_E, 45
INSTRUCTION-CONSTANT
   OPERAND1-character_E
  OP1 VALUE-character_E
   OPERAND2-45
  OP2 VALUE-45
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_F, 46
  LOGFORMAT-CONSTANT character_F, 46
INSTRUCTION-CONSTANT
   OPERAND1-character_F
  OP1 VALUE-character_F
   OPERAND2-46
  OP2 VALUE-46
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_G, 47
  LOGFORMAT-CONSTANT character_G, 47
INSTRUCTION-CONSTANT
   OPERAND1-character_G
  OP1 VALUE-character_G
   OPERAND2-47
  OP2 VALUE-47
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_H, 48
  LOGFORMAT-CONSTANT character_H, 48
INSTRUCTION-CONSTANT
   OPERAND1-character_H
  OP1 VALUE-character_H
   OPERAND2-48
  OP2 VALUE-48
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_I, 49
  LOGFORMAT-CONSTANT character_I, 49
INSTRUCTION-CONSTANT
   OPERAND1-character_I
  OP1 VALUE-character_I
   OPERAND2-49
  OP2 VALUE-49
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_J, 4A
  LOGFORMAT-CONSTANT character_J, 4A
INSTRUCTION-CONSTANT
   OPERAND1-character_J
  OP1 VALUE-character_J
   OPERAND2-4A
  OP2 VALUE-4A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_K, 4B
  LOGFORMAT-CONSTANT character_K, 4B
INSTRUCTION-CONSTANT
   OPERAND1-character_K
  OP1 VALUE-character_K
   OPERAND2-4B
  OP2 VALUE-4B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_L, 4C
  LOGFORMAT-CONSTANT character_L, 4C
INSTRUCTION-CONSTANT
   OPERAND1-character_L
  OP1 VALUE-character_L
   OPERAND2-4C
  OP2 VALUE-4C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_M, 4D
  LOGFORMAT-CONSTANT character_M, 4D
INSTRUCTION-CONSTANT
   OPERAND1-character_M
  OP1 VALUE-character_M
   OPERAND2-4D
  OP2 VALUE-4D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_N, 4E
  LOGFORMAT-CONSTANT character_N, 4E
INSTRUCTION-CONSTANT
   OPERAND1-character_N
  OP1 VALUE-character_N
   OPERAND2-4E
  OP2 VALUE-4E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_O, 4F
  LOGFORMAT-CONSTANT character_O, 4F
INSTRUCTION-CONSTANT
   OPERAND1-character_O
  OP1 VALUE-character_O
   OPERAND2-4F
  OP2 VALUE-4F
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_P, 50
  LOGFORMAT-CONSTANT character_P, 50
INSTRUCTION-CONSTANT
   OPERAND1-character_P
  OP1 VALUE-character_P
   OPERAND2-50
  OP2 VALUE-50
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_Q, 51
  LOGFORMAT-CONSTANT character_Q, 51
INSTRUCTION-CONSTANT
   OPERAND1-character_Q
  OP1 VALUE-character_Q
   OPERAND2-51
  OP2 VALUE-51
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_R, 52
  LOGFORMAT-CONSTANT character_R, 52
INSTRUCTION-CONSTANT
   OPERAND1-character_R
  OP1 VALUE-character_R
   OPERAND2-52
  OP2 VALUE-52
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_S, 53
  LOGFORMAT-CONSTANT character_S, 53
INSTRUCTION-CONSTANT
   OPERAND1-character_S
  OP1 VALUE-character_S
   OPERAND2-53
  OP2 VALUE-53
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_T, 54
  LOGFORMAT-CONSTANT character_T, 54
INSTRUCTION-CONSTANT
   OPERAND1-character_T
  OP1 VALUE-character_T
   OPERAND2-54
  OP2 VALUE-54
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_U, 55
  LOGFORMAT-CONSTANT character_U, 55
INSTRUCTION-CONSTANT
   OPERAND1-character_U
  OP1 VALUE-character_U
   OPERAND2-55
  OP2 VALUE-55
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_V, 56
  LOGFORMAT-CONSTANT character_V, 56
INSTRUCTION-CONSTANT
   OPERAND1-character_V
  OP1 VALUE-character_V
   OPERAND2-56
  OP2 VALUE-56
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_W, 57
  LOGFORMAT-CONSTANT character_W, 57
INSTRUCTION-CONSTANT
   OPERAND1-character_W
  OP1 VALUE-character_W
   OPERAND2-57
  OP2 VALUE-57
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_X, 58
  LOGFORMAT-CONSTANT character_X, 58
INSTRUCTION-CONSTANT
   OPERAND1-character_X
  OP1 VALUE-character_X
   OPERAND2-58
  OP2 VALUE-58
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_Y, 59
  LOGFORMAT-CONSTANT character_Y, 59
INSTRUCTION-CONSTANT
   OPERAND1-character_Y
  OP1 VALUE-character_Y
   OPERAND2-59
  OP2 VALUE-59
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_Z, 5A
  LOGFORMAT-CONSTANT character_Z, 5A
INSTRUCTION-CONSTANT
   OPERAND1-character_Z
  OP1 VALUE-character_Z
   OPERAND2-5A
  OP2 VALUE-5A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_0, 30
  LOGFORMAT-CONSTANT character_0, 30
INSTRUCTION-CONSTANT
   OPERAND1-character_0
  OP1 VALUE-character_0
   OPERAND2-30
  OP2 VALUE-30
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_1, 31
  LOGFORMAT-CONSTANT character_1, 31
INSTRUCTION-CONSTANT
   OPERAND1-character_1
  OP1 VALUE-character_1
   OPERAND2-31
  OP2 VALUE-31
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_2, 32
  LOGFORMAT-CONSTANT character_2, 32
INSTRUCTION-CONSTANT
   OPERAND1-character_2
  OP1 VALUE-character_2
   OPERAND2-32
  OP2 VALUE-32
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_3, 33
  LOGFORMAT-CONSTANT character_3, 33
INSTRUCTION-CONSTANT
   OPERAND1-character_3
  OP1 VALUE-character_3
   OPERAND2-33
  OP2 VALUE-33
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_4, 34
  LOGFORMAT-CONSTANT character_4, 34
INSTRUCTION-CONSTANT
   OPERAND1-character_4
  OP1 VALUE-character_4
   OPERAND2-34
  OP2 VALUE-34
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_5, 35
  LOGFORMAT-CONSTANT character_5, 35
INSTRUCTION-CONSTANT
   OPERAND1-character_5
  OP1 VALUE-character_5
   OPERAND2-35
  OP2 VALUE-35
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_6, 36
  LOGFORMAT-CONSTANT character_6, 36
INSTRUCTION-CONSTANT
   OPERAND1-character_6
  OP1 VALUE-character_6
   OPERAND2-36
  OP2 VALUE-36
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_7, 37
  LOGFORMAT-CONSTANT character_7, 37
INSTRUCTION-CONSTANT
   OPERAND1-character_7
  OP1 VALUE-character_7
   OPERAND2-37
  OP2 VALUE-37
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_8, 38
  LOGFORMAT-CONSTANT character_8, 38
INSTRUCTION-CONSTANT
   OPERAND1-character_8
  OP1 VALUE-character_8
   OPERAND2-38
  OP2 VALUE-38
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_9, 39
  LOGFORMAT-CONSTANT character_9, 39
INSTRUCTION-CONSTANT
   OPERAND1-character_9
  OP1 VALUE-character_9
   OPERAND2-39
  OP2 VALUE-39
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_colon, 3A
  LOGFORMAT-CONSTANT character_colon, 3A
INSTRUCTION-CONSTANT
   OPERAND1-character_colon
  OP1 VALUE-character_colon
   OPERAND2-3A
  OP2 VALUE-3A
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_fullstop, 2E
  LOGFORMAT-CONSTANT character_fullstop, 2E
INSTRUCTION-CONSTANT
   OPERAND1-character_fullstop
  OP1 VALUE-character_fullstop
   OPERAND2-2E
  OP2 VALUE-2E
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_semi_colon, 3B
  LOGFORMAT-CONSTANT character_semi_colon, 3B
INSTRUCTION-CONSTANT
   OPERAND1-character_semi_colon
  OP1 VALUE-character_semi_colon
   OPERAND2-3B
  OP2 VALUE-3B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_minus, 2D
  LOGFORMAT-CONSTANT character_minus, 2D
INSTRUCTION-CONSTANT
   OPERAND1-character_minus
  OP1 VALUE-character_minus
   OPERAND2-2D
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_plus, 2B
  LOGFORMAT-CONSTANT character_plus, 2B
INSTRUCTION-CONSTANT
   OPERAND1-character_plus
  OP1 VALUE-character_plus
   OPERAND2-2B
  OP2 VALUE-2B
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_comma, 2C
  LOGFORMAT-CONSTANT character_comma, 2C
INSTRUCTION-CONSTANT
   OPERAND1-character_comma
  OP1 VALUE-character_comma
   OPERAND2-2C
  OP2 VALUE-2C
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_less_than, 3C
  LOGFORMAT-CONSTANT character_less_than, 3C
INSTRUCTION-CONSTANT
   OPERAND1-character_less_than
  OP1 VALUE-character_less_than
   OPERAND2-3C
  OP2 VALUE-3C
    COMMENT-;'<'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_greater_than, 3E
  LOGFORMAT-CONSTANT character_greater_than, 3E
INSTRUCTION-CONSTANT
   OPERAND1-character_greater_than
  OP1 VALUE-character_greater_than
   OPERAND2-3E
  OP2 VALUE-3E
    COMMENT-;'>'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_open, 28
  LOGFORMAT-CONSTANT character_open, 28
INSTRUCTION-CONSTANT
   OPERAND1-character_open
  OP1 VALUE-character_open
   OPERAND2-28
  OP2 VALUE-28
    COMMENT-;'('
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_close, 29
  LOGFORMAT-CONSTANT character_close, 29
INSTRUCTION-CONSTANT
   OPERAND1-character_close
  OP1 VALUE-character_close
   OPERAND2-29
  OP2 VALUE-29
    COMMENT-;')'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_divide, 2F
  LOGFORMAT-CONSTANT character_divide, 2F
INSTRUCTION-CONSTANT
   OPERAND1-character_divide
  OP1 VALUE-character_divide
   OPERAND2-2F
  OP2 VALUE-2F
    COMMENT-;'/'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_equals, 3D
  LOGFORMAT-CONSTANT character_equals, 3D
INSTRUCTION-CONSTANT
   OPERAND1-character_equals
  OP1 VALUE-character_equals
   OPERAND2-3D
  OP2 VALUE-3D
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_space, 20
  LOGFORMAT-CONSTANT character_space, 20
INSTRUCTION-CONSTANT
   OPERAND1-character_space
  OP1 VALUE-character_space
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_CR, 0D
  LOGFORMAT-CONSTANT character_CR, 0D
INSTRUCTION-CONSTANT
   OPERAND1-character_CR
  OP1 VALUE-character_CR
   OPERAND2-0D
  OP2 VALUE-0D
    COMMENT-;carriage return
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_LF, 0A
  LOGFORMAT-CONSTANT character_LF, 0A
INSTRUCTION-CONSTANT
   OPERAND1-character_LF
  OP1 VALUE-character_LF
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-;line feed
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_question, 3F
  LOGFORMAT-CONSTANT character_question, 3F
INSTRUCTION-CONSTANT
   OPERAND1-character_question
  OP1 VALUE-character_question
   OPERAND2-3F
  OP2 VALUE-3F
    COMMENT-;'?'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_dollar, 24
  LOGFORMAT-CONSTANT character_dollar, 24
INSTRUCTION-CONSTANT
   OPERAND1-character_dollar
  OP1 VALUE-character_dollar
   OPERAND2-24
  OP2 VALUE-24
    COMMENT-
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_exclaim, 21
  LOGFORMAT-CONSTANT character_exclaim, 21
INSTRUCTION-CONSTANT
   OPERAND1-character_exclaim
  OP1 VALUE-character_exclaim
   OPERAND2-21
  OP2 VALUE-21
    COMMENT-;'!'
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_BS, 08
  LOGFORMAT-CONSTANT character_BS, 08
INSTRUCTION-CONSTANT
   OPERAND1-character_BS
  OP1 VALUE-character_BS
   OPERAND2-08
  OP2 VALUE-08
    COMMENT-;Back Space command character
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_XON, 11
  LOGFORMAT-CONSTANT character_XON, 11
INSTRUCTION-CONSTANT
   OPERAND1-character_XON
  OP1 VALUE-character_XON
   OPERAND2-11
  OP2 VALUE-11
    COMMENT-;Flow control ON
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT character_XOFF, 13
  LOGFORMAT-CONSTANT character_XOFF, 13
INSTRUCTION-CONSTANT
   OPERAND1-character_XOFF
  OP1 VALUE-character_XOFF
   OPERAND2-13
  OP2 VALUE-13
    COMMENT-;Flow control OFF
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Scratch Pad Memory Locations
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT ISR_preserve_s0, 00
  LOGFORMAT-CONSTANT ISR_preserve_s0, 00
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s0
  OP1 VALUE-ISR_preserve_s0
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;preserve register during ISR
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Store up to one line of an MCS file as bytes
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;A typical data line consists of:-
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;:     Start character which is not stored
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;10    Number of data bytes included (16 in this case)
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;aaaa  Lower 16-bits of the storage address
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;00    Record type (data in this case)
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;dddd...   Data bytes (typically 16 which is the maximum)
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;cc    Checksum
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;CR/LF Line will end in carriage return and/or line feed which is not stored.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;So a total of 21 bytes could be stored before processing.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;This is located at the end of scratch pad memory.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT line_start, 2B
  LOGFORMAT-CONSTANT line_start, 2B
INSTRUCTION-CONSTANT
   OPERAND1-line_start
  OP1 VALUE-line_start
   OPERAND2-2B
  OP2 VALUE-2B
    COMMENT-;21 bytes until end of memory
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT data_start, 2F
  LOGFORMAT-CONSTANT data_start, 2F
INSTRUCTION-CONSTANT
   OPERAND1-data_start
  OP1 VALUE-data_start
   OPERAND2-2F
  OP2 VALUE-2F
    COMMENT-;Start of data field if present
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Initialise the system and welcome message
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-000
      LABEL-cold_start
  FORMATTED-CALL SF_init
  LOGFORMAT-CALL SF_init[029]
INSTRUCTION-CALL
   OPERAND1-SF_init
  OP1 VALUE-029
   OPERAND2-
  OP2 VALUE-
    COMMENT-;initialise StrataFLASH controls
    ADDRESS-001
      LABEL-
  FORMATTED-CALL delay_1s
  LOGFORMAT-CALL delay_1s[13D]
INSTRUCTION-CALL
   OPERAND1-delay_1s
  OP1 VALUE-13D
   OPERAND2-
  OP2 VALUE-
    COMMENT-;delay because UART is fast and JTAG startup sequence can be slow
    ADDRESS-002
      LABEL-
  FORMATTED-ENABLE INTERRUPT
  LOGFORMAT-ENABLE INTERRUPT
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
  OP1 VALUE-INTERRUPT
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Interrupt is used for XON/XOFF flow control
    ADDRESS-003
      LABEL-welcome_start
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-004
      LABEL-
  FORMATTED-CALL send_welcome
  LOGFORMAT-CALL send_welcome[1BC]
INSTRUCTION-CALL
   OPERAND1-send_welcome
  OP1 VALUE-1BC
   OPERAND2-
  OP2 VALUE-
    COMMENT-;start up message and version number
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Main menu and command selection
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-005
      LABEL-warm_start
  FORMATTED-CALL send_Menu
  LOGFORMAT-CALL send_Menu[256]
INSTRUCTION-CALL
   OPERAND1-send_Menu
  OP1 VALUE-256
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Menu and command selection
    ADDRESS-006
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-007
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-007
      LABEL-prompt
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-008
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-009
      LABEL-
  FORMATTED-LOAD UART_data, character_greater_than
  LOGFORMAT-LOAD UART_data[sF], character_greater_than[3E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_greater_than
  OP2 VALUE-3E
    COMMENT-;prompt for input
    ADDRESS-00A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-00B
      LABEL-
  FORMATTED-CALL read_upper_case
  LOGFORMAT-CALL read_upper_case[024]
INSTRUCTION-CALL
   OPERAND1-read_upper_case
  OP1 VALUE-024
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-00C
      LABEL-
  FORMATTED-COMPARE s0, character_E
  LOGFORMAT-COMPARE s0, character_E[45]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_E
  OP2 VALUE-45
    COMMENT-;test for commands and execute as required
    ADDRESS-00D
      LABEL-
  FORMATTED-JUMP Z, erase_command
  LOGFORMAT-JUMP Z, erase_command[02C]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-erase_command
  OP2 VALUE-02C
    COMMENT-
    ADDRESS-00E
      LABEL-
  FORMATTED-COMPARE s0, character_B
  LOGFORMAT-COMPARE s0, character_B[42]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_B
  OP2 VALUE-42
    COMMENT-
    ADDRESS-00F
      LABEL-
  FORMATTED-JUMP Z, block_erase_command
  LOGFORMAT-JUMP Z, block_erase_command[02E]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-block_erase_command
  OP2 VALUE-02E
    COMMENT-
    ADDRESS-010
      LABEL-
  FORMATTED-COMPARE s0, character_P
  LOGFORMAT-COMPARE s0, character_P[50]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_P
  OP2 VALUE-50
    COMMENT-
    ADDRESS-011
      LABEL-
  FORMATTED-JUMP Z, program_command
  LOGFORMAT-JUMP Z, program_command[049]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-program_command
  OP2 VALUE-049
    COMMENT-
    ADDRESS-012
      LABEL-
  FORMATTED-COMPARE s0, character_W
  LOGFORMAT-COMPARE s0, character_W[57]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_W
  OP2 VALUE-57
    COMMENT-
    ADDRESS-013
      LABEL-
  FORMATTED-JUMP Z, write_command
  LOGFORMAT-JUMP Z, write_command[08E]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-write_command
  OP2 VALUE-08E
    COMMENT-
    ADDRESS-014
      LABEL-
  FORMATTED-COMPARE s0, character_R
  LOGFORMAT-COMPARE s0, character_R[52]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_R
  OP2 VALUE-52
    COMMENT-
    ADDRESS-015
      LABEL-
  FORMATTED-JUMP Z, read_command
  LOGFORMAT-JUMP Z, read_command[0A5]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-read_command
  OP2 VALUE-0A5
    COMMENT-
    ADDRESS-016
      LABEL-
  FORMATTED-COMPARE s0, character_A
  LOGFORMAT-COMPARE s0, character_A[41]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_A
  OP2 VALUE-41
    COMMENT-;Comando mio
    ADDRESS-017
      LABEL-
  FORMATTED-JUMP Z, arch_command
  LOGFORMAT-JUMP Z, arch_command[0C4]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-arch_command
  OP2 VALUE-0C4
    COMMENT-;Comando mio
    ADDRESS-018
      LABEL-
  FORMATTED-COMPARE s0, character_I
  LOGFORMAT-COMPARE s0, character_I[49]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_I
  OP2 VALUE-49
    COMMENT-
    ADDRESS-019
      LABEL-
  FORMATTED-JUMP Z, SF_information
  LOGFORMAT-JUMP Z, SF_information[0E5]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-SF_information
  OP2 VALUE-0E5
    COMMENT-
    ADDRESS-01A
      LABEL-
  FORMATTED-COMPARE s0, character_H
  LOGFORMAT-COMPARE s0, character_H[48]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_H
  OP2 VALUE-48
    COMMENT-
    ADDRESS-01B
      LABEL-
  FORMATTED-JUMP Z, welcome_start
  LOGFORMAT-JUMP Z, welcome_start[003]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-welcome_start
  OP2 VALUE-003
    COMMENT-
    ADDRESS-01C
      LABEL-
  FORMATTED-COMPARE s0, character_S
  LOGFORMAT-COMPARE s0, character_S[53]
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_S
  OP2 VALUE-53
    COMMENT-
    ADDRESS-01D
      LABEL-
  FORMATTED-JUMP Z, SF_status
  LOGFORMAT-JUMP Z, SF_status[0F8]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-SF_status
  OP2 VALUE-0F8
    COMMENT-
    ADDRESS-01E
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-;no valid command input
    ADDRESS-01F
      LABEL-
  FORMATTED-LOAD UART_data, character_question
  LOGFORMAT-LOAD UART_data[sF], character_question[3F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_question
  OP2 VALUE-3F
    COMMENT-;display ???
    ADDRESS-020
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-021
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-022
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-023
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Try again!
    ADDRESS-024
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-024
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-024
      LABEL-read_upper_case
  FORMATTED-CALL read_from_UART
  LOGFORMAT-CALL read_from_UART[142]
INSTRUCTION-CALL
   OPERAND1-read_from_UART
  OP1 VALUE-142
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read command character from UART
    ADDRESS-025
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-;echo character
    ADDRESS-026
      LABEL-
  FORMATTED-LOAD s0, UART_data
  LOGFORMAT-LOAD s0, UART_data[sF]
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-UART_data
  OP2 VALUE-sF
    COMMENT-;convert to upper case
    ADDRESS-027
      LABEL-
  FORMATTED-CALL upper_case
  LOGFORMAT-CALL upper_case[161]
INSTRUCTION-CALL
   OPERAND1-upper_case
  OP1 VALUE-161
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-028
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Initialise the StrataFlash Memory control signals.
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; SF_read = 0   - Output enable off
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; SF_ce = 1     - Deselect StrataFLASH memory
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; SF_we = 1     - Write enable off
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Register used s0
    ADDRESS-029
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-029
      LABEL-SF_init
  FORMATTED-LOAD s0, 06
  LOGFORMAT-LOAD s0, 06
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-
    ADDRESS-02A
      LABEL-
  FORMATTED-OUTPUT s0, SF_control_port
  LOGFORMAT-OUTPUT s0, SF_control_port[08]
INSTRUCTION-OUTPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-SF_control_port
  OP2 VALUE-08
    COMMENT-
    ADDRESS-02B
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Erase Command - Perform bulk erase of the StrataFLASH memory
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This routine executes the block erase command 128 times with a different base
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; address in each case.
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Note that this could take as long as 8 minutes 30 seconds
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; and even typical times will be approximately 2 minutes.
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s1,s7,s8,s9
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02C
      LABEL-erase_command
  FORMATTED-LOAD s9, FE
  LOGFORMAT-LOAD s9, FE
INSTRUCTION-LOAD
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-FE
  OP2 VALUE-FE
    COMMENT-;define base address of block 127 = FE0000
    ADDRESS-02D
      LABEL-
  FORMATTED-JUMP blocks_erase
  LOGFORMAT-JUMP blocks_erase[02F]
INSTRUCTION-JUMP
   OPERAND1-blocks_erase
  OP1 VALUE-02F
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Block Erase Command - Performs erase of lowest 3 blocks of StrataFLASH memory which
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; covers the address range 000000 to 05FFFF in which the configuration for an XC3S500E
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; would be able to fit (000000 to 045470).
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This routine executes the block erase command 3 times with a different base
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; address in each case.
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Each block is 128K bytes and therefore has an address range of 000000 to 01FFFF.
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; So each block is separated by 020000 hex.
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0,s1,s7,s8,s9
    ADDRESS-02E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-02E
      LABEL-block_erase_command
  FORMATTED-LOAD s9, 04
  LOGFORMAT-LOAD s9, 04
INSTRUCTION-LOAD
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;define base address of block 3 = 040000
    ADDRESS-02F
      LABEL-blocks_erase
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-030
      LABEL-
  FORMATTED-CALL send_Confirm
  LOGFORMAT-CALL send_Confirm[2F7]
INSTRUCTION-CALL
   OPERAND1-send_Confirm
  OP1 VALUE-2F7
   OPERAND2-
  OP2 VALUE-
    COMMENT-;confirm command with a 'Y' which must be upper case
    ADDRESS-031
      LABEL-
  FORMATTED-CALL read_from_UART
  LOGFORMAT-CALL read_from_UART[142]
INSTRUCTION-CALL
   OPERAND1-read_from_UART
  OP1 VALUE-142
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read command character from UART
    ADDRESS-032
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-;echo input
    ADDRESS-033
      LABEL-
  FORMATTED-COMPARE UART_data, character_Y
  LOGFORMAT-COMPARE UART_data[sF], character_Y[59]
INSTRUCTION-COMPARE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_Y
  OP2 VALUE-59
    COMMENT-
    ADDRESS-034
      LABEL-
  FORMATTED-JUMP NZ, abort_erase
  LOGFORMAT-JUMP NZ, abort_erase[041]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-abort_erase
  OP2 VALUE-041
    COMMENT-
    ADDRESS-035
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-036
      LABEL-
  FORMATTED-CALL send_Erase_in_progress
  LOGFORMAT-CALL send_Erase_in_progress[22C]
INSTRUCTION-CALL
   OPERAND1-send_Erase_in_progress
  OP1 VALUE-22C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-037
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-038
      LABEL-
  FORMATTED-LOAD s8, 00
  LOGFORMAT-LOAD s8, 00
INSTRUCTION-LOAD
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;define lower address of each block = xx0000
    ADDRESS-039
      LABEL-
  FORMATTED-LOAD s7, 00
  LOGFORMAT-LOAD s7, 00
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-03A
      LABEL-blocks_erase_loop
  FORMATTED-LOAD UART_data, character_fullstop
  LOGFORMAT-LOAD UART_data[sF], character_fullstop[2E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_fullstop
  OP2 VALUE-2E
    COMMENT-;progress dots
    ADDRESS-03B
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03C
      LABEL-
  FORMATTED-CALL SF_erase_block
  LOGFORMAT-CALL SF_erase_block[043]
INSTRUCTION-CALL
   OPERAND1-SF_erase_block
  OP1 VALUE-043
   OPERAND2-
  OP2 VALUE-
    COMMENT-;erase block
    ADDRESS-03D
      LABEL-
  FORMATTED-SUB s9, 02
  LOGFORMAT-SUB s9, 02
INSTRUCTION-SUB
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;decrement base address by 1 block
    ADDRESS-03E
      LABEL-
  FORMATTED-JUMP NC, blocks_erase_loop
  LOGFORMAT-JUMP NC, blocks_erase_loop[03A]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-blocks_erase_loop
  OP2 VALUE-03A
    COMMENT-;repeat until block 0 is erased
    ADDRESS-03F
      LABEL-
  FORMATTED-CALL send_OK
  LOGFORMAT-CALL send_OK[24F]
INSTRUCTION-CALL
   OPERAND1-send_OK
  OP1 VALUE-24F
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-040
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-041
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-041
      LABEL-abort_erase
  FORMATTED-CALL send_Abort
  LOGFORMAT-CALL send_Abort[314]
INSTRUCTION-CALL
   OPERAND1-send_Abort
  OP1 VALUE-314
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-042
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Erase a single 128K Byte block of the StrataFlash Memory
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The 24-bit address of the block should be supplied in register set [s9,s8,s7].
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; To erase a block the address must be set and then the block erase command (20 hex)
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; written to the memory followed by the write confirm command (D0 hex).
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The act of erasing a block may take up to 1 second to complete. This routine
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; waits for the memory to be ready before restoring the normal read array mode and
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; returning.
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s1,s7,s8,s9
    ADDRESS-043
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-043
      LABEL-SF_erase_block
  FORMATTED-LOAD s1, 20
  LOGFORMAT-LOAD s1, 20
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-20
  OP2 VALUE-20
    COMMENT-;block erase command
    ADDRESS-044
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-045
      LABEL-
  FORMATTED-LOAD s1, D0
  LOGFORMAT-LOAD s1, D0
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-D0
  OP2 VALUE-D0
    COMMENT-;write confirm command
    ADDRESS-046
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-047
      LABEL-
  FORMATTED-CALL wait_SF_ready
  LOGFORMAT-CALL wait_SF_ready[11A]
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
  OP1 VALUE-11A
   OPERAND2-
  OP2 VALUE-
    COMMENT-;wait for erase to complete
    ADDRESS-048
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-049
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-049
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-049
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-049
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Program Command - Program StrataFLASH memory with data defined in an MCS file
    ADDRESS-049
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-049
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-049
      LABEL-program_command
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04A
      LABEL-
  FORMATTED-CALL send_Waiting_MCS_file
  LOGFORMAT-CALL send_Waiting_MCS_file[205]
INSTRUCTION-CALL
   OPERAND1-send_Waiting_MCS_file
  OP1 VALUE-205
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04B
      LABEL-
  FORMATTED-CALL program_MCS
  LOGFORMAT-CALL program_MCS[04E]
INSTRUCTION-CALL
   OPERAND1-program_MCS
  OP1 VALUE-04E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04C
      LABEL-
  FORMATTED-CALL send_OK
  LOGFORMAT-CALL send_OK[24F]
INSTRUCTION-CALL
   OPERAND1-send_OK
  OP1 VALUE-24F
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04D
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Program StrataFLASH memory with data defined in an MCS file
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Reads the MCS file from the UART and programs the Strata FLASH device at the locations.
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;specified by the file contents.
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;This routine will continue until an end of file record is detected.
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;For each line of MCS received, the current address will be output so that
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;progress can be monitored.
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-04E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-04E
      LABEL-program_MCS
  FORMATTED-CALL read_MCS_line
  LOGFORMAT-CALL read_MCS_line[059]
INSTRUCTION-CALL
   OPERAND1-read_MCS_line
  OP1 VALUE-059
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read line from UART
    ADDRESS-04F
      LABEL-
  FORMATTED-CALL MCS_address
  LOGFORMAT-CALL MCS_address[069]
INSTRUCTION-CALL
   OPERAND1-MCS_address
  OP1 VALUE-069
   OPERAND2-
  OP2 VALUE-
    COMMENT-;find start address and record type
    ADDRESS-050
      LABEL-
  FORMATTED-COMPARE sB, 01
  LOGFORMAT-COMPARE sB, 01
INSTRUCTION-COMPARE
   OPERAND1-sB
  OP1 VALUE-sB
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;test for end record
    ADDRESS-051
      LABEL-
  FORMATTED-RETURN Z
  LOGFORMAT-RETURN Z
INSTRUCTION-RETURN
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-
  OP2 VALUE-
    COMMENT-;end of programming
    ADDRESS-052
      LABEL-
  FORMATTED-COMPARE sB, 04
  LOGFORMAT-COMPARE sB, 04
INSTRUCTION-COMPARE
   OPERAND1-sB
  OP1 VALUE-sB
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;test for extended address record
    ADDRESS-053
      LABEL-
  FORMATTED-JUMP Z, program_MCS
  LOGFORMAT-JUMP Z, program_MCS[04E]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-program_MCS
  OP2 VALUE-04E
    COMMENT-;no data with this record and upper address now correct
    ADDRESS-054
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-054
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Assume data record type 00 which is data so need to program specified number
    ADDRESS-054
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;of bytes into memory at correct address.
    ADDRESS-054
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-054
      LABEL-write_spm_data
  FORMATTED-CALL send_hex_3bytes
  LOGFORMAT-CALL send_hex_3bytes[190]
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
  OP1 VALUE-190
   OPERAND2-
  OP2 VALUE-
    COMMENT-;send address to indicate progress
    ADDRESS-055
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-056
      LABEL-
  FORMATTED-FETCH sA, line_start
  LOGFORMAT-FETCH sA, line_start[2B]
INSTRUCTION-FETCH
   OPERAND1-sA
  OP1 VALUE-sA
   OPERAND2-line_start
  OP2 VALUE-2B
    COMMENT-;read number of data bytes to program
    ADDRESS-057
      LABEL-
  FORMATTED-CALL SF_buffer_write
  LOGFORMAT-CALL SF_buffer_write[079]
INSTRUCTION-CALL
   OPERAND1-SF_buffer_write
  OP1 VALUE-079
   OPERAND2-
  OP2 VALUE-
    COMMENT-;write bytes to memory
    ADDRESS-058
      LABEL-
  FORMATTED-JUMP program_MCS
  LOGFORMAT-JUMP program_MCS[04E]
INSTRUCTION-JUMP
   OPERAND1-program_MCS
  OP1 VALUE-04E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Read one line of an MCS file into scratch pad memory
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Reads one line of MCS file format into scratch pad memory starting at location 'line_start'.
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The routine detects the line start character ':' ignoring any preceding characters. This
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;will remove any additional CR or LF characters.
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;It then reads each subsequent pair of ASCII characters, converts them to true hex in the
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;range 00 to FF and stores them in scratch pad memory.
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The end of the line is determined by either a CR or LF character.
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The value last returned in register 'sE' will be the pointer to the location in
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;scratch pad memory following the last byte for the line read.
    ADDRESS-059
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-059
      LABEL-read_MCS_line
  FORMATTED-LOAD sE, line_start
  LOGFORMAT-LOAD sE, line_start[2B]
INSTRUCTION-LOAD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-line_start
  OP2 VALUE-2B
    COMMENT-;initialise SPM memory pointer
    ADDRESS-05A
      LABEL-wait_MCS_line_Start
  FORMATTED-CALL read_from_UART
  LOGFORMAT-CALL read_from_UART[142]
INSTRUCTION-CALL
   OPERAND1-read_from_UART
  OP1 VALUE-142
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read character
    ADDRESS-05B
      LABEL-
  FORMATTED-COMPARE UART_data, character_colon
  LOGFORMAT-COMPARE UART_data[sF], character_colon[3A]
INSTRUCTION-COMPARE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_colon
  OP2 VALUE-3A
    COMMENT-;test for start character
    ADDRESS-05C
      LABEL-
  FORMATTED-JUMP NZ, wait_MCS_line_Start
  LOGFORMAT-JUMP NZ, wait_MCS_line_Start[05A]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_MCS_line_Start
  OP2 VALUE-05A
    COMMENT-
    ADDRESS-05D
      LABEL-read_MCS_byte
  FORMATTED-CALL read_from_UART
  LOGFORMAT-CALL read_from_UART[142]
INSTRUCTION-CALL
   OPERAND1-read_from_UART
  OP1 VALUE-142
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read character
    ADDRESS-05E
      LABEL-
  FORMATTED-COMPARE UART_data, character_CR
  LOGFORMAT-COMPARE UART_data[sF], character_CR[0D]
INSTRUCTION-COMPARE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_CR
  OP2 VALUE-0D
    COMMENT-;test for end of line
    ADDRESS-05F
      LABEL-
  FORMATTED-RETURN Z
  LOGFORMAT-RETURN Z
INSTRUCTION-RETURN
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-060
      LABEL-
  FORMATTED-COMPARE UART_data, character_LF
  LOGFORMAT-COMPARE UART_data[sF], character_LF[0A]
INSTRUCTION-COMPARE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_LF
  OP2 VALUE-0A
    COMMENT-;test for end of line
    ADDRESS-061
      LABEL-
  FORMATTED-RETURN Z
  LOGFORMAT-RETURN Z
INSTRUCTION-RETURN
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-062
      LABEL-
  FORMATTED-LOAD s3, UART_data
  LOGFORMAT-LOAD s3, UART_data[sF]
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-UART_data
  OP2 VALUE-sF
    COMMENT-;upper nibble character
    ADDRESS-063
      LABEL-
  FORMATTED-CALL read_from_UART
  LOGFORMAT-CALL read_from_UART[142]
INSTRUCTION-CALL
   OPERAND1-read_from_UART
  OP1 VALUE-142
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read character
    ADDRESS-064
      LABEL-
  FORMATTED-LOAD s2, UART_data
  LOGFORMAT-LOAD s2, UART_data[sF]
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-UART_data
  OP2 VALUE-sF
    COMMENT-;lower nibble character
    ADDRESS-065
      LABEL-
  FORMATTED-CALL ASCII_byte_to_hex
  LOGFORMAT-CALL ASCII_byte_to_hex[197]
INSTRUCTION-CALL
   OPERAND1-ASCII_byte_to_hex
  OP1 VALUE-197
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to true hex value
    ADDRESS-066
      LABEL-
  FORMATTED-STORE s0, (sE)
  LOGFORMAT-STORE s0, (sE)
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sE)
  OP2 VALUE-(sE)
    COMMENT-;write to SPM
    ADDRESS-067
      LABEL-
  FORMATTED-ADD sE, 01
  LOGFORMAT-ADD sE, 01
INSTRUCTION-ADD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment pointer
    ADDRESS-068
      LABEL-
  FORMATTED-JUMP read_MCS_byte
  LOGFORMAT-JUMP read_MCS_byte[05D]
INSTRUCTION-JUMP
   OPERAND1-read_MCS_byte
  OP1 VALUE-05D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Determine the current address for the line of an MCS file in scratch pad memory
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Checks the existing line data stored in scratch pad memory starting at location
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;'line_start' and determines the current address.
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The address is in the register set [s9,s8,s7] before and after this routine is
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;executed because not all address bits are defined by a given line of MCS and
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;the undefined bits remain constant.
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;A record type of 04 will update [s9].
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;A record type of 00 will update [s8,s7].
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;On return, the register sB will contain the record type and
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;register sC will indicate the number of data bytes stored.
    ADDRESS-069
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-069
      LABEL-MCS_address
  FORMATTED-LOAD sD, line_start
  LOGFORMAT-LOAD sD, line_start[2B]
INSTRUCTION-LOAD
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-line_start
  OP2 VALUE-2B
    COMMENT-;initialise SPM memory pointer
    ADDRESS-06A
      LABEL-
  FORMATTED-FETCH sC, (sD)
  LOGFORMAT-FETCH sC, (sD)
INSTRUCTION-FETCH
   OPERAND1-sC
  OP1 VALUE-sC
   OPERAND2-(sD)
  OP2 VALUE-(sD)
    COMMENT-;read number of bytes on line
    ADDRESS-06B
      LABEL-
  FORMATTED-ADD sD, 03
  LOGFORMAT-ADD sD, 03
INSTRUCTION-ADD
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-03
  OP2 VALUE-03
    COMMENT-;move to record type
    ADDRESS-06C
      LABEL-
  FORMATTED-FETCH sB, (sD)
  LOGFORMAT-FETCH sB, (sD)
INSTRUCTION-FETCH
   OPERAND1-sB
  OP1 VALUE-sB
   OPERAND2-(sD)
  OP2 VALUE-(sD)
    COMMENT-;read record type
    ADDRESS-06D
      LABEL-
  FORMATTED-COMPARE sB, 00
  LOGFORMAT-COMPARE sB, 00
INSTRUCTION-COMPARE
   OPERAND1-sB
  OP1 VALUE-sB
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;test for data record
    ADDRESS-06E
      LABEL-
  FORMATTED-JUMP Z, new_low_address
  LOGFORMAT-JUMP Z, new_low_address[074]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-new_low_address
  OP2 VALUE-074
    COMMENT-
    ADDRESS-06F
      LABEL-
  FORMATTED-COMPARE sB, 04
  LOGFORMAT-COMPARE sB, 04
INSTRUCTION-COMPARE
   OPERAND1-sB
  OP1 VALUE-sB
   OPERAND2-04
  OP2 VALUE-04
    COMMENT-;test for data record
    ADDRESS-070
      LABEL-
  FORMATTED-RETURN NZ
  LOGFORMAT-RETURN NZ
INSTRUCTION-RETURN
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-071
      LABEL-
  FORMATTED-ADD sD, 02
  LOGFORMAT-ADD sD, 02
INSTRUCTION-ADD
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;read upper 8-bits
    ADDRESS-072
      LABEL-
  FORMATTED-FETCH s9, (sD)
  LOGFORMAT-FETCH s9, (sD)
INSTRUCTION-FETCH
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-(sD)
  OP2 VALUE-(sD)
    COMMENT-
    ADDRESS-073
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-074
      LABEL-new_low_address
  FORMATTED-SUB sD, 01
  LOGFORMAT-SUB sD, 01
INSTRUCTION-SUB
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;read lower 8-bits
    ADDRESS-075
      LABEL-
  FORMATTED-FETCH s7, (sD)
  LOGFORMAT-FETCH s7, (sD)
INSTRUCTION-FETCH
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-(sD)
  OP2 VALUE-(sD)
    COMMENT-
    ADDRESS-076
      LABEL-
  FORMATTED-SUB sD, 01
  LOGFORMAT-SUB sD, 01
INSTRUCTION-SUB
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;read middle 8-bits
    ADDRESS-077
      LABEL-
  FORMATTED-FETCH s8, (sD)
  LOGFORMAT-FETCH s8, (sD)
INSTRUCTION-FETCH
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-(sD)
  OP2 VALUE-(sD)
    COMMENT-
    ADDRESS-078
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Write to Buffer of StrataFlash Memory and program
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Writing to the buffer allows faster operation than writing individual bytes.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The buffer size is limited to 32 locations. To perform a buffer write the process
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; is as follows:-
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   Write command for buffer write to StrataFLASH memory (E8 hex).
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      Base address for writing should also be set.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   Read Status register and if not ready repeat command until it is.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   Write a value specifying the number of bytes to be written LESS ONE.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      In this program the number of bytes will be specified in register sA
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      and this value needs to be decremented before writing to the memory.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   Write the correct number of actual data bytes with appropriate addresses.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      Ideally the addresses do not cross the boundary of 32 locations
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      such that LSBs are always in the range 00000 to 11111 binary.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      Crossing the boundary is OK but will take longer to program.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   Write command to confirm operation (D0 hex).
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   Read Status register and wait for ready.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   This routine additionally restores the normal read array mode before returning.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The number of bytes to be written should be supplied in register sA and must be
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; a value between 1 and 32 (01 and 20 hex).
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The 24-bit base address should be supplied in register set [s9,s8,s7].
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; On return, this will be increased by the number of locations written.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Scratch pad memory locations starting at location defined by constant
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; 'data_start' should contain the data bytes to be written.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The act of writing the buffer to the memory array may take up to 654us to complete.
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The time taken to program is recorded by register pair [sE,sD]. Each count
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sA,sD,sE
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-079
      LABEL-SF_buffer_write
  FORMATTED-LOAD s1, E8
  LOGFORMAT-LOAD s1, E8
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-E8
  OP2 VALUE-E8
    COMMENT-;command for buffer write
    ADDRESS-07A
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-07B
      LABEL-
  FORMATTED-CALL SF_byte_read
  LOGFORMAT-CALL SF_byte_read[103]
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
  OP1 VALUE-103
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read status register into s0
    ADDRESS-07C
      LABEL-
  FORMATTED-TEST s0, 80
  LOGFORMAT-TEST s0, 80
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-;test ready/busy flag
    ADDRESS-07D
      LABEL-
  FORMATTED-JUMP Z, SF_buffer_write
  LOGFORMAT-JUMP Z, SF_buffer_write[079]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-SF_buffer_write
  OP2 VALUE-079
    COMMENT-;repeat command until ready
    ADDRESS-07E
      LABEL-
  FORMATTED-LOAD s1, sA
  LOGFORMAT-LOAD s1, sA
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-sA
  OP2 VALUE-sA
    COMMENT-;Specify number of bytes to write
    ADDRESS-07F
      LABEL-
  FORMATTED-SUB s1, 01
  LOGFORMAT-SUB s1, 01
INSTRUCTION-SUB
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;one less than actual number!
    ADDRESS-080
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-081
      LABEL-
  FORMATTED-LOAD s3, data_start
  LOGFORMAT-LOAD s3, data_start[2F]
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-data_start
  OP2 VALUE-2F
    COMMENT-;point to data in scratch pad memory
    ADDRESS-082
      LABEL-write_buffer_loop
  FORMATTED-FETCH s1, (s3)
  LOGFORMAT-FETCH s1, (s3)
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(s3)
  OP2 VALUE-(s3)
    COMMENT-;fetch data
    ADDRESS-083
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-;write to buffer
    ADDRESS-084
      LABEL-
  FORMATTED-ADD s7, 01
  LOGFORMAT-ADD s7, 01
INSTRUCTION-ADD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment address
    ADDRESS-085
      LABEL-
  FORMATTED-ADDCY s8, 00
  LOGFORMAT-ADDCY s8, 00
INSTRUCTION-ADDCY
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-086
      LABEL-
  FORMATTED-ADDCY s9, 00
  LOGFORMAT-ADDCY s9, 00
INSTRUCTION-ADDCY
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-087
      LABEL-
  FORMATTED-ADD s3, 01
  LOGFORMAT-ADD s3, 01
INSTRUCTION-ADD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment SPM pointer
    ADDRESS-088
      LABEL-
  FORMATTED-SUB sA, 01
  LOGFORMAT-SUB sA, 01
INSTRUCTION-SUB
   OPERAND1-sA
  OP1 VALUE-sA
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;count bytes remaining
    ADDRESS-089
      LABEL-
  FORMATTED-JUMP NZ, write_buffer_loop
  LOGFORMAT-JUMP NZ, write_buffer_loop[082]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-write_buffer_loop
  OP2 VALUE-082
    COMMENT-
    ADDRESS-08A
      LABEL-
  FORMATTED-LOAD s1, D0
  LOGFORMAT-LOAD s1, D0
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-D0
  OP2 VALUE-D0
    COMMENT-;command to confirm write
    ADDRESS-08B
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-08C
      LABEL-
  FORMATTED-CALL wait_SF_ready
  LOGFORMAT-CALL wait_SF_ready[11A]
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
  OP1 VALUE-11A
   OPERAND2-
  OP2 VALUE-
    COMMENT-;wait for program to complete and set read array mode
    ADDRESS-08D
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-08E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-08E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Write Command - Write one byte to specified address
    ADDRESS-08E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-08E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-08E
      LABEL-write_command
  FORMATTED-CALL send_address
  LOGFORMAT-CALL send_address[321]
INSTRUCTION-CALL
   OPERAND1-send_address
  OP1 VALUE-321
   OPERAND2-
  OP2 VALUE-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF
    ADDRESS-08F
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-090
      LABEL-
  FORMATTED-JUMP C, write_command
  LOGFORMAT-JUMP C, write_command[08E]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-write_command
  OP2 VALUE-08E
    COMMENT-;bad input address
    ADDRESS-091
      LABEL-
  FORMATTED-LOAD s9, s0
  LOGFORMAT-LOAD s9, s0
INSTRUCTION-LOAD
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-092
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-093
      LABEL-
  FORMATTED-JUMP C, write_command
  LOGFORMAT-JUMP C, write_command[08E]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-write_command
  OP2 VALUE-08E
    COMMENT-;bad input address
    ADDRESS-094
      LABEL-
  FORMATTED-LOAD s8, s0
  LOGFORMAT-LOAD s8, s0
INSTRUCTION-LOAD
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-095
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-096
      LABEL-
  FORMATTED-JUMP C, write_command
  LOGFORMAT-JUMP C, write_command[08E]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-write_command
  OP2 VALUE-08E
    COMMENT-;bad input address
    ADDRESS-097
      LABEL-
  FORMATTED-LOAD s7, s0
  LOGFORMAT-LOAD s7, s0
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-098
      LABEL-get_data
  FORMATTED-CALL send_data
  LOGFORMAT-CALL send_data[331]
INSTRUCTION-CALL
   OPERAND1-send_data
  OP1 VALUE-331
   OPERAND2-
  OP2 VALUE-
    COMMENT-;obtain 8-bit data 00 to FF into s0
    ADDRESS-099
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-09A
      LABEL-
  FORMATTED-JUMP C, get_data
  LOGFORMAT-JUMP C, get_data[098]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-get_data
  OP2 VALUE-098
    COMMENT-;bad input data
    ADDRESS-09B
      LABEL-
  FORMATTED-CALL SF_single_byte_write
  LOGFORMAT-CALL SF_single_byte_write[09F]
INSTRUCTION-CALL
   OPERAND1-SF_single_byte_write
  OP1 VALUE-09F
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-09C
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-09D
      LABEL-
  FORMATTED-CALL send_OK
  LOGFORMAT-CALL send_OK[24F]
INSTRUCTION-CALL
   OPERAND1-send_OK
  OP1 VALUE-24F
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-09E
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Write a single byte to StrataFlash Memory
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; To write a single byte to StrataFLASH memory the address must be set and the
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; single-word/byte program command (40 hex) sent to the memory. Then the data byte can
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; be written to the memory using the same address.
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Register s0 should contain the byte data to be written to the memory.
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The act of writing the memory array may take up to 175us to complete. This routine
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; waits for the memory to be ready before restoring the normal read array mode and
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; returning. The time taken to program is recorded by register pair [sE,sD]. Each count
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0,s1,s7,s8,s9
    ADDRESS-09F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-09F
      LABEL-SF_single_byte_write
  FORMATTED-LOAD s1, 40
  LOGFORMAT-LOAD s1, 40
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-40
  OP2 VALUE-40
    COMMENT-;command for single byte program
    ADDRESS-0A0
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0A1
      LABEL-
  FORMATTED-LOAD s1, s0
  LOGFORMAT-LOAD s1, s0
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;write data to be programmed
    ADDRESS-0A2
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0A3
      LABEL-
  FORMATTED-CALL wait_SF_ready
  LOGFORMAT-CALL wait_SF_ready[11A]
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
  OP1 VALUE-11A
   OPERAND2-
  OP2 VALUE-
    COMMENT-;wait for program to complete
    ADDRESS-0A4
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0A5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0A5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0A5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0A5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Read Command - Read one page of memory at specified address
    ADDRESS-0A5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0A5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0A5
      LABEL-read_command
  FORMATTED-CALL send_address
  LOGFORMAT-CALL send_address[321]
INSTRUCTION-CALL
   OPERAND1-send_address
  OP1 VALUE-321
   OPERAND2-
  OP2 VALUE-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF.  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0A6
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read value from UART
    ADDRESS-0A7
      LABEL-
  FORMATTED-JUMP C, read_command
  LOGFORMAT-JUMP C, read_command[0A5]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-read_command
  OP2 VALUE-0A5
    COMMENT-;bad input address
    ADDRESS-0A8
      LABEL-
  FORMATTED-LOAD s9, s0
  LOGFORMAT-LOAD s9, s0
INSTRUCTION-LOAD
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-0A9
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0AA
      LABEL-
  FORMATTED-JUMP C, read_command
  LOGFORMAT-JUMP C, read_command[0A5]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-read_command
  OP2 VALUE-0A5
    COMMENT-;bad input address
    ADDRESS-0AB
      LABEL-
  FORMATTED-LOAD s8, s0
  LOGFORMAT-LOAD s8, s0
INSTRUCTION-LOAD
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-0AC
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0AD
      LABEL-
  FORMATTED-JUMP C, read_command
  LOGFORMAT-JUMP C, read_command[0A5]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-read_command
  OP2 VALUE-0A5
    COMMENT-;bad input address
    ADDRESS-0AE
      LABEL-
  FORMATTED-LOAD s7, s0
  LOGFORMAT-LOAD s7, s0
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-0AF
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0B0
      LABEL-
  FORMATTED-CALL send_SF_page
  LOGFORMAT-CALL send_SF_page[0B3]
INSTRUCTION-CALL
   OPERAND1-send_SF_page
  OP1 VALUE-0B3
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B1
      LABEL-
  FORMATTED-CALL send_OK
  LOGFORMAT-CALL send_OK[24F]
INSTRUCTION-CALL
   OPERAND1-send_OK
  OP1 VALUE-24F
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B2
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The start address should be provided in register set [s9,s8,s7].
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The display will be next 256 bytes displayed as 16 lines of 16 bytes
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;with each line commencing with the address of the first byte.
    ADDRESS-0B3
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0B3
      LABEL-send_SF_page
  FORMATTED-LOAD s6, 10
  LOGFORMAT-LOAD s6, 10
INSTRUCTION-LOAD
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-;16 lines to display
    ADDRESS-0B4
      LABEL-send_SF_line
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B5
      LABEL-
  FORMATTED-CALL send_hex_3bytes
  LOGFORMAT-CALL send_hex_3bytes[190]
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
  OP1 VALUE-190
   OPERAND2-
  OP2 VALUE-
    COMMENT-;display address                    ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B6
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B7
      LABEL-
  FORMATTED-LOAD s5, 10
  LOGFORMAT-LOAD s5, 10
INSTRUCTION-LOAD
   OPERAND1-s5
  OP1 VALUE-s5
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-;16 bytes to display on a line      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B8
      LABEL-send_SF_byte
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B9
      LABEL-
  FORMATTED-CALL SF_byte_read
  LOGFORMAT-CALL SF_byte_read[103]
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
  OP1 VALUE-103
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read byte into s0                  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BA
      LABEL-
  FORMATTED-ADD s7, 01
  LOGFORMAT-ADD s7, 01
INSTRUCTION-ADD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment StrataFLASH address      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BB
      LABEL-
  FORMATTED-ADDCY s8, 00
  LOGFORMAT-ADDCY s8, 00
INSTRUCTION-ADDCY
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BC
      LABEL-
  FORMATTED-ADDCY s9, 00
  LOGFORMAT-ADDCY s9, 00
INSTRUCTION-ADDCY
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BD
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-;display byte                       ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BE
      LABEL-
  FORMATTED-SUB s5, 01
  LOGFORMAT-SUB s5, 01
INSTRUCTION-SUB
   OPERAND1-s5
  OP1 VALUE-s5
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;count bytes per line               ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BF
      LABEL-
  FORMATTED-JUMP NZ, send_SF_byte
  LOGFORMAT-JUMP NZ, send_SF_byte[0B8]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-send_SF_byte
  OP2 VALUE-0B8
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C0
      LABEL-
  FORMATTED-SUB s6, 01
  LOGFORMAT-SUB s6, 01
INSTRUCTION-SUB
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;count lines                        ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C1
      LABEL-
  FORMATTED-JUMP NZ, send_SF_line
  LOGFORMAT-JUMP NZ, send_SF_line[0B4]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-send_SF_line
  OP2 VALUE-0B4
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C2
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C3
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;**************************************************************************************
    ADDRESS-0C4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Leer Archivo completo- lee el archivo completo
    ADDRESS-0C4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0C4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0C4
      LABEL-arch_command
  FORMATTED-CALL send_address
  LOGFORMAT-CALL send_address[321]
INSTRUCTION-CALL
   OPERAND1-send_address
  OP1 VALUE-321
   OPERAND2-
  OP2 VALUE-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF.  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C5
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read value from UART
    ADDRESS-0C6
      LABEL-
  FORMATTED-JUMP C, read_command
  LOGFORMAT-JUMP C, read_command[0A5]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-read_command
  OP2 VALUE-0A5
    COMMENT-;bad input address
    ADDRESS-0C7
      LABEL-
  FORMATTED-LOAD s9, s0
  LOGFORMAT-LOAD s9, s0
INSTRUCTION-LOAD
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-0C8
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0C9
      LABEL-
  FORMATTED-JUMP C, read_command
  LOGFORMAT-JUMP C, read_command[0A5]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-read_command
  OP2 VALUE-0A5
    COMMENT-;bad input address
    ADDRESS-0CA
      LABEL-
  FORMATTED-LOAD s8, s0
  LOGFORMAT-LOAD s8, s0
INSTRUCTION-LOAD
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-0CB
      LABEL-
  FORMATTED-CALL obtain_8bits
  LOGFORMAT-CALL obtain_8bits[1B0]
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
  OP1 VALUE-1B0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0CC
      LABEL-
  FORMATTED-JUMP C, read_command
  LOGFORMAT-JUMP C, read_command[0A5]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-read_command
  OP2 VALUE-0A5
    COMMENT-;bad input address
    ADDRESS-0CD
      LABEL-
  FORMATTED-LOAD s7, s0
  LOGFORMAT-LOAD s7, s0
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-0CE
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0CF
      LABEL-
  FORMATTED-CALL send_SF_page2
  LOGFORMAT-CALL send_SF_page2[0D2]
INSTRUCTION-CALL
   OPERAND1-send_SF_page2
  OP1 VALUE-0D2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D0
      LABEL-
  FORMATTED-CALL send_OK
  LOGFORMAT-CALL send_OK[24F]
INSTRUCTION-CALL
   OPERAND1-send_OK
  OP1 VALUE-24F
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D1
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D2
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D2
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The start address should be provided in register set [s9,s8,s7].
    ADDRESS-0D2
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The display will be next 256 bytes displayed as 16 lines of 16 bytes
    ADDRESS-0D2
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;with each line commencing with the address of the first byte.
    ADDRESS-0D2
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0D2
      LABEL-send_SF_page2
  FORMATTED-LOAD s6, FF
  LOGFORMAT-LOAD s6, FF
INSTRUCTION-LOAD
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-FF
  OP2 VALUE-FF
    COMMENT-; CONTADOR INTERNO (valor inicial de 255)
    ADDRESS-0D3
      LABEL-
  FORMATTED-LOAD s4, 46
  LOGFORMAT-LOAD s4, 46
INSTRUCTION-LOAD
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-46
  OP2 VALUE-46
    COMMENT-; CONTADOR EXTERNO (Valor inicial de 70): En total 17737 lines to display
    ADDRESS-0D4
      LABEL-send_SF_line2
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D5
      LABEL-
  FORMATTED-CALL send_hex_3bytes
  LOGFORMAT-CALL send_hex_3bytes[190]
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
  OP1 VALUE-190
   OPERAND2-
  OP2 VALUE-
    COMMENT-;display address                    ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D6
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D7
      LABEL-
  FORMATTED-LOAD s5, 10
  LOGFORMAT-LOAD s5, 10
INSTRUCTION-LOAD
   OPERAND1-s5
  OP1 VALUE-s5
   OPERAND2-10
  OP2 VALUE-10
    COMMENT-;16 bytes to display on a line      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D8
      LABEL-send_SF_byte2
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D9
      LABEL-
  FORMATTED-CALL SF_byte_read
  LOGFORMAT-CALL SF_byte_read[103]
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
  OP1 VALUE-103
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read byte into s0                  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DA
      LABEL-
  FORMATTED-ADD s7, 01
  LOGFORMAT-ADD s7, 01
INSTRUCTION-ADD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment StrataFLASH address      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DB
      LABEL-
  FORMATTED-ADDCY s8, 00
  LOGFORMAT-ADDCY s8, 00
INSTRUCTION-ADDCY
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DC
      LABEL-
  FORMATTED-ADDCY s9, 00
  LOGFORMAT-ADDCY s9, 00
INSTRUCTION-ADDCY
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DD
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-;display byte                       ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DE
      LABEL-
  FORMATTED-SUB s5, 01
  LOGFORMAT-SUB s5, 01
INSTRUCTION-SUB
   OPERAND1-s5
  OP1 VALUE-s5
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;count bytes per line               ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DF
      LABEL-
  FORMATTED-JUMP NZ, send_SF_byte2
  LOGFORMAT-JUMP NZ, send_SF_byte2[0D8]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-send_SF_byte2
  OP2 VALUE-0D8
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E0
      LABEL-
  FORMATTED-SUB s6, 01
  LOGFORMAT-SUB s6, 01
INSTRUCTION-SUB
   OPERAND1-s6
  OP1 VALUE-s6
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;count lines                        ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E1
      LABEL-
  FORMATTED-SUBCY s4, 00
  LOGFORMAT-SUBCY s4, 00
INSTRUCTION-SUBCY
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-0E2
      LABEL-
  FORMATTED-JUMP NZ, send_SF_line2
  LOGFORMAT-JUMP NZ, send_SF_line2[0D4]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-send_SF_line2
  OP2 VALUE-0D4
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E3
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E4
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; ID Command - Read and display the device information for the StrataFLASH FLASH memory
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Normal response should be
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   Device Manufacturer Code (Intel) = 89 hex
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;   Memory ID code for 128Mbit = 18 hex
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; To read the device information the Read device information command (90)
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; must be written to the memory. The information is read back but assumes
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; that 16-bit words are being used and hence address bit0 is not really used.
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; hence addresses 000000 and 0000001 both return the Device Manufacturer Code and
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; addresses 000002 and 0000003 both return the Memory ID code.
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; After reading the device information the read array command is written to the
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; device to put it back to normal read mode.
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0,s7,s8,s9
    ADDRESS-0E5
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0E5
      LABEL-SF_information
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-;send 'ID=' to terminal
    ADDRESS-0E6
      LABEL-
  FORMATTED-CALL send_ID
  LOGFORMAT-CALL send_ID[2E9]
INSTRUCTION-CALL
   OPERAND1-send_ID
  OP1 VALUE-2E9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0E7
      LABEL-
  FORMATTED-LOAD UART_data, character_equals
  LOGFORMAT-LOAD UART_data[sF], character_equals[3D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_equals
  OP2 VALUE-3D
    COMMENT-
    ADDRESS-0E8
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0E9
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0EA
      LABEL-
  FORMATTED-LOAD s9, 00
  LOGFORMAT-LOAD s9, 00
INSTRUCTION-LOAD
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;define base address 000000
    ADDRESS-0EB
      LABEL-
  FORMATTED-LOAD s8, 00
  LOGFORMAT-LOAD s8, 00
INSTRUCTION-LOAD
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-0EC
      LABEL-
  FORMATTED-LOAD s7, 00
  LOGFORMAT-LOAD s7, 00
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-0ED
      LABEL-
  FORMATTED-LOAD s1, 90
  LOGFORMAT-LOAD s1, 90
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-90
  OP2 VALUE-90
    COMMENT-;command to read device information
    ADDRESS-0EE
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0EF
      LABEL-
  FORMATTED-CALL SF_byte_read
  LOGFORMAT-CALL SF_byte_read[103]
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
  OP1 VALUE-103
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read Device Manufacturer Code into s0
    ADDRESS-0F0
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-;display byte
    ADDRESS-0F1
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F2
      LABEL-
  FORMATTED-LOAD s7, 02
  LOGFORMAT-LOAD s7, 02
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-;change address
    ADDRESS-0F3
      LABEL-
  FORMATTED-CALL SF_byte_read
  LOGFORMAT-CALL SF_byte_read[103]
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
  OP1 VALUE-103
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read Memory ID code into s0
    ADDRESS-0F4
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-;display byte
    ADDRESS-0F5
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F6
      LABEL-
  FORMATTED-CALL set_SF_read_array_mode
  LOGFORMAT-CALL set_SF_read_array_mode[117]
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
  OP1 VALUE-117
   OPERAND2-
  OP2 VALUE-
    COMMENT-;restore normal read array mode
    ADDRESS-0F7
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Read StrataFLASH status register
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The main reason for reading the status register is to determine when the memory
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; is ready or busy. This information is provided by bit7 (0=busy and 1=ready).
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The lower bits all indicate errors of some kind and therefore the only desirable
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; response is 00 hex or 80 hex. In this program, no error checking or clearing
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; is performed and the way this routine is executed from the menu only 80 hex is
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; expected.
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; To read the status register the read status register command must be written to
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; the device. All subsequent reads are then result in the return of the status
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; register. A different read command must be written to the device to stop this
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; mode.
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This mode is also entered automatically when performing program and erase operations.
    ADDRESS-0F8
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-0F8
      LABEL-SF_status
  FORMATTED-LOAD s9, 00
  LOGFORMAT-LOAD s9, 00
INSTRUCTION-LOAD
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;define base address 000000
    ADDRESS-0F9
      LABEL-
  FORMATTED-LOAD s8, 00
  LOGFORMAT-LOAD s8, 00
INSTRUCTION-LOAD
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-0FA
      LABEL-
  FORMATTED-LOAD s7, 00
  LOGFORMAT-LOAD s7, 00
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-0FB
      LABEL-
  FORMATTED-LOAD s1, 70
  LOGFORMAT-LOAD s1, 70
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-70
  OP2 VALUE-70
    COMMENT-;command to read status register
    ADDRESS-0FC
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0FD
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-0FE
      LABEL-
  FORMATTED-CALL SF_byte_read
  LOGFORMAT-CALL SF_byte_read[103]
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
  OP1 VALUE-103
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read status register into s0
    ADDRESS-0FF
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-;display byte
    ADDRESS-100
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-101
      LABEL-
  FORMATTED-CALL set_SF_read_array_mode
  LOGFORMAT-CALL set_SF_read_array_mode[117]
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
  OP1 VALUE-117
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-102
      LABEL-
  FORMATTED-JUMP prompt
  LOGFORMAT-JUMP prompt[007]
INSTRUCTION-JUMP
   OPERAND1-prompt
  OP1 VALUE-007
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Read a byte from StrataFlash Memory
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Register s0 will return the byte data retrieved from the memory.
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; To read a byte, the address needs to be set up on the address lines
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; and the controls set as follows
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;    SF_read = 1 - disable Spartan data outputs and enable StrataFlash outputs (OE=0)
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      SF_ce = 0 - enable StrataFLASH memory
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      SF_we = 1 - Write enable off
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The access time of the memory is 75ns. This is equivalent to 3.75 clock cycles at
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; provides adequate delay for the memory to be accessed.
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0,s1,s7,s8,s9
    ADDRESS-103
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-103
      LABEL-SF_byte_read
  FORMATTED-OUTPUT s9, SF_addr_hi_port
  LOGFORMAT-OUTPUT s9, SF_addr_hi_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-SF_addr_hi_port
  OP2 VALUE-80
    COMMENT-;set 24-bit address
    ADDRESS-104
      LABEL-
  FORMATTED-OUTPUT s8, SF_addr_mi_port
  LOGFORMAT-OUTPUT s8, SF_addr_mi_port[40]
INSTRUCTION-OUTPUT
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-SF_addr_mi_port
  OP2 VALUE-40
    COMMENT-
    ADDRESS-105
      LABEL-
  FORMATTED-OUTPUT s7, SF_addr_lo_port
  LOGFORMAT-OUTPUT s7, SF_addr_lo_port[20]
INSTRUCTION-OUTPUT
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-SF_addr_lo_port
  OP2 VALUE-20
    COMMENT-
    ADDRESS-106
      LABEL-
  FORMATTED-LOAD s1, 05
  LOGFORMAT-LOAD s1, 05
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-05
  OP2 VALUE-05
    COMMENT-;set controls
    ADDRESS-107
      LABEL-
  FORMATTED-OUTPUT s1, SF_control_port
  LOGFORMAT-OUTPUT s1, SF_control_port[08]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-SF_control_port
  OP2 VALUE-08
    COMMENT-
    ADDRESS-108
      LABEL-
  FORMATTED-LOAD s1, 06
  LOGFORMAT-LOAD s1, 06
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-;>75ns delay
    ADDRESS-109
      LABEL-
  FORMATTED-LOAD s1, 06
  LOGFORMAT-LOAD s1, 06
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-;but do something useful!
    ADDRESS-10A
      LABEL-
  FORMATTED-INPUT s0, SF_data_in_port
  LOGFORMAT-INPUT s0, SF_data_in_port[02]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-SF_data_in_port
  OP2 VALUE-02
    COMMENT-;read data byte
    ADDRESS-10B
      LABEL-
  FORMATTED-OUTPUT s1, SF_control_port
  LOGFORMAT-OUTPUT s1, SF_control_port[08]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-SF_control_port
  OP2 VALUE-08
    COMMENT-;clear controls
    ADDRESS-10C
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Write data or command byte to StrataFlash Memory
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Register s1 should contain the byte to be written to the memory.
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; To write a byte, the address needs to be set up on the address lines
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; and the controls set as follows
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;    SF_read = 0 - enable Spartan data outputs and disable StrataFlash outputs (OE=1)
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      SF_ce = 0 - enable StrataFLASH memory
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;      SF_we = 0 - Write enable on
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The setup time of the memory is 60ns. This is equivalent to 3 clock cycles at
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; provides adequate delay for the memory.
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s1,s7,s8,s9
    ADDRESS-10D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-10D
      LABEL-SF_byte_write
  FORMATTED-OUTPUT s9, SF_addr_hi_port
  LOGFORMAT-OUTPUT s9, SF_addr_hi_port[80]
INSTRUCTION-OUTPUT
   OPERAND1-s9
  OP1 VALUE-s9
   OPERAND2-SF_addr_hi_port
  OP2 VALUE-80
    COMMENT-;set 24-bit address
    ADDRESS-10E
      LABEL-
  FORMATTED-OUTPUT s8, SF_addr_mi_port
  LOGFORMAT-OUTPUT s8, SF_addr_mi_port[40]
INSTRUCTION-OUTPUT
   OPERAND1-s8
  OP1 VALUE-s8
   OPERAND2-SF_addr_mi_port
  OP2 VALUE-40
    COMMENT-
    ADDRESS-10F
      LABEL-
  FORMATTED-OUTPUT s7, SF_addr_lo_port
  LOGFORMAT-OUTPUT s7, SF_addr_lo_port[20]
INSTRUCTION-OUTPUT
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-SF_addr_lo_port
  OP2 VALUE-20
    COMMENT-
    ADDRESS-110
      LABEL-
  FORMATTED-OUTPUT s1, SF_data_out_port
  LOGFORMAT-OUTPUT s1, SF_data_out_port[10]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-SF_data_out_port
  OP2 VALUE-10
    COMMENT-;set data byte to be written
    ADDRESS-111
      LABEL-
  FORMATTED-LOAD s1, 00
  LOGFORMAT-LOAD s1, 00
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;set controls
    ADDRESS-112
      LABEL-
  FORMATTED-OUTPUT s1, SF_control_port
  LOGFORMAT-OUTPUT s1, SF_control_port[08]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-SF_control_port
  OP2 VALUE-08
    COMMENT-
    ADDRESS-113
      LABEL-
  FORMATTED-LOAD s1, 06
  LOGFORMAT-LOAD s1, 06
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-;>60ns delay
    ADDRESS-114
      LABEL-
  FORMATTED-LOAD s1, 06
  LOGFORMAT-LOAD s1, 06
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-06
  OP2 VALUE-06
    COMMENT-;but do something useful!
    ADDRESS-115
      LABEL-
  FORMATTED-OUTPUT s1, SF_control_port
  LOGFORMAT-OUTPUT s1, SF_control_port[08]
INSTRUCTION-OUTPUT
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-SF_control_port
  OP2 VALUE-08
    COMMENT-;clear controls
    ADDRESS-116
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Set 'Read Array' mode on StrataFLASH
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The read array mode is the default mode of the memory and allows the contents
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; of the memory to be read based on the supplied address.
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Read array is the default mode of the device, but it must also be placed back
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; into this mode after programming, erasing or reading the status register.
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The read array command (FF hex) is written to the Strata flash memory.
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s1,s7,s8,s9
    ADDRESS-117
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-117
      LABEL-set_SF_read_array_mode
  FORMATTED-LOAD s1, FF
  LOGFORMAT-LOAD s1, FF
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-FF
  OP2 VALUE-FF
    COMMENT-;command to read array
    ADDRESS-118
      LABEL-
  FORMATTED-CALL SF_byte_write
  LOGFORMAT-CALL SF_byte_write[10D]
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
  OP1 VALUE-10D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-119
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Wait for StrataFLASH to be ready
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; This routine will typically be used after instigating a program or erase
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; command. It continuously reads the StrataFLASH status register and tests the
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; information provided by bit7 which indicates if the memory is busy(0) or ready(1).
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; The routine waits for the ready condition before sending a read array command
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; which puts the memory back to normal read mode.
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; During the polling process, a counter formed by register pair [sE,sD] records
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; approximately how long the memory is busy. This can be used to evaluate programming
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; and erase times if required. The timing loop is 15 instructions which is equivalent
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; to 30 clock cycles (600ns at 50MHz)
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-11A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-11A
      LABEL-wait_SF_ready
  FORMATTED-LOAD sE, 00
  LOGFORMAT-LOAD sE, 00
INSTRUCTION-LOAD
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;clear 16-bit counter timer
    ADDRESS-11B
      LABEL-
  FORMATTED-LOAD sD, 00
  LOGFORMAT-LOAD sD, 00
INSTRUCTION-LOAD
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-11C
      LABEL-wait_SF_loop
  FORMATTED-ADD sD, 01
  LOGFORMAT-ADD sD, 01
INSTRUCTION-ADD
   OPERAND1-sD
  OP1 VALUE-sD
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment counter timer
    ADDRESS-11D
      LABEL-
  FORMATTED-ADDCY sE, 00
  LOGFORMAT-ADDCY sE, 00
INSTRUCTION-ADDCY
   OPERAND1-sE
  OP1 VALUE-sE
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-11E
      LABEL-
  FORMATTED-CALL SF_byte_read
  LOGFORMAT-CALL SF_byte_read[103]
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
  OP1 VALUE-103
   OPERAND2-
  OP2 VALUE-
    COMMENT-;read status register into s0
    ADDRESS-11F
      LABEL-
  FORMATTED-TEST s0, 80
  LOGFORMAT-TEST s0, 80
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-80
  OP2 VALUE-80
    COMMENT-;test ready/busy flag
    ADDRESS-120
      LABEL-
  FORMATTED-JUMP Z, wait_SF_loop
  LOGFORMAT-JUMP Z, wait_SF_loop[11C]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-wait_SF_loop
  OP2 VALUE-11C
    COMMENT-
    ADDRESS-121
      LABEL-
  FORMATTED-CALL set_SF_read_array_mode
  LOGFORMAT-CALL set_SF_read_array_mode[117]
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
  OP1 VALUE-117
   OPERAND2-
  OP2 VALUE-
    COMMENT-;restore normal read array mode
    ADDRESS-122
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Send 16-bit value in register pair [sE,sD] to UART
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; In this program the register pair [sE,sD] indicates the programming time of the
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; StrataFLASH memory in 600ns increments. This routine can be used to display that
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; value if required.
    ADDRESS-123
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-123
      LABEL-send_counter_timer
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-124
      LABEL-
  FORMATTED-LOAD s0, sE
  LOGFORMAT-LOAD s0, sE
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-sE
  OP2 VALUE-sE
    COMMENT-
    ADDRESS-125
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-126
      LABEL-
  FORMATTED-LOAD s0, sD
  LOGFORMAT-LOAD s0, sD
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-sD
  OP2 VALUE-sD
    COMMENT-
    ADDRESS-127
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-128
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-129
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Software delay routines
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Delay of 1us.
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Constant value defines reflects the clock applied to KCPSM3. Every instruction
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;executes in 2 clock cycles making the calculation highly predictable. The '6' in
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0
    ADDRESS-12A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12A
      LABEL-delay_1us
  FORMATTED-LOAD s0, delay_1us_constant
  LOGFORMAT-LOAD s0, delay_1us_constant[0B]
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-delay_1us_constant
  OP2 VALUE-0B
    COMMENT-
    ADDRESS-12B
      LABEL-wait_1us
  FORMATTED-SUB s0, 01
  LOGFORMAT-SUB s0, 01
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-12C
      LABEL-
  FORMATTED-JUMP NZ, wait_1us
  LOGFORMAT-JUMP NZ, wait_1us[12B]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_1us
  OP2 VALUE-12B
    COMMENT-
    ADDRESS-12D
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-12E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Delay of 40us.
    ADDRESS-12E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1
    ADDRESS-12E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-12E
      LABEL-delay_40us
  FORMATTED-LOAD s1, 28
  LOGFORMAT-LOAD s1, 28
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-28
  OP2 VALUE-28
    COMMENT-;40 x 1us = 40us
    ADDRESS-12F
      LABEL-wait_40us
  FORMATTED-CALL delay_1us
  LOGFORMAT-CALL delay_1us[12A]
INSTRUCTION-CALL
   OPERAND1-delay_1us
  OP1 VALUE-12A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-130
      LABEL-
  FORMATTED-SUB s1, 01
  LOGFORMAT-SUB s1, 01
INSTRUCTION-SUB
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-131
      LABEL-
  FORMATTED-JUMP NZ, wait_40us
  LOGFORMAT-JUMP NZ, wait_40us[12F]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_40us
  OP2 VALUE-12F
    COMMENT-
    ADDRESS-132
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-133
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-133
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-133
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Delay of 1ms.
    ADDRESS-133
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-133
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1, s2
    ADDRESS-133
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-133
      LABEL-delay_1ms
  FORMATTED-LOAD s2, 19
  LOGFORMAT-LOAD s2, 19
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-19
  OP2 VALUE-19
    COMMENT-;25 x 40us = 1ms
    ADDRESS-134
      LABEL-wait_1ms
  FORMATTED-CALL delay_40us
  LOGFORMAT-CALL delay_40us[12E]
INSTRUCTION-CALL
   OPERAND1-delay_40us
  OP1 VALUE-12E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-135
      LABEL-
  FORMATTED-SUB s2, 01
  LOGFORMAT-SUB s2, 01
INSTRUCTION-SUB
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-136
      LABEL-
  FORMATTED-JUMP NZ, wait_1ms
  LOGFORMAT-JUMP NZ, wait_1ms[134]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_1ms
  OP2 VALUE-134
    COMMENT-
    ADDRESS-137
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-138
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-138
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Delay of 20ms.
    ADDRESS-138
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-138
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Delay of 20ms used during initialisation.
    ADDRESS-138
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-138
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1, s2, s3
    ADDRESS-138
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-138
      LABEL-delay_20ms
  FORMATTED-LOAD s3, 14
  LOGFORMAT-LOAD s3, 14
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-14
  OP2 VALUE-14
    COMMENT-;20 x 1ms = 20ms
    ADDRESS-139
      LABEL-wait_20ms
  FORMATTED-CALL delay_1ms
  LOGFORMAT-CALL delay_1ms[133]
INSTRUCTION-CALL
   OPERAND1-delay_1ms
  OP1 VALUE-133
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13A
      LABEL-
  FORMATTED-SUB s3, 01
  LOGFORMAT-SUB s3, 01
INSTRUCTION-SUB
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-13B
      LABEL-
  FORMATTED-JUMP NZ, wait_20ms
  LOGFORMAT-JUMP NZ, wait_20ms[139]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_20ms
  OP2 VALUE-139
    COMMENT-
    ADDRESS-13C
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-13D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Delay of approximately 1 second.
    ADDRESS-13D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-13D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1, s2, s3, s4
    ADDRESS-13D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-13D
      LABEL-delay_1s
  FORMATTED-LOAD s4, 14
  LOGFORMAT-LOAD s4, 14
INSTRUCTION-LOAD
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-14
  OP2 VALUE-14
    COMMENT-;50 x 20ms = 1000ms
    ADDRESS-13E
      LABEL-wait_1s
  FORMATTED-CALL delay_20ms
  LOGFORMAT-CALL delay_20ms[138]
INSTRUCTION-CALL
   OPERAND1-delay_20ms
  OP1 VALUE-138
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-13F
      LABEL-
  FORMATTED-SUB s4, 01
  LOGFORMAT-SUB s4, 01
INSTRUCTION-SUB
   OPERAND1-s4
  OP1 VALUE-s4
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-140
      LABEL-
  FORMATTED-JUMP NZ, wait_1s
  LOGFORMAT-JUMP NZ, wait_1s[13E]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-wait_1s
  OP2 VALUE-13E
    COMMENT-
    ADDRESS-141
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;UART communication routines
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Read one character from the UART
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Character read will be returned in a register called 'UART_data'.
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The routine first tests the receiver FIFO buffer to see if data is present.
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;If the FIFO is empty, the routine waits until there is a character to read.
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;As this could take any amount of time the wait loop could include a call to a
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;subroutine which performs a useful function.
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;If the received character is an XOFF, then the routine will then wait
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;for an XON to be received. This means that the rest of the program is held
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;in suspense and therefore it can not transmit. Once an XON is received, it will
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;again wait for a normal character before returning.
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;NOTE: Characters between the XOFF and XON will be ignored in this version of the
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;program!!!
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Interrupt is disabled during this routine to prevent a false situation. If the
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;receiver half-full flag went High it should result in an interrupt transmitting
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;an XOFF character. However, if this routine were able to read the receiver buffer
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;at just about the same as the hardware detects the half-full flag, then it could
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;think that an XON needs to be transmitted.
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0 and UART_data
    ADDRESS-142
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-142
      LABEL-read_from_UART
  FORMATTED-DISABLE INTERRUPT
  LOGFORMAT-DISABLE INTERRUPT
INSTRUCTION-DISABLE
   OPERAND1-INTERRUPT
  OP1 VALUE-INTERRUPT
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-143
      LABEL-wait_Rx_character
  FORMATTED-INPUT s0, status_port
  LOGFORMAT-INPUT s0, status_port[00]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-status_port
  OP2 VALUE-00
    COMMENT-;test Rx_FIFO buffer
    ADDRESS-144
      LABEL-
  FORMATTED-TEST s0, rx_data_present
  LOGFORMAT-TEST s0, rx_data_present[08]
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-rx_data_present
  OP2 VALUE-08
    COMMENT-
    ADDRESS-145
      LABEL-
  FORMATTED-JUMP NZ, read_character
  LOGFORMAT-JUMP NZ, read_character[147]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-read_character
  OP2 VALUE-147
    COMMENT-
    ADDRESS-146
      LABEL-
  FORMATTED-JUMP wait_Rx_character
  LOGFORMAT-JUMP wait_Rx_character[143]
INSTRUCTION-JUMP
   OPERAND1-wait_Rx_character
  OP1 VALUE-143
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-147
      LABEL-read_character
  FORMATTED-INPUT UART_data, UART_read_port
  LOGFORMAT-INPUT UART_data[sF], UART_read_port[01]
INSTRUCTION-INPUT
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-UART_read_port
  OP2 VALUE-01
    COMMENT-;read from FIFO
    ADDRESS-148
      LABEL-
  FORMATTED-COMPARE UART_data, character_XOFF
  LOGFORMAT-COMPARE UART_data[sF], character_XOFF[13]
INSTRUCTION-COMPARE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_XOFF
  OP2 VALUE-13
    COMMENT-;test for XOFF
    ADDRESS-149
      LABEL-
  FORMATTED-JUMP Z, wait_XON
  LOGFORMAT-JUMP Z, wait_XON[14C]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-wait_XON
  OP2 VALUE-14C
    COMMENT-
    ADDRESS-14A
      LABEL-
  FORMATTED-ENABLE INTERRUPT
  LOGFORMAT-ENABLE INTERRUPT
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
  OP1 VALUE-INTERRUPT
   OPERAND2-
  OP2 VALUE-
    COMMENT-;normal finish
    ADDRESS-14B
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-14C
      LABEL-wait_XON
  FORMATTED-INPUT s0, status_port
  LOGFORMAT-INPUT s0, status_port[00]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-status_port
  OP2 VALUE-00
    COMMENT-;test Rx_FIFO buffer
    ADDRESS-14D
      LABEL-
  FORMATTED-TEST s0, rx_data_present
  LOGFORMAT-TEST s0, rx_data_present[08]
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-rx_data_present
  OP2 VALUE-08
    COMMENT-
    ADDRESS-14E
      LABEL-
  FORMATTED-JUMP NZ, read_XON
  LOGFORMAT-JUMP NZ, read_XON[150]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-read_XON
  OP2 VALUE-150
    COMMENT-
    ADDRESS-14F
      LABEL-
  FORMATTED-JUMP wait_XON
  LOGFORMAT-JUMP wait_XON[14C]
INSTRUCTION-JUMP
   OPERAND1-wait_XON
  OP1 VALUE-14C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-150
      LABEL-read_XON
  FORMATTED-INPUT UART_data, UART_read_port
  LOGFORMAT-INPUT UART_data[sF], UART_read_port[01]
INSTRUCTION-INPUT
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-UART_read_port
  OP2 VALUE-01
    COMMENT-;read from FIFO
    ADDRESS-151
      LABEL-
  FORMATTED-COMPARE UART_data, character_XON
  LOGFORMAT-COMPARE UART_data[sF], character_XON[11]
INSTRUCTION-COMPARE
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_XON
  OP2 VALUE-11
    COMMENT-;test for XON
    ADDRESS-152
      LABEL-
  FORMATTED-JUMP Z, wait_Rx_character
  LOGFORMAT-JUMP Z, wait_Rx_character[143]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-wait_Rx_character
  OP2 VALUE-143
    COMMENT-;now wait for normal character
    ADDRESS-153
      LABEL-
  FORMATTED-JUMP wait_XON
  LOGFORMAT-JUMP wait_XON[14C]
INSTRUCTION-JUMP
   OPERAND1-wait_XON
  OP1 VALUE-14C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;continue to wait for XON
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Transmit one character to the UART
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Character supplied in register called 'UART_data'.
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The routine first tests the transmit FIFO buffer is empty.
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;If the FIFO currently has any data, the routine waits until it is empty.
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Ultimately this means that only one character is sent at a time which
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;could be important if the PC at the other end of the link transmits
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;an XOFF and needs the flow of data to terminate as soon as possible.
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0
    ADDRESS-154
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-154
      LABEL-send_to_UART
  FORMATTED-INPUT s0, status_port
  LOGFORMAT-INPUT s0, status_port[00]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-status_port
  OP2 VALUE-00
    COMMENT-;test Tx_FIFO buffer
    ADDRESS-155
      LABEL-
  FORMATTED-TEST s0, tx_data_present
  LOGFORMAT-TEST s0, tx_data_present[01]
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-tx_data_present
  OP2 VALUE-01
    COMMENT-
    ADDRESS-156
      LABEL-
  FORMATTED-JUMP Z, UART_write
  LOGFORMAT-JUMP Z, UART_write[158]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-UART_write
  OP2 VALUE-158
    COMMENT-
    ADDRESS-157
      LABEL-
  FORMATTED-JUMP send_to_UART
  LOGFORMAT-JUMP send_to_UART[154]
INSTRUCTION-JUMP
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-158
      LABEL-UART_write
  FORMATTED-OUTPUT UART_data, UART_write_port
  LOGFORMAT-OUTPUT UART_data[sF], UART_write_port[04]
INSTRUCTION-OUTPUT
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-UART_write_port
  OP2 VALUE-04
    COMMENT-
    ADDRESS-159
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Useful ASCII conversion and handling routines
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Convert value provided in register s0 into ASCII characters
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The value provided must in the range 0 to 99 and will be converted into
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;two ASCII characters.
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     The number of 'tens' will be represented by an ASCII character returned in register s1.
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     The number of 'units' will be represented by an ASCII character returned in register s0.
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex added to
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;the actual decimal value.
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0 and s1.
    ADDRESS-15A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-15A
      LABEL-decimal_to_ASCII
  FORMATTED-LOAD s1, 30
  LOGFORMAT-LOAD s1, 30
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-30
  OP2 VALUE-30
    COMMENT-;load 'tens' counter with ASCII for '0'
    ADDRESS-15B
      LABEL-test_for_ten
  FORMATTED-ADD s1, 01
  LOGFORMAT-ADD s1, 01
INSTRUCTION-ADD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;increment 'tens' value
    ADDRESS-15C
      LABEL-
  FORMATTED-SUB s0, 0A
  LOGFORMAT-SUB s0, 0A
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-;try to subtract 10 from the supplied value
    ADDRESS-15D
      LABEL-
  FORMATTED-JUMP NC, test_for_ten
  LOGFORMAT-JUMP NC, test_for_ten[15B]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-test_for_ten
  OP2 VALUE-15B
    COMMENT-;repeat if subtraction was possible without underflow.
    ADDRESS-15E
      LABEL-
  FORMATTED-SUB s1, 01
  LOGFORMAT-SUB s1, 01
INSTRUCTION-SUB
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;'tens' value one less ten due to underflow
    ADDRESS-15F
      LABEL-
  FORMATTED-ADD s0, 3A
  LOGFORMAT-ADD s0, 3A
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-3A
  OP2 VALUE-3A
    COMMENT-;restore units value (the remainder) and convert to ASCII
    ADDRESS-160
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Convert character to upper case
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The character supplied in register s0.
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;If the character is in the range 'a' to 'z', it is converted
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;to the equivalent upper case character in the range 'A' to 'Z'.
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;All other characters remain unchanged.
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0.
    ADDRESS-161
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-161
      LABEL-upper_case
  FORMATTED-COMPARE s0, 61
  LOGFORMAT-COMPARE s0, 61
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-61
  OP2 VALUE-61
    COMMENT-;eliminate character codes below 'a' (61 hex)
    ADDRESS-162
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-163
      LABEL-
  FORMATTED-COMPARE s0, 7B
  LOGFORMAT-COMPARE s0, 7B
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-7B
  OP2 VALUE-7B
    COMMENT-;eliminate character codes above 'z' (7A hex)
    ADDRESS-164
      LABEL-
  FORMATTED-RETURN NC
  LOGFORMAT-RETURN NC
INSTRUCTION-RETURN
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-165
      LABEL-
  FORMATTED-AND s0, DF
  LOGFORMAT-AND s0, DF
INSTRUCTION-AND
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-DF
  OP2 VALUE-DF
    COMMENT-;mask bit5 to convert to upper case
    ADDRESS-166
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Convert character '0' to '9' to numerical value in range 0 to 9
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The character supplied in register s0. If the character is in the
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;range '0' to '9', it is converted to the equivalent decimal value.
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Characters not in the range '0' to '9' are signified by the return
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;with the CARRY flag set.
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0.
    ADDRESS-167
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-167
      LABEL-1char_to_value
  FORMATTED-ADD s0, C6
  LOGFORMAT-ADD s0, C6
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-C6
  OP2 VALUE-C6
    COMMENT-;reject character codes above '9' (39 hex)
    ADDRESS-168
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;carry flag is set
    ADDRESS-169
      LABEL-
  FORMATTED-SUB s0, F6
  LOGFORMAT-SUB s0, F6
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-F6
  OP2 VALUE-F6
    COMMENT-;reject character codes below '0' (30 hex)
    ADDRESS-16A
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;carry is set if value not in range
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Determine the numerical value of a two character decimal string held in
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;scratch pad memory such the result is in the range 0 to 99 (00 to 63 hex).
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The string must be stored in two consecutive memory locations and the
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;location of the first (tens) character supplied in the s1 register.
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The result is provided in register s2. Strings not using characters in the
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;range '0' to '9' are signified by the return with the CARRY flag set.
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1 and s2.
    ADDRESS-16B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-16B
      LABEL-2char_to_value
  FORMATTED-FETCH s0, (s1)
  LOGFORMAT-FETCH s0, (s1)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(s1)
  OP2 VALUE-(s1)
    COMMENT-;read 'tens' character
    ADDRESS-16C
      LABEL-
  FORMATTED-CALL 1char_to_value
  LOGFORMAT-CALL 1char_to_value[167]
INSTRUCTION-CALL
   OPERAND1-1char_to_value
  OP1 VALUE-167
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to numerical value
    ADDRESS-16D
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;bad character - CARRY set
    ADDRESS-16E
      LABEL-
  FORMATTED-LOAD s2, s0
  LOGFORMAT-LOAD s2, s0
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-16F
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-;multiply 'tens' value by 10 (0A hex)
    ADDRESS-170
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-171
      LABEL-
  FORMATTED-ADD s2, s0
  LOGFORMAT-ADD s2, s0
INSTRUCTION-ADD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-172
      LABEL-
  FORMATTED-SL0 s2
  LOGFORMAT-SL0 s2
INSTRUCTION-SL0
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-173
      LABEL-
  FORMATTED-ADD s1, 01
  LOGFORMAT-ADD s1, 01
INSTRUCTION-ADD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-;read 'units' character
    ADDRESS-174
      LABEL-
  FORMATTED-FETCH s0, (s1)
  LOGFORMAT-FETCH s0, (s1)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(s1)
  OP2 VALUE-(s1)
    COMMENT-
    ADDRESS-175
      LABEL-
  FORMATTED-CALL 1char_to_value
  LOGFORMAT-CALL 1char_to_value[167]
INSTRUCTION-CALL
   OPERAND1-1char_to_value
  OP1 VALUE-167
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to numerical value
    ADDRESS-176
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;bad character - CARRY set
    ADDRESS-177
      LABEL-
  FORMATTED-ADD s2, s0
  LOGFORMAT-ADD s2, s0
INSTRUCTION-ADD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;add units to result and clear CARRY flag
    ADDRESS-178
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Convert hexadecimal value provided in register s0 into ASCII characters
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The value provided must can be any value in the range 00 to FF and will be converted into
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;two ASCII characters.
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     The upper nibble will be represented by an ASCII character returned in register s2.
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     The lower nibble will be represented by an ASCII character returned in register s1.
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;hexadecimal requiring a further addition of 07 to the 30 already added.
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1 and s2.
    ADDRESS-179
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-179
      LABEL-hex_byte_to_ASCII
  FORMATTED-LOAD s1, s0
  LOGFORMAT-LOAD s1, s0
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;remember value supplied
    ADDRESS-17A
      LABEL-
  FORMATTED-SR0 s0
  LOGFORMAT-SR0 s0
INSTRUCTION-SR0
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-
  OP2 VALUE-
    COMMENT-;isolate upper nibble
    ADDRESS-17B
      LABEL-
  FORMATTED-SR0 s0
  LOGFORMAT-SR0 s0
INSTRUCTION-SR0
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-17C
      LABEL-
  FORMATTED-SR0 s0
  LOGFORMAT-SR0 s0
INSTRUCTION-SR0
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-17D
      LABEL-
  FORMATTED-SR0 s0
  LOGFORMAT-SR0 s0
INSTRUCTION-SR0
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-17E
      LABEL-
  FORMATTED-CALL hex_to_ASCII
  LOGFORMAT-CALL hex_to_ASCII[185]
INSTRUCTION-CALL
   OPERAND1-hex_to_ASCII
  OP1 VALUE-185
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert
    ADDRESS-17F
      LABEL-
  FORMATTED-LOAD s2, s0
  LOGFORMAT-LOAD s2, s0
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;upper nibble value in s2
    ADDRESS-180
      LABEL-
  FORMATTED-LOAD s0, s1
  LOGFORMAT-LOAD s0, s1
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s1
  OP2 VALUE-s1
    COMMENT-;restore complete value
    ADDRESS-181
      LABEL-
  FORMATTED-AND s0, 0F
  LOGFORMAT-AND s0, 0F
INSTRUCTION-AND
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-0F
  OP2 VALUE-0F
    COMMENT-;isolate lower nibble
    ADDRESS-182
      LABEL-
  FORMATTED-CALL hex_to_ASCII
  LOGFORMAT-CALL hex_to_ASCII[185]
INSTRUCTION-CALL
   OPERAND1-hex_to_ASCII
  OP1 VALUE-185
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert
    ADDRESS-183
      LABEL-
  FORMATTED-LOAD s1, s0
  LOGFORMAT-LOAD s1, s0
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;lower nibble value in s1
    ADDRESS-184
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-185
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-185
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Convert hexadecimal value provided in register s0 into ASCII character
    ADDRESS-185
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-185
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Register used s0
    ADDRESS-185
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-185
      LABEL-hex_to_ASCII
  FORMATTED-SUB s0, 0A
  LOGFORMAT-SUB s0, 0A
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-;test if value is in range 0 to 9
    ADDRESS-186
      LABEL-
  FORMATTED-JUMP C, number_char
  LOGFORMAT-JUMP C, number_char[188]
INSTRUCTION-JUMP
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-number_char
  OP2 VALUE-188
    COMMENT-
    ADDRESS-187
      LABEL-
  FORMATTED-ADD s0, 07
  LOGFORMAT-ADD s0, 07
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-07
  OP2 VALUE-07
    COMMENT-;ASCII char A to F in range 41 to 46
    ADDRESS-188
      LABEL-number_char
  FORMATTED-ADD s0, 3A
  LOGFORMAT-ADD s0, 3A
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-3A
  OP2 VALUE-3A
    COMMENT-;ASCII char 0 to 9 in range 30 to 40
    ADDRESS-189
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-18A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-18A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-18A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send the two character HEX value of the register contents 's0' to the UART
    ADDRESS-18A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-18A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1, s2
    ADDRESS-18A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-18A
      LABEL-send_hex_byte
  FORMATTED-CALL hex_byte_to_ASCII
  LOGFORMAT-CALL hex_byte_to_ASCII[179]
INSTRUCTION-CALL
   OPERAND1-hex_byte_to_ASCII
  OP1 VALUE-179
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-18B
      LABEL-
  FORMATTED-LOAD UART_data, s2
  LOGFORMAT-LOAD UART_data[sF], s2
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-s2
  OP2 VALUE-s2
    COMMENT-
    ADDRESS-18C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-18D
      LABEL-
  FORMATTED-LOAD UART_data, s1
  LOGFORMAT-LOAD UART_data[sF], s1
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-s1
  OP2 VALUE-s1
    COMMENT-
    ADDRESS-18E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-18F
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-190
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-190
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-190
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-190
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send the six character HEX value of the register contents [s9,s8,s7] to the UART
    ADDRESS-190
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-190
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s1, s2
    ADDRESS-190
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-190
      LABEL-send_hex_3bytes
  FORMATTED-LOAD s0, s9
  LOGFORMAT-LOAD s0, s9
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s9
  OP2 VALUE-s9
    COMMENT-
    ADDRESS-191
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-192
      LABEL-
  FORMATTED-LOAD s0, s8
  LOGFORMAT-LOAD s0, s8
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s8
  OP2 VALUE-s8
    COMMENT-
    ADDRESS-193
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-194
      LABEL-
  FORMATTED-LOAD s0, s7
  LOGFORMAT-LOAD s0, s7
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s7
  OP2 VALUE-s7
    COMMENT-
    ADDRESS-195
      LABEL-
  FORMATTED-CALL send_hex_byte
  LOGFORMAT-CALL send_hex_byte[18A]
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
  OP1 VALUE-18A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-196
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Convert the HEX ASCII characters contained in 's3' and 's2' into
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;an equivalent hexadecimal value in register 's0'.
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     The upper nibble is represented by an ASCII character in register s3.
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;     The lower nibble is represented by an ASCII character in register s2.
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Input characters must be in the range 00 to FF hexadecimal or the CARRY flag
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;will be set on return.
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Registers used s0, s2 and s3.
    ADDRESS-197
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-197
      LABEL-ASCII_byte_to_hex
  FORMATTED-LOAD s0, s3
  LOGFORMAT-LOAD s0, s3
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s3
  OP2 VALUE-s3
    COMMENT-;Take upper nibble
    ADDRESS-198
      LABEL-
  FORMATTED-CALL ASCII_to_hex
  LOGFORMAT-CALL ASCII_to_hex[1A4]
INSTRUCTION-CALL
   OPERAND1-ASCII_to_hex
  OP1 VALUE-1A4
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to value
    ADDRESS-199
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;reject if out of range
    ADDRESS-19A
      LABEL-
  FORMATTED-LOAD s3, s0
  LOGFORMAT-LOAD s3, s0
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-;remember value
    ADDRESS-19B
      LABEL-
  FORMATTED-SL0 s3
  LOGFORMAT-SL0 s3
INSTRUCTION-SL0
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-
  OP2 VALUE-
    COMMENT-;multiply value by 16 to put in upper nibble
    ADDRESS-19C
      LABEL-
  FORMATTED-SL0 s3
  LOGFORMAT-SL0 s3
INSTRUCTION-SL0
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-19D
      LABEL-
  FORMATTED-SL0 s3
  LOGFORMAT-SL0 s3
INSTRUCTION-SL0
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-19E
      LABEL-
  FORMATTED-SL0 s3
  LOGFORMAT-SL0 s3
INSTRUCTION-SL0
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-19F
      LABEL-
  FORMATTED-LOAD s0, s2
  LOGFORMAT-LOAD s0, s2
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s2
  OP2 VALUE-s2
    COMMENT-;Take lower nibble
    ADDRESS-1A0
      LABEL-
  FORMATTED-CALL ASCII_to_hex
  LOGFORMAT-CALL ASCII_to_hex[1A4]
INSTRUCTION-CALL
   OPERAND1-ASCII_to_hex
  OP1 VALUE-1A4
   OPERAND2-
  OP2 VALUE-
    COMMENT-;convert to value
    ADDRESS-1A1
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;reject if out of range
    ADDRESS-1A2
      LABEL-
  FORMATTED-OR s0, s3
  LOGFORMAT-OR s0, s3
INSTRUCTION-OR
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-s3
  OP2 VALUE-s3
    COMMENT-;merge in the upper nibble with CARRY reset
    ADDRESS-1A3
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1A4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1A4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1A4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Routine to convert ASCII data in 's0' to an equivalent HEX value.
    ADDRESS-1A4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1A4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;If character is not valid for hex, then CARRY is set on return.
    ADDRESS-1A4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1A4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Register used s0
    ADDRESS-1A4
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1A4
      LABEL-ASCII_to_hex
  FORMATTED-ADD s0, B9
  LOGFORMAT-ADD s0, B9
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-B9
  OP2 VALUE-B9
    COMMENT-;test for above ASCII code 46 ('F')
    ADDRESS-1A5
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1A6
      LABEL-
  FORMATTED-SUB s0, E9
  LOGFORMAT-SUB s0, E9
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-E9
  OP2 VALUE-E9
    COMMENT-;normalise 0 to 9 with A-F in 11 to 16 hex
    ADDRESS-1A7
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-;reject below ASCII code 30 ('0')
    ADDRESS-1A8
      LABEL-
  FORMATTED-SUB s0, 11
  LOGFORMAT-SUB s0, 11
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-11
  OP2 VALUE-11
    COMMENT-;isolate A-F down to 00 to 05 hex
    ADDRESS-1A9
      LABEL-
  FORMATTED-JUMP NC, ASCII_letter
  LOGFORMAT-JUMP NC, ASCII_letter[1AE]
INSTRUCTION-JUMP
   OPERAND1-NC
  OP1 VALUE-NC
   OPERAND2-ASCII_letter
  OP2 VALUE-1AE
    COMMENT-
    ADDRESS-1AA
      LABEL-
  FORMATTED-ADD s0, 07
  LOGFORMAT-ADD s0, 07
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-07
  OP2 VALUE-07
    COMMENT-;test for above ASCII code 46 ('F')
    ADDRESS-1AB
      LABEL-
  FORMATTED-RETURN C
  LOGFORMAT-RETURN C
INSTRUCTION-RETURN
   OPERAND1-C
  OP1 VALUE-C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1AC
      LABEL-
  FORMATTED-SUB s0, F6
  LOGFORMAT-SUB s0, F6
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-F6
  OP2 VALUE-F6
    COMMENT-;convert to range 00 to 09
    ADDRESS-1AD
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1AE
      LABEL-ASCII_letter
  FORMATTED-ADD s0, 0A
  LOGFORMAT-ADD s0, 0A
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-;convert to range 0A to 0F
    ADDRESS-1AF
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1B0
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B0
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B0
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Read two hex characters from UART and convert to single byte data
    ADDRESS-1B0
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B0
      LABEL-obtain_8bits
  FORMATTED-CALL read_upper_case
  LOGFORMAT-CALL read_upper_case[024]
INSTRUCTION-CALL
   OPERAND1-read_upper_case
  OP1 VALUE-024
   OPERAND2-
  OP2 VALUE-
    COMMENT-;obtain one byte from UART
    ADDRESS-1B1
      LABEL-
  FORMATTED-LOAD s3, s0
  LOGFORMAT-LOAD s3, s0
INSTRUCTION-LOAD
   OPERAND1-s3
  OP1 VALUE-s3
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-1B2
      LABEL-
  FORMATTED-CALL read_upper_case
  LOGFORMAT-CALL read_upper_case[024]
INSTRUCTION-CALL
   OPERAND1-read_upper_case
  OP1 VALUE-024
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1B3
      LABEL-
  FORMATTED-LOAD s2, s0
  LOGFORMAT-LOAD s2, s0
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-1B4
      LABEL-
  FORMATTED-CALL ASCII_byte_to_hex
  LOGFORMAT-CALL ASCII_byte_to_hex[197]
INSTRUCTION-CALL
   OPERAND1-ASCII_byte_to_hex
  OP1 VALUE-197
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1B5
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1B6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-1B6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Text messages
    ADDRESS-1B6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-1B6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send Carriage Return to the UART
    ADDRESS-1B6
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B6
      LABEL-send_CR
  FORMATTED-LOAD UART_data, character_CR
  LOGFORMAT-LOAD UART_data[sF], character_CR[0D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_CR
  OP2 VALUE-0D
    COMMENT-
    ADDRESS-1B7
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1B8
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1B9
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B9
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send a space to the UART
    ADDRESS-1B9
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1B9
      LABEL-send_space
  FORMATTED-LOAD UART_data, character_space
  LOGFORMAT-LOAD UART_data[sF], character_space[20]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_space
  OP2 VALUE-20
    COMMENT-
    ADDRESS-1BA
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1BB
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1BC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1BC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1BC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'PicoBlaze NOR FLASH Programmer' string to the UART
    ADDRESS-1BC
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-1BC
      LABEL-send_welcome
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1BD
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1BE
      LABEL-
  FORMATTED-LOAD UART_data, character_P
  LOGFORMAT-LOAD UART_data[sF], character_P[50]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_P
  OP2 VALUE-50
    COMMENT-
    ADDRESS-1BF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1C0
      LABEL-
  FORMATTED-LOAD UART_data, character_i
  LOGFORMAT-LOAD UART_data[sF], character_i[69]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_i
  OP2 VALUE-69
    COMMENT-
    ADDRESS-1C1
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1C2
      LABEL-
  FORMATTED-LOAD UART_data, character_c
  LOGFORMAT-LOAD UART_data[sF], character_c[63]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_c
  OP2 VALUE-63
    COMMENT-
    ADDRESS-1C3
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1C4
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-1C5
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1C6
      LABEL-
  FORMATTED-LOAD UART_data, character_B
  LOGFORMAT-LOAD UART_data[sF], character_B[42]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_B
  OP2 VALUE-42
    COMMENT-
    ADDRESS-1C7
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1C8
      LABEL-
  FORMATTED-LOAD UART_data, character_l
  LOGFORMAT-LOAD UART_data[sF], character_l[6C]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_l
  OP2 VALUE-6C
    COMMENT-
    ADDRESS-1C9
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1CA
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-1CB
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1CC
      LABEL-
  FORMATTED-LOAD UART_data, character_z
  LOGFORMAT-LOAD UART_data[sF], character_z[7A]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_z
  OP2 VALUE-7A
    COMMENT-
    ADDRESS-1CD
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1CE
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-1CF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1D0
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1D1
      LABEL-
  FORMATTED-LOAD UART_data, character_N
  LOGFORMAT-LOAD UART_data[sF], character_N[4E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_N
  OP2 VALUE-4E
    COMMENT-
    ADDRESS-1D2
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1D3
      LABEL-
  FORMATTED-LOAD UART_data, character_O
  LOGFORMAT-LOAD UART_data[sF], character_O[4F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_O
  OP2 VALUE-4F
    COMMENT-
    ADDRESS-1D4
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1D5
      LABEL-
  FORMATTED-LOAD UART_data, character_R
  LOGFORMAT-LOAD UART_data[sF], character_R[52]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_R
  OP2 VALUE-52
    COMMENT-
    ADDRESS-1D6
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1D7
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1D8
      LABEL-
  FORMATTED-LOAD UART_data, character_F
  LOGFORMAT-LOAD UART_data[sF], character_F[46]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_F
  OP2 VALUE-46
    COMMENT-
    ADDRESS-1D9
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1DA
      LABEL-
  FORMATTED-LOAD UART_data, character_L
  LOGFORMAT-LOAD UART_data[sF], character_L[4C]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_L
  OP2 VALUE-4C
    COMMENT-
    ADDRESS-1DB
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1DC
      LABEL-
  FORMATTED-LOAD UART_data, character_A
  LOGFORMAT-LOAD UART_data[sF], character_A[41]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_A
  OP2 VALUE-41
    COMMENT-
    ADDRESS-1DD
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1DE
      LABEL-
  FORMATTED-LOAD UART_data, character_S
  LOGFORMAT-LOAD UART_data[sF], character_S[53]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_S
  OP2 VALUE-53
    COMMENT-
    ADDRESS-1DF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1E0
      LABEL-
  FORMATTED-LOAD UART_data, character_H
  LOGFORMAT-LOAD UART_data[sF], character_H[48]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_H
  OP2 VALUE-48
    COMMENT-
    ADDRESS-1E1
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1E2
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1E3
      LABEL-
  FORMATTED-LOAD UART_data, character_P
  LOGFORMAT-LOAD UART_data[sF], character_P[50]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_P
  OP2 VALUE-50
    COMMENT-
    ADDRESS-1E4
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1E5
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-1E6
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1E7
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-1E8
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1E9
      LABEL-
  FORMATTED-LOAD UART_data, character_g
  LOGFORMAT-LOAD UART_data[sF], character_g[67]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_g
  OP2 VALUE-67
    COMMENT-
    ADDRESS-1EA
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1EB
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-1EC
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1ED
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-1EE
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1EF
      LABEL-
  FORMATTED-LOAD UART_data, character_m
  LOGFORMAT-LOAD UART_data[sF], character_m[6D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_m
  OP2 VALUE-6D
    COMMENT-
    ADDRESS-1F0
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1F1
      LABEL-
  FORMATTED-LOAD UART_data, character_m
  LOGFORMAT-LOAD UART_data[sF], character_m[6D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_m
  OP2 VALUE-6D
    COMMENT-
    ADDRESS-1F2
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1F3
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-1F4
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1F5
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-1F6
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1F7
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1F8
      LABEL-
  FORMATTED-LOAD UART_data, character_v
  LOGFORMAT-LOAD UART_data[sF], character_v[76]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_v
  OP2 VALUE-76
    COMMENT-
    ADDRESS-1F9
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1FA
      LABEL-
  FORMATTED-LOAD UART_data, character_1
  LOGFORMAT-LOAD UART_data[sF], character_1[31]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_1
  OP2 VALUE-31
    COMMENT-
    ADDRESS-1FB
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1FC
      LABEL-
  FORMATTED-LOAD UART_data, character_fullstop
  LOGFORMAT-LOAD UART_data[sF], character_fullstop[2E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_fullstop
  OP2 VALUE-2E
    COMMENT-
    ADDRESS-1FD
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-1FE
      LABEL-
  FORMATTED-LOAD UART_data, character_0
  LOGFORMAT-LOAD UART_data[sF], character_0[30]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_0
  OP2 VALUE-30
    COMMENT-
    ADDRESS-1FF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-200
      LABEL-
  FORMATTED-LOAD UART_data, character_0
  LOGFORMAT-LOAD UART_data[sF], character_0[30]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_0
  OP2 VALUE-30
    COMMENT-
    ADDRESS-201
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-202
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-203
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-204
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-205
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-205
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-205
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-205
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'Waiting_MCS_file' string to the UART
    ADDRESS-205
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-205
      LABEL-send_Waiting_MCS_file
  FORMATTED-LOAD UART_data, character_W
  LOGFORMAT-LOAD UART_data[sF], character_W[57]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_W
  OP2 VALUE-57
    COMMENT-
    ADDRESS-206
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-207
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-208
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-209
      LABEL-
  FORMATTED-LOAD UART_data, character_i
  LOGFORMAT-LOAD UART_data[sF], character_i[69]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_i
  OP2 VALUE-69
    COMMENT-
    ADDRESS-20A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-20B
      LABEL-
  FORMATTED-LOAD UART_data, character_t
  LOGFORMAT-LOAD UART_data[sF], character_t[74]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_t
  OP2 VALUE-74
    COMMENT-
    ADDRESS-20C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-20D
      LABEL-
  FORMATTED-LOAD UART_data, character_i
  LOGFORMAT-LOAD UART_data[sF], character_i[69]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_i
  OP2 VALUE-69
    COMMENT-
    ADDRESS-20E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-20F
      LABEL-
  FORMATTED-LOAD UART_data, character_n
  LOGFORMAT-LOAD UART_data[sF], character_n[6E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_n
  OP2 VALUE-6E
    COMMENT-
    ADDRESS-210
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-211
      LABEL-
  FORMATTED-LOAD UART_data, character_g
  LOGFORMAT-LOAD UART_data[sF], character_g[67]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_g
  OP2 VALUE-67
    COMMENT-
    ADDRESS-212
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-213
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-214
      LABEL-
  FORMATTED-LOAD UART_data, character_f
  LOGFORMAT-LOAD UART_data[sF], character_f[66]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_f
  OP2 VALUE-66
    COMMENT-
    ADDRESS-215
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-216
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-217
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-218
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-219
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-21A
      LABEL-send_MCS_file
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-21B
      LABEL-
  FORMATTED-LOAD UART_data, character_M
  LOGFORMAT-LOAD UART_data[sF], character_M[4D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_M
  OP2 VALUE-4D
    COMMENT-
    ADDRESS-21C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-21D
      LABEL-
  FORMATTED-LOAD UART_data, character_C
  LOGFORMAT-LOAD UART_data[sF], character_C[43]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_C
  OP2 VALUE-43
    COMMENT-
    ADDRESS-21E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-21F
      LABEL-
  FORMATTED-LOAD UART_data, character_S
  LOGFORMAT-LOAD UART_data[sF], character_S[53]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_S
  OP2 VALUE-53
    COMMENT-
    ADDRESS-220
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-221
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-222
      LABEL-
  FORMATTED-LOAD UART_data, character_F
  LOGFORMAT-LOAD UART_data[sF], character_F[46]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_F
  OP2 VALUE-46
    COMMENT-
    ADDRESS-223
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-224
      LABEL-
  FORMATTED-LOAD UART_data, character_i
  LOGFORMAT-LOAD UART_data[sF], character_i[69]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_i
  OP2 VALUE-69
    COMMENT-
    ADDRESS-225
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-226
      LABEL-
  FORMATTED-LOAD UART_data, character_l
  LOGFORMAT-LOAD UART_data[sF], character_l[6C]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_l
  OP2 VALUE-6C
    COMMENT-
    ADDRESS-227
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-228
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-229
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-22A
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-22B
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-22C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-22C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-22C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'Erase in progress' string to the UART
    ADDRESS-22C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-22C
      LABEL-send_Erase_in_progress
  FORMATTED-CALL send_Erase
  LOGFORMAT-CALL send_Erase[243]
INSTRUCTION-CALL
   OPERAND1-send_Erase
  OP1 VALUE-243
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-22D
      LABEL-
  FORMATTED-LOAD UART_data, character_i
  LOGFORMAT-LOAD UART_data[sF], character_i[69]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_i
  OP2 VALUE-69
    COMMENT-
    ADDRESS-22E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-22F
      LABEL-
  FORMATTED-LOAD UART_data, character_n
  LOGFORMAT-LOAD UART_data[sF], character_n[6E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_n
  OP2 VALUE-6E
    COMMENT-
    ADDRESS-230
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-231
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-232
      LABEL-
  FORMATTED-LOAD UART_data, character_P
  LOGFORMAT-LOAD UART_data[sF], character_P[50]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_P
  OP2 VALUE-50
    COMMENT-
    ADDRESS-233
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-234
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-235
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-236
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-237
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-238
      LABEL-
  FORMATTED-LOAD UART_data, character_g
  LOGFORMAT-LOAD UART_data[sF], character_g[67]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_g
  OP2 VALUE-67
    COMMENT-
    ADDRESS-239
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-23A
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-23B
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-23C
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-23D
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-23E
      LABEL-
  FORMATTED-LOAD UART_data, character_s
  LOGFORMAT-LOAD UART_data[sF], character_s[73]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_s
  OP2 VALUE-73
    COMMENT-
    ADDRESS-23F
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-240
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-241
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-242
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-243
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-243
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-243
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'Erase ' string to the UART
    ADDRESS-243
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-243
      LABEL-send_Erase
  FORMATTED-LOAD UART_data, character_E
  LOGFORMAT-LOAD UART_data[sF], character_E[45]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_E
  OP2 VALUE-45
    COMMENT-
    ADDRESS-244
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-245
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-246
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-247
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-248
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-249
      LABEL-
  FORMATTED-LOAD UART_data, character_s
  LOGFORMAT-LOAD UART_data[sF], character_s[73]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_s
  OP2 VALUE-73
    COMMENT-
    ADDRESS-24A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-24B
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-24C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-24D
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-24E
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-24F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-24F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-24F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send carriage return, 'OK' and carriage return to the UART
    ADDRESS-24F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-24F
      LABEL-send_OK
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-250
      LABEL-
  FORMATTED-LOAD UART_data, character_O
  LOGFORMAT-LOAD UART_data[sF], character_O[4F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_O
  OP2 VALUE-4F
    COMMENT-
    ADDRESS-251
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-252
      LABEL-
  FORMATTED-LOAD UART_data, character_K
  LOGFORMAT-LOAD UART_data[sF], character_K[4B]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_K
  OP2 VALUE-4B
    COMMENT-
    ADDRESS-253
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-254
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-255
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-256
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-256
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-256
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-256
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send menu to the UART
    ADDRESS-256
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-256
      LABEL-send_Menu
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-257
      LABEL-
  FORMATTED-LOAD UART_data, character_E
  LOGFORMAT-LOAD UART_data[sF], character_E[45]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_E
  OP2 VALUE-45
    COMMENT-
    ADDRESS-258
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-259
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-25A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-25B
      LABEL-
  FORMATTED-CALL send_Erase
  LOGFORMAT-CALL send_Erase[243]
INSTRUCTION-CALL
   OPERAND1-send_Erase
  OP1 VALUE-243
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-25C
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-25D
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-25E
      LABEL-
  FORMATTED-LOAD UART_data, character_l
  LOGFORMAT-LOAD UART_data[sF], character_l[6C]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_l
  OP2 VALUE-6C
    COMMENT-
    ADDRESS-25F
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-260
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-261
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-262
      LABEL-
  FORMATTED-LOAD UART_data, character_B
  LOGFORMAT-LOAD UART_data[sF], character_B[42]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_B
  OP2 VALUE-42
    COMMENT-
    ADDRESS-263
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-264
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-265
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-266
      LABEL-
  FORMATTED-CALL send_Erase
  LOGFORMAT-CALL send_Erase[243]
INSTRUCTION-CALL
   OPERAND1-send_Erase
  OP1 VALUE-243
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-267
      LABEL-
  FORMATTED-LOAD UART_data, character_b
  LOGFORMAT-LOAD UART_data[sF], character_b[62]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_b
  OP2 VALUE-62
    COMMENT-
    ADDRESS-268
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-269
      LABEL-
  FORMATTED-LOAD UART_data, character_l
  LOGFORMAT-LOAD UART_data[sF], character_l[6C]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_l
  OP2 VALUE-6C
    COMMENT-
    ADDRESS-26A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-26B
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-26C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-26D
      LABEL-
  FORMATTED-LOAD UART_data, character_c
  LOGFORMAT-LOAD UART_data[sF], character_c[63]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_c
  OP2 VALUE-63
    COMMENT-
    ADDRESS-26E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-26F
      LABEL-
  FORMATTED-LOAD UART_data, character_k
  LOGFORMAT-LOAD UART_data[sF], character_k[6B]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_k
  OP2 VALUE-6B
    COMMENT-
    ADDRESS-270
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-271
      LABEL-
  FORMATTED-LOAD UART_data, character_s
  LOGFORMAT-LOAD UART_data[sF], character_s[73]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_s
  OP2 VALUE-73
    COMMENT-
    ADDRESS-272
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-273
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-274
      LABEL-
  FORMATTED-LOAD UART_data, character_1
  LOGFORMAT-LOAD UART_data[sF], character_1[31]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_1
  OP2 VALUE-31
    COMMENT-
    ADDRESS-275
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-276
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-277
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-278
      LABEL-
  FORMATTED-LOAD UART_data, character_3
  LOGFORMAT-LOAD UART_data[sF], character_3[33]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_3
  OP2 VALUE-33
    COMMENT-
    ADDRESS-279
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-27A
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-27B
      LABEL-
  FORMATTED-LOAD UART_data, character_P
  LOGFORMAT-LOAD UART_data[sF], character_P[50]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_P
  OP2 VALUE-50
    COMMENT-
    ADDRESS-27C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-27D
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-27E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-27F
      LABEL-
  FORMATTED-LOAD UART_data, character_P
  LOGFORMAT-LOAD UART_data[sF], character_P[50]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_P
  OP2 VALUE-50
    COMMENT-
    ADDRESS-280
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-281
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-282
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-283
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-284
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-285
      LABEL-
  FORMATTED-LOAD UART_data, character_g
  LOGFORMAT-LOAD UART_data[sF], character_g[67]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_g
  OP2 VALUE-67
    COMMENT-
    ADDRESS-286
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-287
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-288
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-289
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-28A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-28B
      LABEL-
  FORMATTED-LOAD UART_data, character_m
  LOGFORMAT-LOAD UART_data[sF], character_m[6D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_m
  OP2 VALUE-6D
    COMMENT-
    ADDRESS-28C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-28D
      LABEL-
  FORMATTED-CALL send_MCS_file
  LOGFORMAT-CALL send_MCS_file[21A]
INSTRUCTION-CALL
   OPERAND1-send_MCS_file
  OP1 VALUE-21A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-28E
      LABEL-
  FORMATTED-LOAD UART_data, character_W
  LOGFORMAT-LOAD UART_data[sF], character_W[57]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_W
  OP2 VALUE-57
    COMMENT-
    ADDRESS-28F
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-290
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-291
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-292
      LABEL-
  FORMATTED-LOAD UART_data, character_W
  LOGFORMAT-LOAD UART_data[sF], character_W[57]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_W
  OP2 VALUE-57
    COMMENT-
    ADDRESS-293
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-294
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-295
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-296
      LABEL-
  FORMATTED-LOAD UART_data, character_i
  LOGFORMAT-LOAD UART_data[sF], character_i[69]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_i
  OP2 VALUE-69
    COMMENT-
    ADDRESS-297
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-298
      LABEL-
  FORMATTED-LOAD UART_data, character_t
  LOGFORMAT-LOAD UART_data[sF], character_t[74]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_t
  OP2 VALUE-74
    COMMENT-
    ADDRESS-299
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-29A
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-29B
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-29C
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-29D
      LABEL-
  FORMATTED-CALL send_byte
  LOGFORMAT-CALL send_byte[2EE]
INSTRUCTION-CALL
   OPERAND1-send_byte
  OP1 VALUE-2EE
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-29E
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-29F
      LABEL-
  FORMATTED-LOAD UART_data, character_R
  LOGFORMAT-LOAD UART_data[sF], character_R[52]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_R
  OP2 VALUE-52
    COMMENT-
    ADDRESS-2A0
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2A1
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-2A2
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2A3
      LABEL-
  FORMATTED-LOAD UART_data, character_R
  LOGFORMAT-LOAD UART_data[sF], character_R[52]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_R
  OP2 VALUE-52
    COMMENT-
    ADDRESS-2A4
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2A5
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-2A6
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2A7
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-2A8
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2A9
      LABEL-
  FORMATTED-LOAD UART_data, character_d
  LOGFORMAT-LOAD UART_data[sF], character_d[64]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_d
  OP2 VALUE-64
    COMMENT-
    ADDRESS-2AA
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2AB
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2AC
      LABEL-
  FORMATTED-LOAD UART_data, character_2
  LOGFORMAT-LOAD UART_data[sF], character_2[32]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_2
  OP2 VALUE-32
    COMMENT-
    ADDRESS-2AD
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2AE
      LABEL-
  FORMATTED-LOAD UART_data, character_5
  LOGFORMAT-LOAD UART_data[sF], character_5[35]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_5
  OP2 VALUE-35
    COMMENT-
    ADDRESS-2AF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2B0
      LABEL-
  FORMATTED-LOAD UART_data, character_6
  LOGFORMAT-LOAD UART_data[sF], character_6[36]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_6
  OP2 VALUE-36
    COMMENT-
    ADDRESS-2B1
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2B2
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2B3
      LABEL-
  FORMATTED-CALL send_byte
  LOGFORMAT-CALL send_byte[2EE]
INSTRUCTION-CALL
   OPERAND1-send_byte
  OP1 VALUE-2EE
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2B4
      LABEL-
  FORMATTED-LOAD UART_data, character_s
  LOGFORMAT-LOAD UART_data[sF], character_s[73]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_s
  OP2 VALUE-73
    COMMENT-
    ADDRESS-2B5
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2B6
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2B7
      LABEL-
  FORMATTED-LOAD UART_data, character_I
  LOGFORMAT-LOAD UART_data[sF], character_I[49]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_I
  OP2 VALUE-49
    COMMENT-
    ADDRESS-2B8
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2B9
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-2BA
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2BB
      LABEL-
  FORMATTED-LOAD UART_data, character_D
  LOGFORMAT-LOAD UART_data[sF], character_D[44]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_D
  OP2 VALUE-44
    COMMENT-
    ADDRESS-2BC
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2BD
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-2BE
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2BF
      LABEL-
  FORMATTED-LOAD UART_data, character_v
  LOGFORMAT-LOAD UART_data[sF], character_v[76]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_v
  OP2 VALUE-76
    COMMENT-
    ADDRESS-2C0
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2C1
      LABEL-
  FORMATTED-LOAD UART_data, character_i
  LOGFORMAT-LOAD UART_data[sF], character_i[69]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_i
  OP2 VALUE-69
    COMMENT-
    ADDRESS-2C2
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2C3
      LABEL-
  FORMATTED-LOAD UART_data, character_c
  LOGFORMAT-LOAD UART_data[sF], character_c[63]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_c
  OP2 VALUE-63
    COMMENT-
    ADDRESS-2C4
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2C5
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-2C6
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2C7
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2C8
      LABEL-
  FORMATTED-CALL send_ID
  LOGFORMAT-CALL send_ID[2E9]
INSTRUCTION-CALL
   OPERAND1-send_ID
  OP1 VALUE-2E9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2C9
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2CA
      LABEL-
  FORMATTED-LOAD UART_data, character_H
  LOGFORMAT-LOAD UART_data[sF], character_H[48]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_H
  OP2 VALUE-48
    COMMENT-
    ADDRESS-2CB
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2CC
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-2CD
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2CE
      LABEL-
  FORMATTED-LOAD UART_data, character_H
  LOGFORMAT-LOAD UART_data[sF], character_H[48]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_H
  OP2 VALUE-48
    COMMENT-
    ADDRESS-2CF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2D0
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-2D1
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2D2
      LABEL-
  FORMATTED-LOAD UART_data, character_l
  LOGFORMAT-LOAD UART_data[sF], character_l[6C]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_l
  OP2 VALUE-6C
    COMMENT-
    ADDRESS-2D3
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2D4
      LABEL-
  FORMATTED-LOAD UART_data, character_p
  LOGFORMAT-LOAD UART_data[sF], character_p[70]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_p
  OP2 VALUE-70
    COMMENT-
    ADDRESS-2D5
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2D6
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2D7
      LABEL-
  FORMATTED-LOAD UART_data, character_S
  LOGFORMAT-LOAD UART_data[sF], character_S[53]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_S
  OP2 VALUE-53
    COMMENT-
    ADDRESS-2D8
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2D9
      LABEL-
  FORMATTED-LOAD UART_data, character_minus
  LOGFORMAT-LOAD UART_data[sF], character_minus[2D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_minus
  OP2 VALUE-2D
    COMMENT-
    ADDRESS-2DA
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2DB
      LABEL-
  FORMATTED-LOAD UART_data, character_S
  LOGFORMAT-LOAD UART_data[sF], character_S[53]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_S
  OP2 VALUE-53
    COMMENT-
    ADDRESS-2DC
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2DD
      LABEL-
  FORMATTED-LOAD UART_data, character_t
  LOGFORMAT-LOAD UART_data[sF], character_t[74]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_t
  OP2 VALUE-74
    COMMENT-
    ADDRESS-2DE
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2DF
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-2E0
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2E1
      LABEL-
  FORMATTED-LOAD UART_data, character_t
  LOGFORMAT-LOAD UART_data[sF], character_t[74]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_t
  OP2 VALUE-74
    COMMENT-
    ADDRESS-2E2
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2E3
      LABEL-
  FORMATTED-LOAD UART_data, character_u
  LOGFORMAT-LOAD UART_data[sF], character_u[75]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_u
  OP2 VALUE-75
    COMMENT-
    ADDRESS-2E4
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2E5
      LABEL-
  FORMATTED-LOAD UART_data, character_s
  LOGFORMAT-LOAD UART_data[sF], character_s[73]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_s
  OP2 VALUE-73
    COMMENT-
    ADDRESS-2E6
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2E7
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2E8
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2E9
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2E9
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2E9
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'ID' to the UART
    ADDRESS-2E9
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2E9
      LABEL-send_ID
  FORMATTED-LOAD UART_data, character_I
  LOGFORMAT-LOAD UART_data[sF], character_I[49]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_I
  OP2 VALUE-49
    COMMENT-
    ADDRESS-2EA
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2EB
      LABEL-
  FORMATTED-LOAD UART_data, character_D
  LOGFORMAT-LOAD UART_data[sF], character_D[44]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_D
  OP2 VALUE-44
    COMMENT-
    ADDRESS-2EC
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2ED
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2EE
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2EE
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2EE
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'byte' to the UART
    ADDRESS-2EE
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2EE
      LABEL-send_byte
  FORMATTED-LOAD UART_data, character_b
  LOGFORMAT-LOAD UART_data[sF], character_b[62]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_b
  OP2 VALUE-62
    COMMENT-
    ADDRESS-2EF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2F0
      LABEL-
  FORMATTED-LOAD UART_data, character_y
  LOGFORMAT-LOAD UART_data[sF], character_y[79]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_y
  OP2 VALUE-79
    COMMENT-
    ADDRESS-2F1
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2F2
      LABEL-
  FORMATTED-LOAD UART_data, character_t
  LOGFORMAT-LOAD UART_data[sF], character_t[74]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_t
  OP2 VALUE-74
    COMMENT-
    ADDRESS-2F3
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2F4
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-2F5
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2F6
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'Confirm Erase (Y/n) ' to the UART
    ADDRESS-2F7
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-2F7
      LABEL-send_Confirm
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2F8
      LABEL-
  FORMATTED-LOAD UART_data, character_C
  LOGFORMAT-LOAD UART_data[sF], character_C[43]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_C
  OP2 VALUE-43
    COMMENT-
    ADDRESS-2F9
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2FA
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-2FB
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2FC
      LABEL-
  FORMATTED-LOAD UART_data, character_n
  LOGFORMAT-LOAD UART_data[sF], character_n[6E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_n
  OP2 VALUE-6E
    COMMENT-
    ADDRESS-2FD
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-2FE
      LABEL-
  FORMATTED-LOAD UART_data, character_f
  LOGFORMAT-LOAD UART_data[sF], character_f[66]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_f
  OP2 VALUE-66
    COMMENT-
    ADDRESS-2FF
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-300
      LABEL-
  FORMATTED-LOAD UART_data, character_i
  LOGFORMAT-LOAD UART_data[sF], character_i[69]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_i
  OP2 VALUE-69
    COMMENT-
    ADDRESS-301
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-302
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-303
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-304
      LABEL-
  FORMATTED-LOAD UART_data, character_m
  LOGFORMAT-LOAD UART_data[sF], character_m[6D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_m
  OP2 VALUE-6D
    COMMENT-
    ADDRESS-305
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-306
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-307
      LABEL-
  FORMATTED-CALL send_Erase
  LOGFORMAT-CALL send_Erase[243]
INSTRUCTION-CALL
   OPERAND1-send_Erase
  OP1 VALUE-243
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-308
      LABEL-
  FORMATTED-LOAD UART_data, character_open
  LOGFORMAT-LOAD UART_data[sF], character_open[28]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_open
  OP2 VALUE-28
    COMMENT-
    ADDRESS-309
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-30A
      LABEL-
  FORMATTED-LOAD UART_data, character_Y
  LOGFORMAT-LOAD UART_data[sF], character_Y[59]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_Y
  OP2 VALUE-59
    COMMENT-
    ADDRESS-30B
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-30C
      LABEL-
  FORMATTED-LOAD UART_data, character_divide
  LOGFORMAT-LOAD UART_data[sF], character_divide[2F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_divide
  OP2 VALUE-2F
    COMMENT-
    ADDRESS-30D
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-30E
      LABEL-
  FORMATTED-LOAD UART_data, character_n
  LOGFORMAT-LOAD UART_data[sF], character_n[6E]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_n
  OP2 VALUE-6E
    COMMENT-
    ADDRESS-30F
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-310
      LABEL-
  FORMATTED-LOAD UART_data, character_close
  LOGFORMAT-LOAD UART_data[sF], character_close[29]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_close
  OP2 VALUE-29
    COMMENT-
    ADDRESS-311
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-312
      LABEL-
  FORMATTED-CALL send_space
  LOGFORMAT-CALL send_space[1B9]
INSTRUCTION-CALL
   OPERAND1-send_space
  OP1 VALUE-1B9
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-313
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-314
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-314
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-314
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'Abort' to the UART
    ADDRESS-314
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-314
      LABEL-send_Abort
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-315
      LABEL-
  FORMATTED-LOAD UART_data, character_A
  LOGFORMAT-LOAD UART_data[sF], character_A[41]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_A
  OP2 VALUE-41
    COMMENT-
    ADDRESS-316
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-317
      LABEL-
  FORMATTED-LOAD UART_data, character_b
  LOGFORMAT-LOAD UART_data[sF], character_b[62]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_b
  OP2 VALUE-62
    COMMENT-
    ADDRESS-318
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-319
      LABEL-
  FORMATTED-LOAD UART_data, character_o
  LOGFORMAT-LOAD UART_data[sF], character_o[6F]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_o
  OP2 VALUE-6F
    COMMENT-
    ADDRESS-31A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-31B
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-31C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-31D
      LABEL-
  FORMATTED-LOAD UART_data, character_t
  LOGFORMAT-LOAD UART_data[sF], character_t[74]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_t
  OP2 VALUE-74
    COMMENT-
    ADDRESS-31E
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-31F
      LABEL-
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-320
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-321
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-321
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'address=' to the UART
    ADDRESS-321
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-321
      LABEL-send_address
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-322
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-323
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-324
      LABEL-
  FORMATTED-LOAD UART_data, character_d
  LOGFORMAT-LOAD UART_data[sF], character_d[64]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_d
  OP2 VALUE-64
    COMMENT-
    ADDRESS-325
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-326
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-327
      LABEL-
  FORMATTED-LOAD UART_data, character_r
  LOGFORMAT-LOAD UART_data[sF], character_r[72]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_r
  OP2 VALUE-72
    COMMENT-
    ADDRESS-328
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-329
      LABEL-
  FORMATTED-LOAD UART_data, character_e
  LOGFORMAT-LOAD UART_data[sF], character_e[65]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_e
  OP2 VALUE-65
    COMMENT-
    ADDRESS-32A
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-32B
      LABEL-
  FORMATTED-LOAD UART_data, character_s
  LOGFORMAT-LOAD UART_data[sF], character_s[73]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_s
  OP2 VALUE-73
    COMMENT-
    ADDRESS-32C
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-32D
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-32E
      LABEL-send_equals
  FORMATTED-LOAD UART_data, character_equals
  LOGFORMAT-LOAD UART_data[sF], character_equals[3D]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_equals
  OP2 VALUE-3D
    COMMENT-
    ADDRESS-32F
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-330
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-331
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-331
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-331
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Send 'data=' to the UART
    ADDRESS-331
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-331
      LABEL-send_data
  FORMATTED-CALL send_CR
  LOGFORMAT-CALL send_CR[1B6]
INSTRUCTION-CALL
   OPERAND1-send_CR
  OP1 VALUE-1B6
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-332
      LABEL-
  FORMATTED-LOAD UART_data, character_d
  LOGFORMAT-LOAD UART_data[sF], character_d[64]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_d
  OP2 VALUE-64
    COMMENT-
    ADDRESS-333
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-334
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-335
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-336
      LABEL-
  FORMATTED-LOAD UART_data, character_t
  LOGFORMAT-LOAD UART_data[sF], character_t[74]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_t
  OP2 VALUE-74
    COMMENT-
    ADDRESS-337
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-338
      LABEL-
  FORMATTED-LOAD UART_data, character_a
  LOGFORMAT-LOAD UART_data[sF], character_a[61]
INSTRUCTION-LOAD
   OPERAND1-UART_data
  OP1 VALUE-sF
   OPERAND2-character_a
  OP2 VALUE-61
    COMMENT-
    ADDRESS-339
      LABEL-
  FORMATTED-CALL send_to_UART
  LOGFORMAT-CALL send_to_UART[154]
INSTRUCTION-CALL
   OPERAND1-send_to_UART
  OP1 VALUE-154
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-33A
      LABEL-
  FORMATTED-JUMP send_equals
  LOGFORMAT-JUMP send_equals[32E]
INSTRUCTION-JUMP
   OPERAND1-send_equals
  OP1 VALUE-32E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Interrupt Service Routine (ISR)
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;An interrupt occurs whenever the status of the UART receiver FIFO 'half_full' flag
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;changes.
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;A change from Low to High means that the buffer is becoming full and therefore
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;an XOFF character must be transmitted.
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;A change from High to Low means that the buffer is starting to empty and therefore
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;an XON character can be transmitted to restart the flow of new characters.
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-33B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3F5
      LABEL-
  FORMATTED-ADDRESS 3F5
  LOGFORMAT-ADDRESS 3F5
INSTRUCTION-ADDRESS
   OPERAND1-3F5
  OP1 VALUE-3F5
   OPERAND2-
  OP2 VALUE-
    COMMENT-;place at end of memory to keep separate
    ADDRESS-3F5
      LABEL-ISR
  FORMATTED-STORE s0, ISR_preserve_s0
  LOGFORMAT-STORE s0, ISR_preserve_s0[00]
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-ISR_preserve_s0
  OP2 VALUE-00
    COMMENT-;preserve register contents
    ADDRESS-3F6
      LABEL-
  FORMATTED-INPUT s0, status_port
  LOGFORMAT-INPUT s0, status_port[00]
INSTRUCTION-INPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-status_port
  OP2 VALUE-00
    COMMENT-;test 'half_full' status of receiver buffer.
    ADDRESS-3F7
      LABEL-
  FORMATTED-TEST s0, rx_half_full
  LOGFORMAT-TEST s0, rx_half_full[10]
INSTRUCTION-TEST
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-rx_half_full
  OP2 VALUE-10
    COMMENT-
    ADDRESS-3F8
      LABEL-
  FORMATTED-JUMP Z, isr_send_xon
  LOGFORMAT-JUMP Z, isr_send_xon[3FB]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-isr_send_xon
  OP2 VALUE-3FB
    COMMENT-
    ADDRESS-3F9
      LABEL-
  FORMATTED-LOAD s0, character_XOFF
  LOGFORMAT-LOAD s0, character_XOFF[13]
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_XOFF
  OP2 VALUE-13
    COMMENT-
    ADDRESS-3FA
      LABEL-
  FORMATTED-JUMP isr_send_character
  LOGFORMAT-JUMP isr_send_character[3FC]
INSTRUCTION-JUMP
   OPERAND1-isr_send_character
  OP1 VALUE-3FC
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-3FB
      LABEL-isr_send_xon
  FORMATTED-LOAD s0, character_XON
  LOGFORMAT-LOAD s0, character_XON[11]
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-character_XON
  OP2 VALUE-11
    COMMENT-
    ADDRESS-3FC
      LABEL-isr_send_character
  FORMATTED-OUTPUT s0, UART_write_port
  LOGFORMAT-OUTPUT s0, UART_write_port[04]
INSTRUCTION-OUTPUT
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-UART_write_port
  OP2 VALUE-04
    COMMENT-
    ADDRESS-3FD
      LABEL-
  FORMATTED-FETCH s0, ISR_preserve_s0
  LOGFORMAT-FETCH s0, ISR_preserve_s0[00]
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-ISR_preserve_s0
  OP2 VALUE-00
    COMMENT-;restore register contents
    ADDRESS-3FE
      LABEL-
  FORMATTED-RETURNI ENABLE
  LOGFORMAT-RETURNI ENABLE
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
  OP1 VALUE-ENABLE
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;Interrupt Vector
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;**************************************************************************************
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
  FORMATTED-ADDRESS 3FF
  LOGFORMAT-ADDRESS 3FF
INSTRUCTION-ADDRESS
   OPERAND1-3FF
  OP1 VALUE-3FF
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-3FF
      LABEL-
  FORMATTED-JUMP ISR
  LOGFORMAT-JUMP ISR[3F5]
INSTRUCTION-JUMP
   OPERAND1-ISR
  OP1 VALUE-3F5
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;
