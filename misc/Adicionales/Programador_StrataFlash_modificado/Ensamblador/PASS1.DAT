      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;KCPSM3 Program - UART programming of StrataFLASH memory on the Spartan-3E Starter Kit.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;MODIFICADO POR JORGE MÁRQUEZ EN LA LÍNEA 578
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Ken Chapman - Xilinx Ltd
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Version v1.00 - 28th March 2006
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This program uses a 115200 baud UART connection with XON/XOFF flow control
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;to allow a standard MCS file for the configuration of a Spartan-3E device to
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;be programmed into the Intel StrataFLASH device on the board.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Port definitions
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-status_port
   OPERAND2-00
    COMMENT-;UART and filter status input
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-tx_data_present
   OPERAND2-01
    COMMENT-;  Transmitter  data present - bit0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-tx_half_full
   OPERAND2-02
    COMMENT-;    FIFO          half full - bit1
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-tx_full
   OPERAND2-04
    COMMENT-;                       full - bit2
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-rx_data_present
   OPERAND2-08
    COMMENT-;               data present - bit3
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-rx_half_full
   OPERAND2-10
    COMMENT-;  Receiver        half full - bit4
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-rx_full
   OPERAND2-20
    COMMENT-;    FIFO               full - bit5
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-spare1
   OPERAND2-40
    COMMENT-;                  spare '0' - bit6
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_STS
   OPERAND2-80
    COMMENT-;            StrataFLASH STS - bit7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-UART_read_port
   OPERAND2-01
    COMMENT-;UART Rx data input
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-UART_write_port
   OPERAND2-04
    COMMENT-;UART Tx data output
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_data_in_port
   OPERAND2-02
    COMMENT-;Read data from StrataFLASH device
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_data_out_port
   OPERAND2-10
    COMMENT-;Data to write into StrataFLASH device
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_hi_port
   OPERAND2-80
    COMMENT-;StrataFLASH address[23:16]
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_mi_port
   OPERAND2-40
    COMMENT-;StrataFLASH address[15:8]
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_lo_port
   OPERAND2-20
    COMMENT-;StrataFLASH address[7:0]
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_control_port
   OPERAND2-08
    COMMENT-;StrataFLASH control
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_read
   OPERAND2-01
    COMMENT-;         active High read - bit0
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_ce
   OPERAND2-02
    COMMENT-; active Low device enable - bit1
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_we
   OPERAND2-04
    COMMENT-;         active Low write - bit2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Special Register usage
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-NAMEREG
   OPERAND1-sF
   OPERAND2-UART_data
    COMMENT-;used to pass data to and from the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Useful data constants
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Constant to define a software delay of 1us. This must be adjusted to reflect the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;calculation highly predictable. The '6' in the following equation even allows for
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;'CALL delay_1us' instruction in the initiating code.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;For clock rates below 10MHz the value of 1 must be used and the operation will
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;become lower than intended.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-delay_1us_constant
   OPERAND2-0B
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;ASCII table
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_a
   OPERAND2-61
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_b
   OPERAND2-62
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_c
   OPERAND2-63
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_d
   OPERAND2-64
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_e
   OPERAND2-65
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_f
   OPERAND2-66
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_g
   OPERAND2-67
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_h
   OPERAND2-68
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_i
   OPERAND2-69
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_j
   OPERAND2-6A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_k
   OPERAND2-6B
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_l
   OPERAND2-6C
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_m
   OPERAND2-6D
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_n
   OPERAND2-6E
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_o
   OPERAND2-6F
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_p
   OPERAND2-70
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_q
   OPERAND2-71
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_r
   OPERAND2-72
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_s
   OPERAND2-73
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_t
   OPERAND2-74
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_u
   OPERAND2-75
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_v
   OPERAND2-76
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_w
   OPERAND2-77
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_x
   OPERAND2-78
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_y
   OPERAND2-79
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_z
   OPERAND2-7A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_A
   OPERAND2-41
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_B
   OPERAND2-42
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_C
   OPERAND2-43
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_D
   OPERAND2-44
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_E
   OPERAND2-45
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_F
   OPERAND2-46
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_G
   OPERAND2-47
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_H
   OPERAND2-48
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_I
   OPERAND2-49
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_J
   OPERAND2-4A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_K
   OPERAND2-4B
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_L
   OPERAND2-4C
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_M
   OPERAND2-4D
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_N
   OPERAND2-4E
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_O
   OPERAND2-4F
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_P
   OPERAND2-50
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Q
   OPERAND2-51
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_R
   OPERAND2-52
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_S
   OPERAND2-53
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_T
   OPERAND2-54
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_U
   OPERAND2-55
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_V
   OPERAND2-56
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_W
   OPERAND2-57
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_X
   OPERAND2-58
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Y
   OPERAND2-59
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Z
   OPERAND2-5A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_0
   OPERAND2-30
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_1
   OPERAND2-31
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_2
   OPERAND2-32
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_3
   OPERAND2-33
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_4
   OPERAND2-34
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_5
   OPERAND2-35
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_6
   OPERAND2-36
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_7
   OPERAND2-37
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_8
   OPERAND2-38
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_9
   OPERAND2-39
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_colon
   OPERAND2-3A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_fullstop
   OPERAND2-2E
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_semi_colon
   OPERAND2-3B
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_minus
   OPERAND2-2D
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_plus
   OPERAND2-2B
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_comma
   OPERAND2-2C
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_less_than
   OPERAND2-3C
    COMMENT-;'<'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_greater_than
   OPERAND2-3E
    COMMENT-;'>'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_open
   OPERAND2-28
    COMMENT-;'('
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_close
   OPERAND2-29
    COMMENT-;')'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_divide
   OPERAND2-2F
    COMMENT-;'/'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_equals
   OPERAND2-3D
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_space
   OPERAND2-20
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_CR
   OPERAND2-0D
    COMMENT-;carriage return
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_LF
   OPERAND2-0A
    COMMENT-;line feed
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_question
   OPERAND2-3F
    COMMENT-;'?'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_dollar
   OPERAND2-24
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_exclaim
   OPERAND2-21
    COMMENT-;'!'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_BS
   OPERAND2-08
    COMMENT-;Back Space command character
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_XON
   OPERAND2-11
    COMMENT-;Flow control ON
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_XOFF
   OPERAND2-13
    COMMENT-;Flow control OFF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Scratch Pad Memory Locations
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s0
   OPERAND2-00
    COMMENT-;preserve register during ISR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Store up to one line of an MCS file as bytes
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A typical data line consists of:-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;:     Start character which is not stored
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;10    Number of data bytes included (16 in this case)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;aaaa  Lower 16-bits of the storage address
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;00    Record type (data in this case)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;dddd...   Data bytes (typically 16 which is the maximum)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;cc    Checksum
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CR/LF Line will end in carriage return and/or line feed which is not stored.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;So a total of 21 bytes could be stored before processing.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This is located at the end of scratch pad memory.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-line_start
   OPERAND2-2B
    COMMENT-;21 bytes until end of memory
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-data_start
   OPERAND2-2F
    COMMENT-;Start of data field if present
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Initialise the system and welcome message
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-cold_start
INSTRUCTION-CALL
   OPERAND1-SF_init
   OPERAND2-
    COMMENT-;initialise StrataFLASH controls
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1s
   OPERAND2-
    COMMENT-;delay because UART is fast and JTAG startup sequence can be slow
      LABEL-
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-;Interrupt is used for XON/XOFF flow control
      LABEL-welcome_start
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_welcome
   OPERAND2-
    COMMENT-;start up message and version number
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Main menu and command selection
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-warm_start
INSTRUCTION-CALL
   OPERAND1-send_Menu
   OPERAND2-
    COMMENT-;Menu and command selection
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-prompt
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_greater_than
    COMMENT-;prompt for input
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_upper_case
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_E
    COMMENT-;test for commands and execute as required
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-erase_command
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_B
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-block_erase_command
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_P
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-program_command
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_W
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-write_command
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_R
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-read_command
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_A
    COMMENT-;Comando mio
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-arch_command
    COMMENT-;Comando mio
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_I
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-SF_information
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_H
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-welcome_start
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_S
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-SF_status
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;no valid command input
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_question
    COMMENT-;display ???
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-;Try again!
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-read_upper_case
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read command character from UART
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-;echo character
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-UART_data
    COMMENT-;convert to upper case
      LABEL-
INSTRUCTION-CALL
   OPERAND1-upper_case
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Initialise the StrataFlash Memory control signals.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SF_read = 0   - Output enable off
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SF_ce = 1     - Deselect StrataFLASH memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SF_we = 1     - Write enable off
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Register used s0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-SF_init
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-06
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SF_control_port
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Erase Command - Perform bulk erase of the StrataFLASH memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; This routine executes the block erase command 128 times with a different base
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; address in each case.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Note that this could take as long as 8 minutes 30 seconds
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; and even typical times will be approximately 2 minutes.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s1,s7,s8,s9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-erase_command
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-FE
    COMMENT-;define base address of block 127 = FE0000
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-blocks_erase
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Block Erase Command - Performs erase of lowest 3 blocks of StrataFLASH memory which
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; covers the address range 000000 to 05FFFF in which the configuration for an XC3S500E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; would be able to fit (000000 to 045470).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; This routine executes the block erase command 3 times with a different base
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; address in each case.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Each block is 128K bytes and therefore has an address range of 000000 to 01FFFF.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; So each block is separated by 020000 hex.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-block_erase_command
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-04
    COMMENT-;define base address of block 3 = 040000
      LABEL-blocks_erase
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Confirm
   OPERAND2-
    COMMENT-;confirm command with a 'Y' which must be upper case
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read command character from UART
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-;echo input
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_Y
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-abort_erase
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Erase_in_progress
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-00
    COMMENT-;define lower address of each block = xx0000
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
      LABEL-blocks_erase_loop
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_fullstop
    COMMENT-;progress dots
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_erase_block
   OPERAND2-
    COMMENT-;erase block
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s9
   OPERAND2-02
    COMMENT-;decrement base address by 1 block
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-blocks_erase_loop
    COMMENT-;repeat until block 0 is erased
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-abort_erase
INSTRUCTION-CALL
   OPERAND1-send_Abort
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Erase a single 128K Byte block of the StrataFlash Memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit address of the block should be supplied in register set [s9,s8,s7].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To erase a block the address must be set and then the block erase command (20 hex)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; written to the memory followed by the write confirm command (D0 hex).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The act of erasing a block may take up to 1 second to complete. This routine
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; waits for the memory to be ready before restoring the normal read array mode and
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; returning.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s1,s7,s8,s9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-SF_erase_block
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-20
    COMMENT-;block erase command
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-D0
    COMMENT-;write confirm command
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
   OPERAND2-
    COMMENT-;wait for erase to complete
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Program Command - Program StrataFLASH memory with data defined in an MCS file
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-program_command
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Waiting_MCS_file
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-program_MCS
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Program StrataFLASH memory with data defined in an MCS file
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Reads the MCS file from the UART and programs the Strata FLASH device at the locations.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;specified by the file contents.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This routine will continue until an end of file record is detected.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;For each line of MCS received, the current address will be output so that
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;progress can be monitored.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-program_MCS
INSTRUCTION-CALL
   OPERAND1-read_MCS_line
   OPERAND2-
    COMMENT-;read line from UART
      LABEL-
INSTRUCTION-CALL
   OPERAND1-MCS_address
   OPERAND2-
    COMMENT-;find start address and record type
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-sB
   OPERAND2-01
    COMMENT-;test for end record
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-Z
   OPERAND2-
    COMMENT-;end of programming
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-sB
   OPERAND2-04
    COMMENT-;test for extended address record
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-program_MCS
    COMMENT-;no data with this record and upper address now correct
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Assume data record type 00 which is data so need to program specified number
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;of bytes into memory at correct address.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-write_spm_data
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
   OPERAND2-
    COMMENT-;send address to indicate progress
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-sA
   OPERAND2-line_start
    COMMENT-;read number of data bytes to program
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_buffer_write
   OPERAND2-
    COMMENT-;write bytes to memory
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-program_MCS
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read one line of an MCS file into scratch pad memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Reads one line of MCS file format into scratch pad memory starting at location 'line_start'.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The routine detects the line start character ':' ignoring any preceding characters. This
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;will remove any additional CR or LF characters.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;It then reads each subsequent pair of ASCII characters, converts them to true hex in the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;range 00 to FF and stores them in scratch pad memory.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The end of the line is determined by either a CR or LF character.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The value last returned in register 'sE' will be the pointer to the location in
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;scratch pad memory following the last byte for the line read.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-read_MCS_line
INSTRUCTION-LOAD
   OPERAND1-sE
   OPERAND2-line_start
    COMMENT-;initialise SPM memory pointer
      LABEL-wait_MCS_line_Start
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read character
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_colon
    COMMENT-;test for start character
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_MCS_line_Start
    COMMENT-
      LABEL-read_MCS_byte
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read character
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_CR
    COMMENT-;test for end of line
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-Z
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_LF
    COMMENT-;test for end of line
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-Z
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-UART_data
    COMMENT-;upper nibble character
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read character
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-UART_data
    COMMENT-;lower nibble character
      LABEL-
INSTRUCTION-CALL
   OPERAND1-ASCII_byte_to_hex
   OPERAND2-
    COMMENT-;convert to true hex value
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-(sE)
    COMMENT-;write to SPM
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sE
   OPERAND2-01
    COMMENT-;increment pointer
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-read_MCS_byte
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Determine the current address for the line of an MCS file in scratch pad memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Checks the existing line data stored in scratch pad memory starting at location
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;'line_start' and determines the current address.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The address is in the register set [s9,s8,s7] before and after this routine is
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;executed because not all address bits are defined by a given line of MCS and
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the undefined bits remain constant.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A record type of 04 will update [s9].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A record type of 00 will update [s8,s7].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;On return, the register sB will contain the record type and
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;register sC will indicate the number of data bytes stored.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-MCS_address
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-line_start
    COMMENT-;initialise SPM memory pointer
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-sC
   OPERAND2-(sD)
    COMMENT-;read number of bytes on line
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sD
   OPERAND2-03
    COMMENT-;move to record type
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-sB
   OPERAND2-(sD)
    COMMENT-;read record type
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-sB
   OPERAND2-00
    COMMENT-;test for data record
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-new_low_address
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-sB
   OPERAND2-04
    COMMENT-;test for data record
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-NZ
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sD
   OPERAND2-02
    COMMENT-;read upper 8-bits
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s9
   OPERAND2-(sD)
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-new_low_address
INSTRUCTION-SUB
   OPERAND1-sD
   OPERAND2-01
    COMMENT-;read lower 8-bits
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s7
   OPERAND2-(sD)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sD
   OPERAND2-01
    COMMENT-;read middle 8-bits
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s8
   OPERAND2-(sD)
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Write to Buffer of StrataFlash Memory and program
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Writing to the buffer allows faster operation than writing individual bytes.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The buffer size is limited to 32 locations. To perform a buffer write the process
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; is as follows:-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Write command for buffer write to StrataFLASH memory (E8 hex).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      Base address for writing should also be set.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Read Status register and if not ready repeat command until it is.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Write a value specifying the number of bytes to be written LESS ONE.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      In this program the number of bytes will be specified in register sA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      and this value needs to be decremented before writing to the memory.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Write the correct number of actual data bytes with appropriate addresses.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      Ideally the addresses do not cross the boundary of 32 locations
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      such that LSBs are always in the range 00000 to 11111 binary.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      Crossing the boundary is OK but will take longer to program.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Write command to confirm operation (D0 hex).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Read Status register and wait for ready.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   This routine additionally restores the normal read array mode before returning.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The number of bytes to be written should be supplied in register sA and must be
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; a value between 1 and 32 (01 and 20 hex).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit base address should be supplied in register set [s9,s8,s7].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; On return, this will be increased by the number of locations written.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Scratch pad memory locations starting at location defined by constant
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 'data_start' should contain the data bytes to be written.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The act of writing the buffer to the memory array may take up to 654us to complete.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The time taken to program is recorded by register pair [sE,sD]. Each count
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sA,sD,sE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-SF_buffer_write
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-E8
    COMMENT-;command for buffer write
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read status register into s0
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-80
    COMMENT-;test ready/busy flag
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-SF_buffer_write
    COMMENT-;repeat command until ready
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-sA
    COMMENT-;Specify number of bytes to write
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;one less than actual number!
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-data_start
    COMMENT-;point to data in scratch pad memory
      LABEL-write_buffer_loop
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-(s3)
    COMMENT-;fetch data
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-;write to buffer
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s7
   OPERAND2-01
    COMMENT-;increment address
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s8
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s9
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s3
   OPERAND2-01
    COMMENT-;increment SPM pointer
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sA
   OPERAND2-01
    COMMENT-;count bytes remaining
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-write_buffer_loop
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-D0
    COMMENT-;command to confirm write
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
   OPERAND2-
    COMMENT-;wait for program to complete and set read array mode
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Write Command - Write one byte to specified address
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-write_command
INSTRUCTION-CALL
   OPERAND1-send_address
   OPERAND2-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-write_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-write_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-write_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-s0
    COMMENT-
      LABEL-get_data
INSTRUCTION-CALL
   OPERAND1-send_data
   OPERAND2-
    COMMENT-;obtain 8-bit data 00 to FF into s0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-get_data
    COMMENT-;bad input data
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_single_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Write a single byte to StrataFlash Memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To write a single byte to StrataFLASH memory the address must be set and the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; single-word/byte program command (40 hex) sent to the memory. Then the data byte can
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; be written to the memory using the same address.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Register s0 should contain the byte data to be written to the memory.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The act of writing the memory array may take up to 175us to complete. This routine
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; waits for the memory to be ready before restoring the normal read array mode and
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; returning. The time taken to program is recorded by register pair [sE,sD]. Each count
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-SF_single_byte_write
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-40
    COMMENT-;command for single byte program
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;write data to be programmed
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
   OPERAND2-
    COMMENT-;wait for program to complete
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read Command - Read one page of memory at specified address
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-read_command
INSTRUCTION-CALL
   OPERAND1-send_address
   OPERAND2-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF.  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-;read value from UART
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_SF_page
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The start address should be provided in register set [s9,s8,s7].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The display will be next 256 bytes displayed as 16 lines of 16 bytes
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;with each line commencing with the address of the first byte.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_SF_page
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-10
    COMMENT-;16 lines to display
      LABEL-send_SF_line
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
   OPERAND2-
    COMMENT-;display address                    ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-10
    COMMENT-;16 bytes to display on a line      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-send_SF_byte
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read byte into s0                  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s7
   OPERAND2-01
    COMMENT-;increment StrataFLASH address      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s8
   OPERAND2-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s9
   OPERAND2-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte                       ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;count bytes per line               ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-send_SF_byte
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s6
   OPERAND2-01
    COMMENT-;count lines                        ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-send_SF_line
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Leer Archivo completo- lee el archivo completo
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-arch_command
INSTRUCTION-CALL
   OPERAND1-send_address
   OPERAND2-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF.  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-;read value from UART
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_SF_page2
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The start address should be provided in register set [s9,s8,s7].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The display will be next 256 bytes displayed as 16 lines of 16 bytes
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;with each line commencing with the address of the first byte.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_SF_page2
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-FF
    COMMENT-; CONTADOR INTERNO (valor inicial de 255)
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-46
    COMMENT-; CONTADOR EXTERNO (Valor inicial de 70): En total 17737 lines to display
      LABEL-send_SF_line2
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
   OPERAND2-
    COMMENT-;display address                    ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-10
    COMMENT-;16 bytes to display on a line      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-send_SF_byte2
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read byte into s0                  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s7
   OPERAND2-01
    COMMENT-;increment StrataFLASH address      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s8
   OPERAND2-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s9
   OPERAND2-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte                       ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;count bytes per line               ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-send_SF_byte2
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s6
   OPERAND2-01
    COMMENT-;count lines                        ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-SUBCY
   OPERAND1-S4
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-send_SF_line2
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; ID Command - Read and display the device information for the StrataFLASH FLASH memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Normal response should be
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Device Manufacturer Code (Intel) = 89 hex
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Memory ID code for 128Mbit = 18 hex
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To read the device information the Read device information command (90)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; must be written to the memory. The information is read back but assumes
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; that 16-bit words are being used and hence address bit0 is not really used.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; hence addresses 000000 and 0000001 both return the Device Manufacturer Code and
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; addresses 000002 and 0000003 both return the Memory ID code.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; After reading the device information the read array command is written to the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; device to put it back to normal read mode.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s7,s8,s9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-SF_information
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;send 'ID=' to terminal
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_ID
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_equals
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-00
    COMMENT-;define base address 000000
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-90
    COMMENT-;command to read device information
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read Device Manufacturer Code into s0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-02
    COMMENT-;change address
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read Memory ID code into s0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
   OPERAND2-
    COMMENT-;restore normal read array mode
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Read StrataFLASH status register
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The main reason for reading the status register is to determine when the memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; is ready or busy. This information is provided by bit7 (0=busy and 1=ready).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The lower bits all indicate errors of some kind and therefore the only desirable
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; response is 00 hex or 80 hex. In this program, no error checking or clearing
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; is performed and the way this routine is executed from the menu only 80 hex is
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; expected.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To read the status register the read status register command must be written to
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; the device. All subsequent reads are then result in the return of the status
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; register. A different read command must be written to the device to stop this
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; mode.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; This mode is also entered automatically when performing program and erase operations.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-SF_status
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-00
    COMMENT-;define base address 000000
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-70
    COMMENT-;command to read status register
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read status register into s0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Read a byte from StrataFlash Memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Register s0 will return the byte data retrieved from the memory.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To read a byte, the address needs to be set up on the address lines
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; and the controls set as follows
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    SF_read = 1 - disable Spartan data outputs and enable StrataFlash outputs (OE=0)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      SF_ce = 0 - enable StrataFLASH memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      SF_we = 1 - Write enable off
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The access time of the memory is 75ns. This is equivalent to 3.75 clock cycles at
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; provides adequate delay for the memory to be accessed.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-SF_byte_read
INSTRUCTION-OUTPUT
   OPERAND1-s9
   OPERAND2-SF_addr_hi_port
    COMMENT-;set 24-bit address
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s8
   OPERAND2-SF_addr_mi_port
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s7
   OPERAND2-SF_addr_lo_port
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-05
    COMMENT-;set controls
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_control_port
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-06
    COMMENT-;>75ns delay
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-06
    COMMENT-;but do something useful!
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-SF_data_in_port
    COMMENT-;read data byte
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_control_port
    COMMENT-;clear controls
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Write data or command byte to StrataFlash Memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Register s1 should contain the byte to be written to the memory.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To write a byte, the address needs to be set up on the address lines
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; and the controls set as follows
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    SF_read = 0 - enable Spartan data outputs and disable StrataFlash outputs (OE=1)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      SF_ce = 0 - enable StrataFLASH memory
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      SF_we = 0 - Write enable on
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The setup time of the memory is 60ns. This is equivalent to 3 clock cycles at
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; provides adequate delay for the memory.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s1,s7,s8,s9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-SF_byte_write
INSTRUCTION-OUTPUT
   OPERAND1-s9
   OPERAND2-SF_addr_hi_port
    COMMENT-;set 24-bit address
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s8
   OPERAND2-SF_addr_mi_port
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s7
   OPERAND2-SF_addr_lo_port
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_data_out_port
    COMMENT-;set data byte to be written
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-;set controls
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_control_port
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-06
    COMMENT-;>60ns delay
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-06
    COMMENT-;but do something useful!
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_control_port
    COMMENT-;clear controls
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Set 'Read Array' mode on StrataFLASH
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The read array mode is the default mode of the memory and allows the contents
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; of the memory to be read based on the supplied address.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Read array is the default mode of the device, but it must also be placed back
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; into this mode after programming, erasing or reading the status register.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The read array command (FF hex) is written to the Strata flash memory.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s1,s7,s8,s9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-set_SF_read_array_mode
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-FF
    COMMENT-;command to read array
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Wait for StrataFLASH to be ready
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; This routine will typically be used after instigating a program or erase
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; command. It continuously reads the StrataFLASH status register and tests the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; information provided by bit7 which indicates if the memory is busy(0) or ready(1).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The routine waits for the ready condition before sending a read array command
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; which puts the memory back to normal read mode.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; During the polling process, a counter formed by register pair [sE,sD] records
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; approximately how long the memory is busy. This can be used to evaluate programming
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; and erase times if required. The timing loop is 15 instructions which is equivalent
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; to 30 clock cycles (600ns at 50MHz)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-wait_SF_ready
INSTRUCTION-LOAD
   OPERAND1-sE
   OPERAND2-00
    COMMENT-;clear 16-bit counter timer
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-00
    COMMENT-
      LABEL-wait_SF_loop
INSTRUCTION-ADD
   OPERAND1-sD
   OPERAND2-01
    COMMENT-;increment counter timer
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-sE
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read status register into s0
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-80
    COMMENT-;test ready/busy flag
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-wait_SF_loop
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
   OPERAND2-
    COMMENT-;restore normal read array mode
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Send 16-bit value in register pair [sE,sD] to UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; In this program the register pair [sE,sD] indicates the programming time of the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; StrataFLASH memory in 600ns increments. This routine can be used to display that
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; value if required.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_counter_timer
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-sE
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-sD
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Software delay routines
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 1us.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Constant value defines reflects the clock applied to KCPSM3. Every instruction
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;executes in 2 clock cycles making the calculation highly predictable. The '6' in
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_1us
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-delay_1us_constant
    COMMENT-
      LABEL-wait_1us
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1us
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 40us.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_40us
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-28
    COMMENT-;40 x 1us = 40us
      LABEL-wait_40us
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_40us
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 1ms.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_1ms
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-19
    COMMENT-;25 x 40us = 1ms
      LABEL-wait_1ms
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s2
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1ms
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 20ms.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 20ms used during initialisation.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s3
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_20ms
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-14
    COMMENT-;20 x 1ms = 20ms
      LABEL-wait_20ms
INSTRUCTION-CALL
   OPERAND1-delay_1ms
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s3
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_20ms
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of approximately 1 second.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s3, s4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_1s
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-14
    COMMENT-;50 x 20ms = 1000ms
      LABEL-wait_1s
INSTRUCTION-CALL
   OPERAND1-delay_20ms
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s4
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1s
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;UART communication routines
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read one character from the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Character read will be returned in a register called 'UART_data'.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The routine first tests the receiver FIFO buffer to see if data is present.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the FIFO is empty, the routine waits until there is a character to read.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;As this could take any amount of time the wait loop could include a call to a
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;subroutine which performs a useful function.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the received character is an XOFF, then the routine will then wait
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;for an XON to be received. This means that the rest of the program is held
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;in suspense and therefore it can not transmit. Once an XON is received, it will
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;again wait for a normal character before returning.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;NOTE: Characters between the XOFF and XON will be ignored in this version of the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;program!!!
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupt is disabled during this routine to prevent a false situation. If the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;receiver half-full flag went High it should result in an interrupt transmitting
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an XOFF character. However, if this routine were able to read the receiver buffer
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;at just about the same as the hardware detects the half-full flag, then it could
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;think that an XON needs to be transmitted.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0 and UART_data
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-read_from_UART
INSTRUCTION-DISABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-
      LABEL-wait_Rx_character
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-status_port
    COMMENT-;test Rx_FIFO buffer
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-rx_data_present
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-read_character
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_Rx_character
   OPERAND2-
    COMMENT-
      LABEL-read_character
INSTRUCTION-INPUT
   OPERAND1-UART_data
   OPERAND2-UART_read_port
    COMMENT-;read from FIFO
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_XOFF
    COMMENT-;test for XOFF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-wait_XON
    COMMENT-
      LABEL-
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-;normal finish
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-wait_XON
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-status_port
    COMMENT-;test Rx_FIFO buffer
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-rx_data_present
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-read_XON
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_XON
   OPERAND2-
    COMMENT-
      LABEL-read_XON
INSTRUCTION-INPUT
   OPERAND1-UART_data
   OPERAND2-UART_read_port
    COMMENT-;read from FIFO
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_XON
    COMMENT-;test for XON
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-wait_Rx_character
    COMMENT-;now wait for normal character
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_XON
   OPERAND2-
    COMMENT-;continue to wait for XON
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Transmit one character to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Character supplied in register called 'UART_data'.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The routine first tests the transmit FIFO buffer is empty.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the FIFO currently has any data, the routine waits until it is empty.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Ultimately this means that only one character is sent at a time which
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;could be important if the PC at the other end of the link transmits
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an XOFF and needs the flow of data to terminate as soon as possible.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_to_UART
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-status_port
    COMMENT-;test Tx_FIFO buffer
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-tx_data_present
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-UART_write
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-UART_write
INSTRUCTION-OUTPUT
   OPERAND1-UART_data
   OPERAND2-UART_write_port
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Useful ASCII conversion and handling routines
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert value provided in register s0 into ASCII characters
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The value provided must in the range 0 to 99 and will be converted into
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;two ASCII characters.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The number of 'tens' will be represented by an ASCII character returned in register s1.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The number of 'units' will be represented by an ASCII character returned in register s0.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex added to
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the actual decimal value.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0 and s1.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-decimal_to_ASCII
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-30
    COMMENT-;load 'tens' counter with ASCII for '0'
      LABEL-test_for_ten
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;increment 'tens' value
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-0A
    COMMENT-;try to subtract 10 from the supplied value
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-test_for_ten
    COMMENT-;repeat if subtraction was possible without underflow.
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;'tens' value one less ten due to underflow
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-3A
    COMMENT-;restore units value (the remainder) and convert to ASCII
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert character to upper case
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The character supplied in register s0.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the character is in the range 'a' to 'z', it is converted
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;to the equivalent upper case character in the range 'A' to 'Z'.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;All other characters remain unchanged.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-upper_case
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-61
    COMMENT-;eliminate character codes below 'a' (61 hex)
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-7B
    COMMENT-;eliminate character codes above 'z' (7A hex)
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-NC
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-AND
   OPERAND1-s0
   OPERAND2-DF
    COMMENT-;mask bit5 to convert to upper case
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert character '0' to '9' to numerical value in range 0 to 9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The character supplied in register s0. If the character is in the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;range '0' to '9', it is converted to the equivalent decimal value.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Characters not in the range '0' to '9' are signified by the return
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;with the CARRY flag set.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-1char_to_value
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-C6
    COMMENT-;reject character codes above '9' (39 hex)
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;carry flag is set
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-F6
    COMMENT-;reject character codes below '0' (30 hex)
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-;carry is set if value not in range
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Determine the numerical value of a two character decimal string held in
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;scratch pad memory such the result is in the range 0 to 99 (00 to 63 hex).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The string must be stored in two consecutive memory locations and the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;location of the first (tens) character supplied in the s1 register.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The result is provided in register s2. Strings not using characters in the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;range '0' to '9' are signified by the return with the CARRY flag set.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1 and s2.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-2char_to_value
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(s1)
    COMMENT-;read 'tens' character
      LABEL-
INSTRUCTION-CALL
   OPERAND1-1char_to_value
   OPERAND2-
    COMMENT-;convert to numerical value
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;bad character - CARRY set
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-;multiply 'tens' value by 10 (0A hex)
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;read 'units' character
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(s1)
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-1char_to_value
   OPERAND2-
    COMMENT-;convert to numerical value
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;bad character - CARRY set
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-;add units to result and clear CARRY flag
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert hexadecimal value provided in register s0 into ASCII characters
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The value provided must can be any value in the range 00 to FF and will be converted into
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;two ASCII characters.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The upper nibble will be represented by an ASCII character returned in register s2.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The lower nibble will be represented by an ASCII character returned in register s1.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;hexadecimal requiring a further addition of 07 to the 30 already added.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1 and s2.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-hex_byte_to_ASCII
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;remember value supplied
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-;isolate upper nibble
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-hex_to_ASCII
   OPERAND2-
    COMMENT-;convert
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-;upper nibble value in s2
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s1
    COMMENT-;restore complete value
      LABEL-
INSTRUCTION-AND
   OPERAND1-s0
   OPERAND2-0F
    COMMENT-;isolate lower nibble
      LABEL-
INSTRUCTION-CALL
   OPERAND1-hex_to_ASCII
   OPERAND2-
    COMMENT-;convert
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;lower nibble value in s1
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert hexadecimal value provided in register s0 into ASCII character
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Register used s0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-hex_to_ASCII
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-0A
    COMMENT-;test if value is in range 0 to 9
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-number_char
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-07
    COMMENT-;ASCII char A to F in range 41 to 46
      LABEL-number_char
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-3A
    COMMENT-;ASCII char 0 to 9 in range 30 to 40
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send the two character HEX value of the register contents 's0' to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_hex_byte
INSTRUCTION-CALL
   OPERAND1-hex_byte_to_ASCII
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-s2
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-s1
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send the six character HEX value of the register contents [s9,s8,s7] to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_hex_3bytes
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s9
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s8
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s7
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert the HEX ASCII characters contained in 's3' and 's2' into
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an equivalent hexadecimal value in register 's0'.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The upper nibble is represented by an ASCII character in register s3.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The lower nibble is represented by an ASCII character in register s2.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Input characters must be in the range 00 to FF hexadecimal or the CARRY flag
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;will be set on return.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s2 and s3.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-ASCII_byte_to_hex
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s3
    COMMENT-;Take upper nibble
      LABEL-
INSTRUCTION-CALL
   OPERAND1-ASCII_to_hex
   OPERAND2-
    COMMENT-;convert to value
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;reject if out of range
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-s0
    COMMENT-;remember value
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-;multiply value by 16 to put in upper nibble
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s2
    COMMENT-;Take lower nibble
      LABEL-
INSTRUCTION-CALL
   OPERAND1-ASCII_to_hex
   OPERAND2-
    COMMENT-;convert to value
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;reject if out of range
      LABEL-
INSTRUCTION-OR
   OPERAND1-s0
   OPERAND2-s3
    COMMENT-;merge in the upper nibble with CARRY reset
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Routine to convert ASCII data in 's0' to an equivalent HEX value.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If character is not valid for hex, then CARRY is set on return.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Register used s0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-ASCII_to_hex
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-B9
    COMMENT-;test for above ASCII code 46 ('F')
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-E9
    COMMENT-;normalise 0 to 9 with A-F in 11 to 16 hex
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;reject below ASCII code 30 ('0')
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-11
    COMMENT-;isolate A-F down to 00 to 05 hex
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-ASCII_letter
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-07
    COMMENT-;test for above ASCII code 46 ('F')
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-F6
    COMMENT-;convert to range 00 to 09
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-ASCII_letter
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-0A
    COMMENT-;convert to range 0A to 0F
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read two hex characters from UART and convert to single byte data
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-obtain_8bits
INSTRUCTION-CALL
   OPERAND1-read_upper_case
   OPERAND2-
    COMMENT-;obtain one byte from UART
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_upper_case
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-ASCII_byte_to_hex
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Text messages
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send Carriage Return to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_CR
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_CR
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send a space to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_space
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_space
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'PicoBlaze NOR FLASH Programmer' string to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_welcome
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_c
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_B
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_z
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_N
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_O
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_R
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_F
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_L
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_A
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_S
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_H
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_g
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_m
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_m
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_v
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_1
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_fullstop
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_0
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Waiting_MCS_file' string to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_Waiting_MCS_file
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_W
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_n
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_g
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_f
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-send_MCS_file
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_M
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_C
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_S
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_F
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Erase in progress' string to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_Erase_in_progress
INSTRUCTION-CALL
   OPERAND1-send_Erase
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_n
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_g
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Erase ' string to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_Erase
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_E
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send carriage return, 'OK' and carriage return to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_OK
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_O
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_K
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send menu to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_Menu
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_E
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Erase
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_B
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Erase
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_b
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_c
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_k
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_1
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_3
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_g
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_m
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_MCS_file
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_W
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_W
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_byte
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_R
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_R
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_d
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_2
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_5
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_6
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_byte
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_I
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_D
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_v
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_c
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_ID
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_H
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_H
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_p
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_S
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_S
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_u
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'ID' to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_ID
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_I
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_D
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'byte' to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_byte
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_b
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_y
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Confirm Erase (Y/n) ' to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_Confirm
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_C
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_n
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_f
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_m
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Erase
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_open
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_Y
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_divide
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_n
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_close
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Abort' to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_Abort
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_A
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_b
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'address=' to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_address
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_d
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-send_equals
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_equals
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'data=' to the UART
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-send_data
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_d
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-send_equals
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupt Service Routine (ISR)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;An interrupt occurs whenever the status of the UART receiver FIFO 'half_full' flag
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;changes.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A change from Low to High means that the buffer is becoming full and therefore
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an XOFF character must be transmitted.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A change from High to Low means that the buffer is starting to empty and therefore
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an XON character can be transmitted to restart the flow of new characters.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-3F5
   OPERAND2-
    COMMENT-;place at end of memory to keep separate
      LABEL-ISR
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-ISR_preserve_s0
    COMMENT-;preserve register contents
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-status_port
    COMMENT-;test 'half_full' status of receiver buffer.
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-rx_half_full
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-isr_send_xon
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-character_XOFF
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-isr_send_character
   OPERAND2-
    COMMENT-
      LABEL-isr_send_xon
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-character_XON
    COMMENT-
      LABEL-isr_send_character
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-UART_write_port
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-ISR_preserve_s0
    COMMENT-;restore register contents
      LABEL-
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupt Vector
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-3FF
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-ISR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
