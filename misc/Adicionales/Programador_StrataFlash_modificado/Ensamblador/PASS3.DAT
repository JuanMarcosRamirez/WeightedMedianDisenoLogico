    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;KCPSM3 Program - UART programming of StrataFLASH memory on the Spartan-3E Starter Kit.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;MODIFICADO POR JORGE MÁRQUEZ EN LA LÍNEA 578
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Ken Chapman - Xilinx Ltd
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Version v1.00 - 28th March 2006
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This program uses a 115200 baud UART connection with XON/XOFF flow control
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;to allow a standard MCS file for the configuration of a Spartan-3E device to
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;be programmed into the Intel StrataFLASH device on the board.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Port definitions
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-status_port
   OPERAND2-00
    COMMENT-;UART and filter status input
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-tx_data_present
   OPERAND2-01
    COMMENT-;  Transmitter  data present - bit0
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-tx_half_full
   OPERAND2-02
    COMMENT-;    FIFO          half full - bit1
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-tx_full
   OPERAND2-04
    COMMENT-;                       full - bit2
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-rx_data_present
   OPERAND2-08
    COMMENT-;               data present - bit3
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-rx_half_full
   OPERAND2-10
    COMMENT-;  Receiver        half full - bit4
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-rx_full
   OPERAND2-20
    COMMENT-;    FIFO               full - bit5
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-spare1
   OPERAND2-40
    COMMENT-;                  spare '0' - bit6
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_STS
   OPERAND2-80
    COMMENT-;            StrataFLASH STS - bit7
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-UART_read_port
   OPERAND2-01
    COMMENT-;UART Rx data input
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-UART_write_port
   OPERAND2-04
    COMMENT-;UART Tx data output
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_data_in_port
   OPERAND2-02
    COMMENT-;Read data from StrataFLASH device
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_data_out_port
   OPERAND2-10
    COMMENT-;Data to write into StrataFLASH device
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_hi_port
   OPERAND2-80
    COMMENT-;StrataFLASH address[23:16]
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_mi_port
   OPERAND2-40
    COMMENT-;StrataFLASH address[15:8]
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_addr_lo_port
   OPERAND2-20
    COMMENT-;StrataFLASH address[7:0]
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_control_port
   OPERAND2-08
    COMMENT-;StrataFLASH control
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_read
   OPERAND2-01
    COMMENT-;         active High read - bit0
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_ce
   OPERAND2-02
    COMMENT-; active Low device enable - bit1
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SF_we
   OPERAND2-04
    COMMENT-;         active Low write - bit2
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Special Register usage
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-NAMEREG
   OPERAND1-sF
   OPERAND2-UART_data
    COMMENT-;used to pass data to and from the UART
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Useful data constants
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Constant to define a software delay of 1us. This must be adjusted to reflect the
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;calculation highly predictable. The '6' in the following equation even allows for
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;'CALL delay_1us' instruction in the initiating code.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;For clock rates below 10MHz the value of 1 must be used and the operation will
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;become lower than intended.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-delay_1us_constant
   OPERAND2-0B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;ASCII table
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_a
   OPERAND2-61
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_b
   OPERAND2-62
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_c
   OPERAND2-63
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_d
   OPERAND2-64
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_e
   OPERAND2-65
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_f
   OPERAND2-66
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_g
   OPERAND2-67
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_h
   OPERAND2-68
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_i
   OPERAND2-69
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_j
   OPERAND2-6A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_k
   OPERAND2-6B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_l
   OPERAND2-6C
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_m
   OPERAND2-6D
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_n
   OPERAND2-6E
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_o
   OPERAND2-6F
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_p
   OPERAND2-70
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_q
   OPERAND2-71
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_r
   OPERAND2-72
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_s
   OPERAND2-73
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_t
   OPERAND2-74
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_u
   OPERAND2-75
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_v
   OPERAND2-76
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_w
   OPERAND2-77
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_x
   OPERAND2-78
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_y
   OPERAND2-79
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_z
   OPERAND2-7A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_A
   OPERAND2-41
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_B
   OPERAND2-42
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_C
   OPERAND2-43
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_D
   OPERAND2-44
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_E
   OPERAND2-45
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_F
   OPERAND2-46
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_G
   OPERAND2-47
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_H
   OPERAND2-48
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_I
   OPERAND2-49
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_J
   OPERAND2-4A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_K
   OPERAND2-4B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_L
   OPERAND2-4C
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_M
   OPERAND2-4D
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_N
   OPERAND2-4E
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_O
   OPERAND2-4F
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_P
   OPERAND2-50
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Q
   OPERAND2-51
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_R
   OPERAND2-52
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_S
   OPERAND2-53
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_T
   OPERAND2-54
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_U
   OPERAND2-55
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_V
   OPERAND2-56
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_W
   OPERAND2-57
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_X
   OPERAND2-58
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Y
   OPERAND2-59
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Z
   OPERAND2-5A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_0
   OPERAND2-30
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_1
   OPERAND2-31
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_2
   OPERAND2-32
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_3
   OPERAND2-33
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_4
   OPERAND2-34
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_5
   OPERAND2-35
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_6
   OPERAND2-36
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_7
   OPERAND2-37
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_8
   OPERAND2-38
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_9
   OPERAND2-39
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_colon
   OPERAND2-3A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_fullstop
   OPERAND2-2E
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_semi_colon
   OPERAND2-3B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_minus
   OPERAND2-2D
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_plus
   OPERAND2-2B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_comma
   OPERAND2-2C
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_less_than
   OPERAND2-3C
    COMMENT-;'<'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_greater_than
   OPERAND2-3E
    COMMENT-;'>'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_open
   OPERAND2-28
    COMMENT-;'('
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_close
   OPERAND2-29
    COMMENT-;')'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_divide
   OPERAND2-2F
    COMMENT-;'/'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_equals
   OPERAND2-3D
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_space
   OPERAND2-20
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_CR
   OPERAND2-0D
    COMMENT-;carriage return
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_LF
   OPERAND2-0A
    COMMENT-;line feed
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_question
   OPERAND2-3F
    COMMENT-;'?'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_dollar
   OPERAND2-24
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_exclaim
   OPERAND2-21
    COMMENT-;'!'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_BS
   OPERAND2-08
    COMMENT-;Back Space command character
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_XON
   OPERAND2-11
    COMMENT-;Flow control ON
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_XOFF
   OPERAND2-13
    COMMENT-;Flow control OFF
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Scratch Pad Memory Locations
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s0
   OPERAND2-00
    COMMENT-;preserve register during ISR
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Store up to one line of an MCS file as bytes
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A typical data line consists of:-
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;:     Start character which is not stored
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;10    Number of data bytes included (16 in this case)
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;aaaa  Lower 16-bits of the storage address
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;00    Record type (data in this case)
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;dddd...   Data bytes (typically 16 which is the maximum)
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;cc    Checksum
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CR/LF Line will end in carriage return and/or line feed which is not stored.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;So a total of 21 bytes could be stored before processing.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This is located at the end of scratch pad memory.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-line_start
   OPERAND2-2B
    COMMENT-;21 bytes until end of memory
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-data_start
   OPERAND2-2F
    COMMENT-;Start of data field if present
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Initialise the system and welcome message
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-cold_start
INSTRUCTION-CALL
   OPERAND1-SF_init
   OPERAND2-
    COMMENT-;initialise StrataFLASH controls
    ADDRESS-001
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1s
   OPERAND2-
    COMMENT-;delay because UART is fast and JTAG startup sequence can be slow
    ADDRESS-002
      LABEL-
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-;Interrupt is used for XON/XOFF flow control
    ADDRESS-003
      LABEL-welcome_start
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-004
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_welcome
   OPERAND2-
    COMMENT-;start up message and version number
    ADDRESS-005
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-005
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-005
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-005
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Main menu and command selection
    ADDRESS-005
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-005
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-005
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-005
      LABEL-warm_start
INSTRUCTION-CALL
   OPERAND1-send_Menu
   OPERAND2-
    COMMENT-;Menu and command selection
    ADDRESS-006
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-007
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-007
      LABEL-prompt
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-008
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-009
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_greater_than
    COMMENT-;prompt for input
    ADDRESS-00A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-00B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_upper_case
   OPERAND2-
    COMMENT-
    ADDRESS-00C
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_E
    COMMENT-;test for commands and execute as required
    ADDRESS-00D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-erase_command
    COMMENT-
    ADDRESS-00E
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_B
    COMMENT-
    ADDRESS-00F
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-block_erase_command
    COMMENT-
    ADDRESS-010
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_P
    COMMENT-
    ADDRESS-011
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-program_command
    COMMENT-
    ADDRESS-012
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_W
    COMMENT-
    ADDRESS-013
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-write_command
    COMMENT-
    ADDRESS-014
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_R
    COMMENT-
    ADDRESS-015
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-read_command
    COMMENT-
    ADDRESS-016
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_A
    COMMENT-;Comando mio
    ADDRESS-017
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-arch_command
    COMMENT-;Comando mio
    ADDRESS-018
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_I
    COMMENT-
    ADDRESS-019
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-SF_information
    COMMENT-
    ADDRESS-01A
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_H
    COMMENT-
    ADDRESS-01B
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-welcome_start
    COMMENT-
    ADDRESS-01C
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-character_S
    COMMENT-
    ADDRESS-01D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-SF_status
    COMMENT-
    ADDRESS-01E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;no valid command input
    ADDRESS-01F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_question
    COMMENT-;display ???
    ADDRESS-020
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-021
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-022
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-023
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-;Try again!
    ADDRESS-024
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-024
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-024
      LABEL-read_upper_case
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read command character from UART
    ADDRESS-025
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-;echo character
    ADDRESS-026
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-UART_data
    COMMENT-;convert to upper case
    ADDRESS-027
      LABEL-
INSTRUCTION-CALL
   OPERAND1-upper_case
   OPERAND2-
    COMMENT-
    ADDRESS-028
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Initialise the StrataFlash Memory control signals.
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SF_read = 0   - Output enable off
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SF_ce = 1     - Deselect StrataFLASH memory
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; SF_we = 1     - Write enable off
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Register used s0
    ADDRESS-029
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-029
      LABEL-SF_init
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-06
    COMMENT-
    ADDRESS-02A
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SF_control_port
    COMMENT-
    ADDRESS-02B
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Erase Command - Perform bulk erase of the StrataFLASH memory
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; This routine executes the block erase command 128 times with a different base
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; address in each case.
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Note that this could take as long as 8 minutes 30 seconds
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; and even typical times will be approximately 2 minutes.
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s1,s7,s8,s9
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-erase_command
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-FE
    COMMENT-;define base address of block 127 = FE0000
    ADDRESS-02D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-blocks_erase
   OPERAND2-
    COMMENT-
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Block Erase Command - Performs erase of lowest 3 blocks of StrataFLASH memory which
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; covers the address range 000000 to 05FFFF in which the configuration for an XC3S500E
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; would be able to fit (000000 to 045470).
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; This routine executes the block erase command 3 times with a different base
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; address in each case.
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Each block is 128K bytes and therefore has an address range of 000000 to 01FFFF.
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; So each block is separated by 020000 hex.
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9
    ADDRESS-02E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02E
      LABEL-block_erase_command
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-04
    COMMENT-;define base address of block 3 = 040000
    ADDRESS-02F
      LABEL-blocks_erase
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-030
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Confirm
   OPERAND2-
    COMMENT-;confirm command with a 'Y' which must be upper case
    ADDRESS-031
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read command character from UART
    ADDRESS-032
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-;echo input
    ADDRESS-033
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_Y
    COMMENT-
    ADDRESS-034
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-abort_erase
    COMMENT-
    ADDRESS-035
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-036
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Erase_in_progress
   OPERAND2-
    COMMENT-
    ADDRESS-037
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-038
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-00
    COMMENT-;define lower address of each block = xx0000
    ADDRESS-039
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
    ADDRESS-03A
      LABEL-blocks_erase_loop
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_fullstop
    COMMENT-;progress dots
    ADDRESS-03B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-03C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_erase_block
   OPERAND2-
    COMMENT-;erase block
    ADDRESS-03D
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s9
   OPERAND2-02
    COMMENT-;decrement base address by 1 block
    ADDRESS-03E
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-blocks_erase_loop
    COMMENT-;repeat until block 0 is erased
    ADDRESS-03F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-
    ADDRESS-040
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
    ADDRESS-041
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-041
      LABEL-abort_erase
INSTRUCTION-CALL
   OPERAND1-send_Abort
   OPERAND2-
    COMMENT-
    ADDRESS-042
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Erase a single 128K Byte block of the StrataFlash Memory
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit address of the block should be supplied in register set [s9,s8,s7].
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To erase a block the address must be set and then the block erase command (20 hex)
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; written to the memory followed by the write confirm command (D0 hex).
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The act of erasing a block may take up to 1 second to complete. This routine
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; waits for the memory to be ready before restoring the normal read array mode and
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; returning.
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s1,s7,s8,s9
    ADDRESS-043
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-043
      LABEL-SF_erase_block
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-20
    COMMENT-;block erase command
    ADDRESS-044
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-045
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-D0
    COMMENT-;write confirm command
    ADDRESS-046
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-047
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
   OPERAND2-
    COMMENT-;wait for erase to complete
    ADDRESS-048
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-049
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-049
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-049
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-049
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Program Command - Program StrataFLASH memory with data defined in an MCS file
    ADDRESS-049
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-049
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-049
      LABEL-program_command
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-04A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Waiting_MCS_file
   OPERAND2-
    COMMENT-
    ADDRESS-04B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-program_MCS
   OPERAND2-
    COMMENT-
    ADDRESS-04C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-
    ADDRESS-04D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Program StrataFLASH memory with data defined in an MCS file
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Reads the MCS file from the UART and programs the Strata FLASH device at the locations.
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;specified by the file contents.
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This routine will continue until an end of file record is detected.
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;For each line of MCS received, the current address will be output so that
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;progress can be monitored.
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-04E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-04E
      LABEL-program_MCS
INSTRUCTION-CALL
   OPERAND1-read_MCS_line
   OPERAND2-
    COMMENT-;read line from UART
    ADDRESS-04F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-MCS_address
   OPERAND2-
    COMMENT-;find start address and record type
    ADDRESS-050
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-sB
   OPERAND2-01
    COMMENT-;test for end record
    ADDRESS-051
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-Z
   OPERAND2-
    COMMENT-;end of programming
    ADDRESS-052
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-sB
   OPERAND2-04
    COMMENT-;test for extended address record
    ADDRESS-053
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-program_MCS
    COMMENT-;no data with this record and upper address now correct
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Assume data record type 00 which is data so need to program specified number
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;of bytes into memory at correct address.
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-054
      LABEL-write_spm_data
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
   OPERAND2-
    COMMENT-;send address to indicate progress
    ADDRESS-055
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-056
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-sA
   OPERAND2-line_start
    COMMENT-;read number of data bytes to program
    ADDRESS-057
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_buffer_write
   OPERAND2-
    COMMENT-;write bytes to memory
    ADDRESS-058
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-program_MCS
   OPERAND2-
    COMMENT-
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read one line of an MCS file into scratch pad memory
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Reads one line of MCS file format into scratch pad memory starting at location 'line_start'.
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The routine detects the line start character ':' ignoring any preceding characters. This
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;will remove any additional CR or LF characters.
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;It then reads each subsequent pair of ASCII characters, converts them to true hex in the
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;range 00 to FF and stores them in scratch pad memory.
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The end of the line is determined by either a CR or LF character.
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The value last returned in register 'sE' will be the pointer to the location in
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;scratch pad memory following the last byte for the line read.
    ADDRESS-059
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-059
      LABEL-read_MCS_line
INSTRUCTION-LOAD
   OPERAND1-sE
   OPERAND2-line_start
    COMMENT-;initialise SPM memory pointer
    ADDRESS-05A
      LABEL-wait_MCS_line_Start
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read character
    ADDRESS-05B
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_colon
    COMMENT-;test for start character
    ADDRESS-05C
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_MCS_line_Start
    COMMENT-
    ADDRESS-05D
      LABEL-read_MCS_byte
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read character
    ADDRESS-05E
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_CR
    COMMENT-;test for end of line
    ADDRESS-05F
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-Z
   OPERAND2-
    COMMENT-
    ADDRESS-060
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_LF
    COMMENT-;test for end of line
    ADDRESS-061
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-Z
   OPERAND2-
    COMMENT-
    ADDRESS-062
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-UART_data
    COMMENT-;upper nibble character
    ADDRESS-063
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_from_UART
   OPERAND2-
    COMMENT-;read character
    ADDRESS-064
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-UART_data
    COMMENT-;lower nibble character
    ADDRESS-065
      LABEL-
INSTRUCTION-CALL
   OPERAND1-ASCII_byte_to_hex
   OPERAND2-
    COMMENT-;convert to true hex value
    ADDRESS-066
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-(sE)
    COMMENT-;write to SPM
    ADDRESS-067
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sE
   OPERAND2-01
    COMMENT-;increment pointer
    ADDRESS-068
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-read_MCS_byte
   OPERAND2-
    COMMENT-
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Determine the current address for the line of an MCS file in scratch pad memory
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Checks the existing line data stored in scratch pad memory starting at location
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;'line_start' and determines the current address.
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The address is in the register set [s9,s8,s7] before and after this routine is
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;executed because not all address bits are defined by a given line of MCS and
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the undefined bits remain constant.
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A record type of 04 will update [s9].
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A record type of 00 will update [s8,s7].
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;On return, the register sB will contain the record type and
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;register sC will indicate the number of data bytes stored.
    ADDRESS-069
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-069
      LABEL-MCS_address
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-line_start
    COMMENT-;initialise SPM memory pointer
    ADDRESS-06A
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-sC
   OPERAND2-(sD)
    COMMENT-;read number of bytes on line
    ADDRESS-06B
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sD
   OPERAND2-03
    COMMENT-;move to record type
    ADDRESS-06C
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-sB
   OPERAND2-(sD)
    COMMENT-;read record type
    ADDRESS-06D
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-sB
   OPERAND2-00
    COMMENT-;test for data record
    ADDRESS-06E
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-new_low_address
    COMMENT-
    ADDRESS-06F
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-sB
   OPERAND2-04
    COMMENT-;test for data record
    ADDRESS-070
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-NZ
   OPERAND2-
    COMMENT-
    ADDRESS-071
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sD
   OPERAND2-02
    COMMENT-;read upper 8-bits
    ADDRESS-072
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s9
   OPERAND2-(sD)
    COMMENT-
    ADDRESS-073
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-074
      LABEL-new_low_address
INSTRUCTION-SUB
   OPERAND1-sD
   OPERAND2-01
    COMMENT-;read lower 8-bits
    ADDRESS-075
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s7
   OPERAND2-(sD)
    COMMENT-
    ADDRESS-076
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sD
   OPERAND2-01
    COMMENT-;read middle 8-bits
    ADDRESS-077
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s8
   OPERAND2-(sD)
    COMMENT-
    ADDRESS-078
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Write to Buffer of StrataFlash Memory and program
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Writing to the buffer allows faster operation than writing individual bytes.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The buffer size is limited to 32 locations. To perform a buffer write the process
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; is as follows:-
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Write command for buffer write to StrataFLASH memory (E8 hex).
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      Base address for writing should also be set.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Read Status register and if not ready repeat command until it is.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Write a value specifying the number of bytes to be written LESS ONE.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      In this program the number of bytes will be specified in register sA
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      and this value needs to be decremented before writing to the memory.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Write the correct number of actual data bytes with appropriate addresses.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      Ideally the addresses do not cross the boundary of 32 locations
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      such that LSBs are always in the range 00000 to 11111 binary.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      Crossing the boundary is OK but will take longer to program.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Write command to confirm operation (D0 hex).
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Read Status register and wait for ready.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   This routine additionally restores the normal read array mode before returning.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The number of bytes to be written should be supplied in register sA and must be
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; a value between 1 and 32 (01 and 20 hex).
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit base address should be supplied in register set [s9,s8,s7].
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; On return, this will be increased by the number of locations written.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Scratch pad memory locations starting at location defined by constant
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 'data_start' should contain the data bytes to be written.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The act of writing the buffer to the memory array may take up to 654us to complete.
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The time taken to program is recorded by register pair [sE,sD]. Each count
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sA,sD,sE
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-079
      LABEL-SF_buffer_write
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-E8
    COMMENT-;command for buffer write
    ADDRESS-07A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-07B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read status register into s0
    ADDRESS-07C
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-80
    COMMENT-;test ready/busy flag
    ADDRESS-07D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-SF_buffer_write
    COMMENT-;repeat command until ready
    ADDRESS-07E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-sA
    COMMENT-;Specify number of bytes to write
    ADDRESS-07F
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;one less than actual number!
    ADDRESS-080
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-081
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-data_start
    COMMENT-;point to data in scratch pad memory
    ADDRESS-082
      LABEL-write_buffer_loop
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-(s3)
    COMMENT-;fetch data
    ADDRESS-083
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-;write to buffer
    ADDRESS-084
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s7
   OPERAND2-01
    COMMENT-;increment address
    ADDRESS-085
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s8
   OPERAND2-00
    COMMENT-
    ADDRESS-086
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s9
   OPERAND2-00
    COMMENT-
    ADDRESS-087
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s3
   OPERAND2-01
    COMMENT-;increment SPM pointer
    ADDRESS-088
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sA
   OPERAND2-01
    COMMENT-;count bytes remaining
    ADDRESS-089
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-write_buffer_loop
    COMMENT-
    ADDRESS-08A
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-D0
    COMMENT-;command to confirm write
    ADDRESS-08B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-08C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
   OPERAND2-
    COMMENT-;wait for program to complete and set read array mode
    ADDRESS-08D
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-08E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-08E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-08E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-08E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Write Command - Write one byte to specified address
    ADDRESS-08E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-08E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-08E
      LABEL-write_command
INSTRUCTION-CALL
   OPERAND1-send_address
   OPERAND2-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF
    ADDRESS-08F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
    ADDRESS-090
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-write_command
    COMMENT-;bad input address
    ADDRESS-091
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-s0
    COMMENT-
    ADDRESS-092
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
    ADDRESS-093
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-write_command
    COMMENT-;bad input address
    ADDRESS-094
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-s0
    COMMENT-
    ADDRESS-095
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
    ADDRESS-096
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-write_command
    COMMENT-;bad input address
    ADDRESS-097
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-s0
    COMMENT-
    ADDRESS-098
      LABEL-get_data
INSTRUCTION-CALL
   OPERAND1-send_data
   OPERAND2-
    COMMENT-;obtain 8-bit data 00 to FF into s0
    ADDRESS-099
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
    ADDRESS-09A
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-get_data
    COMMENT-;bad input data
    ADDRESS-09B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_single_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-09C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-09D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-
    ADDRESS-09E
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Write a single byte to StrataFlash Memory
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To write a single byte to StrataFLASH memory the address must be set and the
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; single-word/byte program command (40 hex) sent to the memory. Then the data byte can
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; be written to the memory using the same address.
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Register s0 should contain the byte data to be written to the memory.
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The act of writing the memory array may take up to 175us to complete. This routine
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; waits for the memory to be ready before restoring the normal read array mode and
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; returning. The time taken to program is recorded by register pair [sE,sD]. Each count
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9
    ADDRESS-09F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-09F
      LABEL-SF_single_byte_write
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-40
    COMMENT-;command for single byte program
    ADDRESS-0A0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-0A1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;write data to be programmed
    ADDRESS-0A2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-0A3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-wait_SF_ready
   OPERAND2-
    COMMENT-;wait for program to complete
    ADDRESS-0A4
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-0A5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0A5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0A5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0A5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read Command - Read one page of memory at specified address
    ADDRESS-0A5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0A5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0A5
      LABEL-read_command
INSTRUCTION-CALL
   OPERAND1-send_address
   OPERAND2-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF.  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0A6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-;read value from UART
    ADDRESS-0A7
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
    ADDRESS-0A8
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-s0
    COMMENT-
    ADDRESS-0A9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
    ADDRESS-0AA
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
    ADDRESS-0AB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-s0
    COMMENT-
    ADDRESS-0AC
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
    ADDRESS-0AD
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
    ADDRESS-0AE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-s0
    COMMENT-
    ADDRESS-0AF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-0B0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_SF_page
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B1
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B2
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B3
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0B3
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The start address should be provided in register set [s9,s8,s7].
    ADDRESS-0B3
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The display will be next 256 bytes displayed as 16 lines of 16 bytes
    ADDRESS-0B3
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;with each line commencing with the address of the first byte.
    ADDRESS-0B3
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0B3
      LABEL-send_SF_page
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-10
    COMMENT-;16 lines to display
    ADDRESS-0B4
      LABEL-send_SF_line
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
   OPERAND2-
    COMMENT-;display address                    ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-10
    COMMENT-;16 bytes to display on a line      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B8
      LABEL-send_SF_byte
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0B9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read byte into s0                  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BA
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s7
   OPERAND2-01
    COMMENT-;increment StrataFLASH address      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BB
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s8
   OPERAND2-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BC
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s9
   OPERAND2-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte                       ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BE
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;count bytes per line               ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0BF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-send_SF_byte
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C0
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s6
   OPERAND2-01
    COMMENT-;count lines                        ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C1
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-send_SF_line
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C3
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;**************************************************************************************
    ADDRESS-0C4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Leer Archivo completo- lee el archivo completo
    ADDRESS-0C4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0C4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C4
      LABEL-arch_command
INSTRUCTION-CALL
   OPERAND1-send_address
   OPERAND2-
    COMMENT-;obtain 24-bit address 000000 to FFFFFF.  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0C5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-;read value from UART
    ADDRESS-0C6
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
    ADDRESS-0C7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-s0
    COMMENT-
    ADDRESS-0C8
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
    ADDRESS-0C9
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
    ADDRESS-0CA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-s0
    COMMENT-
    ADDRESS-0CB
      LABEL-
INSTRUCTION-CALL
   OPERAND1-obtain_8bits
   OPERAND2-
    COMMENT-
    ADDRESS-0CC
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-read_command
    COMMENT-;bad input address
    ADDRESS-0CD
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-s0
    COMMENT-
    ADDRESS-0CE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-0CF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_SF_page2
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_OK
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D1
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, no mas de s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0D2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The start address should be provided in register set [s9,s8,s7].
    ADDRESS-0D2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The display will be next 256 bytes displayed as 16 lines of 16 bytes
    ADDRESS-0D2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;with each line commencing with the address of the first byte.
    ADDRESS-0D2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0D2
      LABEL-send_SF_page2
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-FF
    COMMENT-; CONTADOR INTERNO (valor inicial de 255)
    ADDRESS-0D3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-46
    COMMENT-; CONTADOR EXTERNO (Valor inicial de 70): En total 17737 lines to display
    ADDRESS-0D4
      LABEL-send_SF_line2
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_3bytes
   OPERAND2-
    COMMENT-;display address                    ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-10
    COMMENT-;16 bytes to display on a line      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D8
      LABEL-send_SF_byte2
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0D9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read byte into s0                  ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DA
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s7
   OPERAND2-01
    COMMENT-;increment StrataFLASH address      ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DB
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s8
   OPERAND2-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DC
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s9
   OPERAND2-00
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte                       ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DE
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;count bytes per line               ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0DF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-send_SF_byte2
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E0
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s6
   OPERAND2-01
    COMMENT-;count lines                        ;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E1
      LABEL-
INSTRUCTION-SUBCY
   OPERAND1-S4
   OPERAND2-00
    COMMENT-
    ADDRESS-0E2
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-send_SF_line2
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E4
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-;revisado incluyendo cada call, se usan s0,s1,s2,s5,s6,s7,s8,s9,sF
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; ID Command - Read and display the device information for the StrataFLASH FLASH memory
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Normal response should be
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Device Manufacturer Code (Intel) = 89 hex
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Memory ID code for 128Mbit = 18 hex
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To read the device information the Read device information command (90)
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; must be written to the memory. The information is read back but assumes
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; that 16-bit words are being used and hence address bit0 is not really used.
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; hence addresses 000000 and 0000001 both return the Device Manufacturer Code and
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; addresses 000002 and 0000003 both return the Memory ID code.
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; After reading the device information the read array command is written to the
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; device to put it back to normal read mode.
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s7,s8,s9
    ADDRESS-0E5
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E5
      LABEL-SF_information
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-;send 'ID=' to terminal
    ADDRESS-0E6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_ID
   OPERAND2-
    COMMENT-
    ADDRESS-0E7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_equals
    COMMENT-
    ADDRESS-0E8
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-0E9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-0EA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-00
    COMMENT-;define base address 000000
    ADDRESS-0EB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-00
    COMMENT-
    ADDRESS-0EC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
    ADDRESS-0ED
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-90
    COMMENT-;command to read device information
    ADDRESS-0EE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-0EF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read Device Manufacturer Code into s0
    ADDRESS-0F0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte
    ADDRESS-0F1
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-0F2
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-02
    COMMENT-;change address
    ADDRESS-0F3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read Memory ID code into s0
    ADDRESS-0F4
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte
    ADDRESS-0F5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-0F6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
   OPERAND2-
    COMMENT-;restore normal read array mode
    ADDRESS-0F7
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Read StrataFLASH status register
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The main reason for reading the status register is to determine when the memory
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; is ready or busy. This information is provided by bit7 (0=busy and 1=ready).
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The lower bits all indicate errors of some kind and therefore the only desirable
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; response is 00 hex or 80 hex. In this program, no error checking or clearing
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; is performed and the way this routine is executed from the menu only 80 hex is
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; expected.
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To read the status register the read status register command must be written to
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; the device. All subsequent reads are then result in the return of the status
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; register. A different read command must be written to the device to stop this
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; mode.
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; This mode is also entered automatically when performing program and erase operations.
    ADDRESS-0F8
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0F8
      LABEL-SF_status
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-00
    COMMENT-;define base address 000000
    ADDRESS-0F9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-00
    COMMENT-
    ADDRESS-0FA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
    ADDRESS-0FB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-70
    COMMENT-;command to read status register
    ADDRESS-0FC
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-0FD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-0FE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read status register into s0
    ADDRESS-0FF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-;display byte
    ADDRESS-100
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-101
      LABEL-
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
   OPERAND2-
    COMMENT-
    ADDRESS-102
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-prompt
   OPERAND2-
    COMMENT-
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Read a byte from StrataFlash Memory
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Register s0 will return the byte data retrieved from the memory.
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To read a byte, the address needs to be set up on the address lines
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; and the controls set as follows
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    SF_read = 1 - disable Spartan data outputs and enable StrataFlash outputs (OE=0)
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      SF_ce = 0 - enable StrataFLASH memory
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      SF_we = 1 - Write enable off
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The access time of the memory is 75ns. This is equivalent to 3.75 clock cycles at
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; provides adequate delay for the memory to be accessed.
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9
    ADDRESS-103
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-103
      LABEL-SF_byte_read
INSTRUCTION-OUTPUT
   OPERAND1-s9
   OPERAND2-SF_addr_hi_port
    COMMENT-;set 24-bit address
    ADDRESS-104
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s8
   OPERAND2-SF_addr_mi_port
    COMMENT-
    ADDRESS-105
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s7
   OPERAND2-SF_addr_lo_port
    COMMENT-
    ADDRESS-106
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-05
    COMMENT-;set controls
    ADDRESS-107
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_control_port
    COMMENT-
    ADDRESS-108
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-06
    COMMENT-;>75ns delay
    ADDRESS-109
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-06
    COMMENT-;but do something useful!
    ADDRESS-10A
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-SF_data_in_port
    COMMENT-;read data byte
    ADDRESS-10B
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_control_port
    COMMENT-;clear controls
    ADDRESS-10C
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Write data or command byte to StrataFlash Memory
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 24-bit address should be supplied in register set [s9,s8,s7].
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Register s1 should contain the byte to be written to the memory.
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; To write a byte, the address needs to be set up on the address lines
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; and the controls set as follows
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    SF_read = 0 - enable Spartan data outputs and disable StrataFlash outputs (OE=1)
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      SF_ce = 0 - enable StrataFLASH memory
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      SF_we = 0 - Write enable on
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The setup time of the memory is 60ns. This is equivalent to 3 clock cycles at
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; provides adequate delay for the memory.
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s1,s7,s8,s9
    ADDRESS-10D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10D
      LABEL-SF_byte_write
INSTRUCTION-OUTPUT
   OPERAND1-s9
   OPERAND2-SF_addr_hi_port
    COMMENT-;set 24-bit address
    ADDRESS-10E
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s8
   OPERAND2-SF_addr_mi_port
    COMMENT-
    ADDRESS-10F
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s7
   OPERAND2-SF_addr_lo_port
    COMMENT-
    ADDRESS-110
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_data_out_port
    COMMENT-;set data byte to be written
    ADDRESS-111
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-;set controls
    ADDRESS-112
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_control_port
    COMMENT-
    ADDRESS-113
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-06
    COMMENT-;>60ns delay
    ADDRESS-114
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-06
    COMMENT-;but do something useful!
    ADDRESS-115
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-SF_control_port
    COMMENT-;clear controls
    ADDRESS-116
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Set 'Read Array' mode on StrataFLASH
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The read array mode is the default mode of the memory and allows the contents
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; of the memory to be read based on the supplied address.
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Read array is the default mode of the device, but it must also be placed back
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; into this mode after programming, erasing or reading the status register.
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The read array command (FF hex) is written to the Strata flash memory.
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s1,s7,s8,s9
    ADDRESS-117
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-117
      LABEL-set_SF_read_array_mode
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-FF
    COMMENT-;command to read array
    ADDRESS-118
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_write
   OPERAND2-
    COMMENT-
    ADDRESS-119
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Wait for StrataFLASH to be ready
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; This routine will typically be used after instigating a program or erase
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; command. It continuously reads the StrataFLASH status register and tests the
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; information provided by bit7 which indicates if the memory is busy(0) or ready(1).
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The routine waits for the ready condition before sending a read array command
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; which puts the memory back to normal read mode.
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; During the polling process, a counter formed by register pair [sE,sD] records
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; approximately how long the memory is busy. This can be used to evaluate programming
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; and erase times if required. The timing loop is 15 instructions which is equivalent
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; to 30 clock cycles (600ns at 50MHz)
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-11A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-11A
      LABEL-wait_SF_ready
INSTRUCTION-LOAD
   OPERAND1-sE
   OPERAND2-00
    COMMENT-;clear 16-bit counter timer
    ADDRESS-11B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sD
   OPERAND2-00
    COMMENT-
    ADDRESS-11C
      LABEL-wait_SF_loop
INSTRUCTION-ADD
   OPERAND1-sD
   OPERAND2-01
    COMMENT-;increment counter timer
    ADDRESS-11D
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-sE
   OPERAND2-00
    COMMENT-
    ADDRESS-11E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SF_byte_read
   OPERAND2-
    COMMENT-;read status register into s0
    ADDRESS-11F
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-80
    COMMENT-;test ready/busy flag
    ADDRESS-120
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-wait_SF_loop
    COMMENT-
    ADDRESS-121
      LABEL-
INSTRUCTION-CALL
   OPERAND1-set_SF_read_array_mode
   OPERAND2-
    COMMENT-;restore normal read array mode
    ADDRESS-122
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Send 16-bit value in register pair [sE,sD] to UART
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; In this program the register pair [sE,sD] indicates the programming time of the
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; StrataFLASH memory in 600ns increments. This routine can be used to display that
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; value if required.
    ADDRESS-123
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-123
      LABEL-send_counter_timer
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-124
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-sE
    COMMENT-
    ADDRESS-125
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
    ADDRESS-126
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-sD
    COMMENT-
    ADDRESS-127
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
    ADDRESS-128
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-129
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Software delay routines
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 1us.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Constant value defines reflects the clock applied to KCPSM3. Every instruction
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;executes in 2 clock cycles making the calculation highly predictable. The '6' in
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-delay_1us
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-delay_1us_constant
    COMMENT-
    ADDRESS-12B
      LABEL-wait_1us
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
    ADDRESS-12C
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1us
    COMMENT-
    ADDRESS-12D
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-12E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 40us.
    ADDRESS-12E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1
    ADDRESS-12E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12E
      LABEL-delay_40us
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-28
    COMMENT-;40 x 1us = 40us
    ADDRESS-12F
      LABEL-wait_40us
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-
    ADDRESS-130
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
    ADDRESS-131
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_40us
    COMMENT-
    ADDRESS-132
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-133
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-133
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-133
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 1ms.
    ADDRESS-133
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-133
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2
    ADDRESS-133
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-133
      LABEL-delay_1ms
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-19
    COMMENT-;25 x 40us = 1ms
    ADDRESS-134
      LABEL-wait_1ms
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-
    ADDRESS-135
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s2
   OPERAND2-01
    COMMENT-
    ADDRESS-136
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1ms
    COMMENT-
    ADDRESS-137
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-138
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-138
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 20ms.
    ADDRESS-138
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-138
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 20ms used during initialisation.
    ADDRESS-138
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-138
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s3
    ADDRESS-138
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-138
      LABEL-delay_20ms
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-14
    COMMENT-;20 x 1ms = 20ms
    ADDRESS-139
      LABEL-wait_20ms
INSTRUCTION-CALL
   OPERAND1-delay_1ms
   OPERAND2-
    COMMENT-
    ADDRESS-13A
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s3
   OPERAND2-01
    COMMENT-
    ADDRESS-13B
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_20ms
    COMMENT-
    ADDRESS-13C
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-13D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-13D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of approximately 1 second.
    ADDRESS-13D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-13D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s3, s4
    ADDRESS-13D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-13D
      LABEL-delay_1s
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-14
    COMMENT-;50 x 20ms = 1000ms
    ADDRESS-13E
      LABEL-wait_1s
INSTRUCTION-CALL
   OPERAND1-delay_20ms
   OPERAND2-
    COMMENT-
    ADDRESS-13F
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s4
   OPERAND2-01
    COMMENT-
    ADDRESS-140
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1s
    COMMENT-
    ADDRESS-141
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;UART communication routines
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read one character from the UART
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Character read will be returned in a register called 'UART_data'.
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The routine first tests the receiver FIFO buffer to see if data is present.
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the FIFO is empty, the routine waits until there is a character to read.
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;As this could take any amount of time the wait loop could include a call to a
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;subroutine which performs a useful function.
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the received character is an XOFF, then the routine will then wait
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;for an XON to be received. This means that the rest of the program is held
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;in suspense and therefore it can not transmit. Once an XON is received, it will
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;again wait for a normal character before returning.
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;NOTE: Characters between the XOFF and XON will be ignored in this version of the
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;program!!!
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupt is disabled during this routine to prevent a false situation. If the
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;receiver half-full flag went High it should result in an interrupt transmitting
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an XOFF character. However, if this routine were able to read the receiver buffer
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;at just about the same as the hardware detects the half-full flag, then it could
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;think that an XON needs to be transmitted.
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0 and UART_data
    ADDRESS-142
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-142
      LABEL-read_from_UART
INSTRUCTION-DISABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-
    ADDRESS-143
      LABEL-wait_Rx_character
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-status_port
    COMMENT-;test Rx_FIFO buffer
    ADDRESS-144
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-rx_data_present
    COMMENT-
    ADDRESS-145
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-read_character
    COMMENT-
    ADDRESS-146
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_Rx_character
   OPERAND2-
    COMMENT-
    ADDRESS-147
      LABEL-read_character
INSTRUCTION-INPUT
   OPERAND1-UART_data
   OPERAND2-UART_read_port
    COMMENT-;read from FIFO
    ADDRESS-148
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_XOFF
    COMMENT-;test for XOFF
    ADDRESS-149
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-wait_XON
    COMMENT-
    ADDRESS-14A
      LABEL-
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-;normal finish
    ADDRESS-14B
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-14C
      LABEL-wait_XON
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-status_port
    COMMENT-;test Rx_FIFO buffer
    ADDRESS-14D
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-rx_data_present
    COMMENT-
    ADDRESS-14E
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-read_XON
    COMMENT-
    ADDRESS-14F
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_XON
   OPERAND2-
    COMMENT-
    ADDRESS-150
      LABEL-read_XON
INSTRUCTION-INPUT
   OPERAND1-UART_data
   OPERAND2-UART_read_port
    COMMENT-;read from FIFO
    ADDRESS-151
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-UART_data
   OPERAND2-character_XON
    COMMENT-;test for XON
    ADDRESS-152
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-wait_Rx_character
    COMMENT-;now wait for normal character
    ADDRESS-153
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_XON
   OPERAND2-
    COMMENT-;continue to wait for XON
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Transmit one character to the UART
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Character supplied in register called 'UART_data'.
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The routine first tests the transmit FIFO buffer is empty.
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the FIFO currently has any data, the routine waits until it is empty.
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Ultimately this means that only one character is sent at a time which
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;could be important if the PC at the other end of the link transmits
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an XOFF and needs the flow of data to terminate as soon as possible.
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0
    ADDRESS-154
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-154
      LABEL-send_to_UART
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-status_port
    COMMENT-;test Tx_FIFO buffer
    ADDRESS-155
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-tx_data_present
    COMMENT-
    ADDRESS-156
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-UART_write
    COMMENT-
    ADDRESS-157
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-158
      LABEL-UART_write
INSTRUCTION-OUTPUT
   OPERAND1-UART_data
   OPERAND2-UART_write_port
    COMMENT-
    ADDRESS-159
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Useful ASCII conversion and handling routines
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert value provided in register s0 into ASCII characters
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The value provided must in the range 0 to 99 and will be converted into
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;two ASCII characters.
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The number of 'tens' will be represented by an ASCII character returned in register s1.
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The number of 'units' will be represented by an ASCII character returned in register s0.
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex added to
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the actual decimal value.
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0 and s1.
    ADDRESS-15A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-15A
      LABEL-decimal_to_ASCII
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-30
    COMMENT-;load 'tens' counter with ASCII for '0'
    ADDRESS-15B
      LABEL-test_for_ten
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;increment 'tens' value
    ADDRESS-15C
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-0A
    COMMENT-;try to subtract 10 from the supplied value
    ADDRESS-15D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-test_for_ten
    COMMENT-;repeat if subtraction was possible without underflow.
    ADDRESS-15E
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;'tens' value one less ten due to underflow
    ADDRESS-15F
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-3A
    COMMENT-;restore units value (the remainder) and convert to ASCII
    ADDRESS-160
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert character to upper case
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The character supplied in register s0.
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the character is in the range 'a' to 'z', it is converted
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;to the equivalent upper case character in the range 'A' to 'Z'.
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;All other characters remain unchanged.
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0.
    ADDRESS-161
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-161
      LABEL-upper_case
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-61
    COMMENT-;eliminate character codes below 'a' (61 hex)
    ADDRESS-162
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-
    ADDRESS-163
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-7B
    COMMENT-;eliminate character codes above 'z' (7A hex)
    ADDRESS-164
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-NC
   OPERAND2-
    COMMENT-
    ADDRESS-165
      LABEL-
INSTRUCTION-AND
   OPERAND1-s0
   OPERAND2-DF
    COMMENT-;mask bit5 to convert to upper case
    ADDRESS-166
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert character '0' to '9' to numerical value in range 0 to 9
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The character supplied in register s0. If the character is in the
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;range '0' to '9', it is converted to the equivalent decimal value.
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Characters not in the range '0' to '9' are signified by the return
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;with the CARRY flag set.
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0.
    ADDRESS-167
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-167
      LABEL-1char_to_value
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-C6
    COMMENT-;reject character codes above '9' (39 hex)
    ADDRESS-168
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;carry flag is set
    ADDRESS-169
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-F6
    COMMENT-;reject character codes below '0' (30 hex)
    ADDRESS-16A
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-;carry is set if value not in range
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Determine the numerical value of a two character decimal string held in
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;scratch pad memory such the result is in the range 0 to 99 (00 to 63 hex).
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The string must be stored in two consecutive memory locations and the
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;location of the first (tens) character supplied in the s1 register.
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The result is provided in register s2. Strings not using characters in the
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;range '0' to '9' are signified by the return with the CARRY flag set.
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1 and s2.
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-2char_to_value
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(s1)
    COMMENT-;read 'tens' character
    ADDRESS-16C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-1char_to_value
   OPERAND2-
    COMMENT-;convert to numerical value
    ADDRESS-16D
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;bad character - CARRY set
    ADDRESS-16E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-
    ADDRESS-16F
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-;multiply 'tens' value by 10 (0A hex)
    ADDRESS-170
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
    ADDRESS-171
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-
    ADDRESS-172
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
    ADDRESS-173
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;read 'units' character
    ADDRESS-174
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(s1)
    COMMENT-
    ADDRESS-175
      LABEL-
INSTRUCTION-CALL
   OPERAND1-1char_to_value
   OPERAND2-
    COMMENT-;convert to numerical value
    ADDRESS-176
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;bad character - CARRY set
    ADDRESS-177
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-;add units to result and clear CARRY flag
    ADDRESS-178
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert hexadecimal value provided in register s0 into ASCII characters
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The value provided must can be any value in the range 00 to FF and will be converted into
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;two ASCII characters.
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The upper nibble will be represented by an ASCII character returned in register s2.
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The lower nibble will be represented by an ASCII character returned in register s1.
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;hexadecimal requiring a further addition of 07 to the 30 already added.
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1 and s2.
    ADDRESS-179
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-179
      LABEL-hex_byte_to_ASCII
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;remember value supplied
    ADDRESS-17A
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-;isolate upper nibble
    ADDRESS-17B
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-17C
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-17D
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-17E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-hex_to_ASCII
   OPERAND2-
    COMMENT-;convert
    ADDRESS-17F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-;upper nibble value in s2
    ADDRESS-180
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s1
    COMMENT-;restore complete value
    ADDRESS-181
      LABEL-
INSTRUCTION-AND
   OPERAND1-s0
   OPERAND2-0F
    COMMENT-;isolate lower nibble
    ADDRESS-182
      LABEL-
INSTRUCTION-CALL
   OPERAND1-hex_to_ASCII
   OPERAND2-
    COMMENT-;convert
    ADDRESS-183
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;lower nibble value in s1
    ADDRESS-184
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-185
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-185
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert hexadecimal value provided in register s0 into ASCII character
    ADDRESS-185
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-185
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Register used s0
    ADDRESS-185
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-185
      LABEL-hex_to_ASCII
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-0A
    COMMENT-;test if value is in range 0 to 9
    ADDRESS-186
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-number_char
    COMMENT-
    ADDRESS-187
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-07
    COMMENT-;ASCII char A to F in range 41 to 46
    ADDRESS-188
      LABEL-number_char
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-3A
    COMMENT-;ASCII char 0 to 9 in range 30 to 40
    ADDRESS-189
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-18A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-18A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-18A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send the two character HEX value of the register contents 's0' to the UART
    ADDRESS-18A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-18A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2
    ADDRESS-18A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-18A
      LABEL-send_hex_byte
INSTRUCTION-CALL
   OPERAND1-hex_byte_to_ASCII
   OPERAND2-
    COMMENT-
    ADDRESS-18B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-s2
    COMMENT-
    ADDRESS-18C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-18D
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-s1
    COMMENT-
    ADDRESS-18E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-18F
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-190
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-190
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-190
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-190
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send the six character HEX value of the register contents [s9,s8,s7] to the UART
    ADDRESS-190
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-190
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2
    ADDRESS-190
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-190
      LABEL-send_hex_3bytes
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s9
    COMMENT-
    ADDRESS-191
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
    ADDRESS-192
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s8
    COMMENT-
    ADDRESS-193
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
    ADDRESS-194
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s7
    COMMENT-
    ADDRESS-195
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_hex_byte
   OPERAND2-
    COMMENT-
    ADDRESS-196
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert the HEX ASCII characters contained in 's3' and 's2' into
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an equivalent hexadecimal value in register 's0'.
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The upper nibble is represented by an ASCII character in register s3.
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The lower nibble is represented by an ASCII character in register s2.
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Input characters must be in the range 00 to FF hexadecimal or the CARRY flag
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;will be set on return.
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s2 and s3.
    ADDRESS-197
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-197
      LABEL-ASCII_byte_to_hex
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s3
    COMMENT-;Take upper nibble
    ADDRESS-198
      LABEL-
INSTRUCTION-CALL
   OPERAND1-ASCII_to_hex
   OPERAND2-
    COMMENT-;convert to value
    ADDRESS-199
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;reject if out of range
    ADDRESS-19A
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-s0
    COMMENT-;remember value
    ADDRESS-19B
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-;multiply value by 16 to put in upper nibble
    ADDRESS-19C
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-
    ADDRESS-19D
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-
    ADDRESS-19E
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-
    ADDRESS-19F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s2
    COMMENT-;Take lower nibble
    ADDRESS-1A0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-ASCII_to_hex
   OPERAND2-
    COMMENT-;convert to value
    ADDRESS-1A1
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;reject if out of range
    ADDRESS-1A2
      LABEL-
INSTRUCTION-OR
   OPERAND1-s0
   OPERAND2-s3
    COMMENT-;merge in the upper nibble with CARRY reset
    ADDRESS-1A3
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1A4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Routine to convert ASCII data in 's0' to an equivalent HEX value.
    ADDRESS-1A4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If character is not valid for hex, then CARRY is set on return.
    ADDRESS-1A4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Register used s0
    ADDRESS-1A4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A4
      LABEL-ASCII_to_hex
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-B9
    COMMENT-;test for above ASCII code 46 ('F')
    ADDRESS-1A5
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-
    ADDRESS-1A6
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-E9
    COMMENT-;normalise 0 to 9 with A-F in 11 to 16 hex
    ADDRESS-1A7
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-;reject below ASCII code 30 ('0')
    ADDRESS-1A8
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-11
    COMMENT-;isolate A-F down to 00 to 05 hex
    ADDRESS-1A9
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-ASCII_letter
    COMMENT-
    ADDRESS-1AA
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-07
    COMMENT-;test for above ASCII code 46 ('F')
    ADDRESS-1AB
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-C
   OPERAND2-
    COMMENT-
    ADDRESS-1AC
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-F6
    COMMENT-;convert to range 00 to 09
    ADDRESS-1AD
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1AE
      LABEL-ASCII_letter
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-0A
    COMMENT-;convert to range 0A to 0F
    ADDRESS-1AF
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1B0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read two hex characters from UART and convert to single byte data
    ADDRESS-1B0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B0
      LABEL-obtain_8bits
INSTRUCTION-CALL
   OPERAND1-read_upper_case
   OPERAND2-
    COMMENT-;obtain one byte from UART
    ADDRESS-1B1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-s0
    COMMENT-
    ADDRESS-1B2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-read_upper_case
   OPERAND2-
    COMMENT-
    ADDRESS-1B3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-
    ADDRESS-1B4
      LABEL-
INSTRUCTION-CALL
   OPERAND1-ASCII_byte_to_hex
   OPERAND2-
    COMMENT-
    ADDRESS-1B5
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1B6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-1B6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Text messages
    ADDRESS-1B6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-1B6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send Carriage Return to the UART
    ADDRESS-1B6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B6
      LABEL-send_CR
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_CR
    COMMENT-
    ADDRESS-1B7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1B8
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1B9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send a space to the UART
    ADDRESS-1B9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B9
      LABEL-send_space
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_space
    COMMENT-
    ADDRESS-1BA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1BB
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1BC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1BC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1BC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'PicoBlaze NOR FLASH Programmer' string to the UART
    ADDRESS-1BC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1BC
      LABEL-send_welcome
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-1BD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-1BE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
    ADDRESS-1BF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1C0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
    ADDRESS-1C1
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1C2
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_c
    COMMENT-
    ADDRESS-1C3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1C4
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
    ADDRESS-1C5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1C6
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_B
    COMMENT-
    ADDRESS-1C7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1C8
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
    ADDRESS-1C9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1CA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-1CB
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1CC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_z
    COMMENT-
    ADDRESS-1CD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1CE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-1CF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1D0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-1D1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_N
    COMMENT-
    ADDRESS-1D2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1D3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_O
    COMMENT-
    ADDRESS-1D4
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1D5
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_R
    COMMENT-
    ADDRESS-1D6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1D7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-1D8
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_F
    COMMENT-
    ADDRESS-1D9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1DA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_L
    COMMENT-
    ADDRESS-1DB
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1DC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_A
    COMMENT-
    ADDRESS-1DD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1DE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_S
    COMMENT-
    ADDRESS-1DF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1E0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_H
    COMMENT-
    ADDRESS-1E1
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1E2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-1E3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
    ADDRESS-1E4
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1E5
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-1E6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1E7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
    ADDRESS-1E8
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1E9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_g
    COMMENT-
    ADDRESS-1EA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1EB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-1EC
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1ED
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-1EE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1EF
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_m
    COMMENT-
    ADDRESS-1F0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1F1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_m
    COMMENT-
    ADDRESS-1F2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1F3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-1F4
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1F5
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-1F6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1F7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-1F8
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_v
    COMMENT-
    ADDRESS-1F9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1FA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_1
    COMMENT-
    ADDRESS-1FB
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1FC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_fullstop
    COMMENT-
    ADDRESS-1FD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-1FE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_0
    COMMENT-
    ADDRESS-1FF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-200
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_0
    COMMENT-
    ADDRESS-201
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-202
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-203
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-204
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-205
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-205
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-205
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-205
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Waiting_MCS_file' string to the UART
    ADDRESS-205
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-205
      LABEL-send_Waiting_MCS_file
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_W
    COMMENT-
    ADDRESS-206
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-207
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-208
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-209
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
    ADDRESS-20A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-20B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
    ADDRESS-20C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-20D
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
    ADDRESS-20E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-20F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_n
    COMMENT-
    ADDRESS-210
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-211
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_g
    COMMENT-
    ADDRESS-212
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-213
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-214
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_f
    COMMENT-
    ADDRESS-215
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-216
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
    ADDRESS-217
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-218
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-219
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-21A
      LABEL-send_MCS_file
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-21B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_M
    COMMENT-
    ADDRESS-21C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-21D
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_C
    COMMENT-
    ADDRESS-21E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-21F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_S
    COMMENT-
    ADDRESS-220
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-221
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-222
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_F
    COMMENT-
    ADDRESS-223
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-224
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
    ADDRESS-225
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-226
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
    ADDRESS-227
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-228
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-229
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-22A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-22B
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-22C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-22C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-22C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Erase in progress' string to the UART
    ADDRESS-22C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-22C
      LABEL-send_Erase_in_progress
INSTRUCTION-CALL
   OPERAND1-send_Erase
   OPERAND2-
    COMMENT-
    ADDRESS-22D
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
    ADDRESS-22E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-22F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_n
    COMMENT-
    ADDRESS-230
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-231
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-232
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
    ADDRESS-233
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-234
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-235
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-236
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
    ADDRESS-237
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-238
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_g
    COMMENT-
    ADDRESS-239
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-23A
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-23B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-23C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-23D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-23E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
    ADDRESS-23F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-240
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-241
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-242
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-243
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-243
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-243
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Erase ' string to the UART
    ADDRESS-243
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-243
      LABEL-send_Erase
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_E
    COMMENT-
    ADDRESS-244
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-245
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-246
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-247
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-248
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-249
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
    ADDRESS-24A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-24B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-24C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-24D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-24E
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-24F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-24F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-24F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send carriage return, 'OK' and carriage return to the UART
    ADDRESS-24F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-24F
      LABEL-send_OK
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-250
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_O
    COMMENT-
    ADDRESS-251
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-252
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_K
    COMMENT-
    ADDRESS-253
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-254
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-255
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-256
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-256
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-256
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-256
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send menu to the UART
    ADDRESS-256
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-256
      LABEL-send_Menu
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-257
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_E
    COMMENT-
    ADDRESS-258
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-259
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-25A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-25B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Erase
   OPERAND2-
    COMMENT-
    ADDRESS-25C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-25D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-25E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
    ADDRESS-25F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-260
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-261
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-262
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_B
    COMMENT-
    ADDRESS-263
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-264
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-265
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-266
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Erase
   OPERAND2-
    COMMENT-
    ADDRESS-267
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_b
    COMMENT-
    ADDRESS-268
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-269
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
    ADDRESS-26A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-26B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
    ADDRESS-26C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-26D
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_c
    COMMENT-
    ADDRESS-26E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-26F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_k
    COMMENT-
    ADDRESS-270
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-271
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
    ADDRESS-272
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-273
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-274
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_1
    COMMENT-
    ADDRESS-275
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-276
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-277
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-278
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_3
    COMMENT-
    ADDRESS-279
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-27A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-27B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
    ADDRESS-27C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-27D
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-27E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-27F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_P
    COMMENT-
    ADDRESS-280
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-281
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-282
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-283
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
    ADDRESS-284
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-285
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_g
    COMMENT-
    ADDRESS-286
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-287
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-288
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-289
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-28A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-28B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_m
    COMMENT-
    ADDRESS-28C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-28D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_MCS_file
   OPERAND2-
    COMMENT-
    ADDRESS-28E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_W
    COMMENT-
    ADDRESS-28F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-290
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-291
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-292
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_W
    COMMENT-
    ADDRESS-293
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-294
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-295
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-296
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
    ADDRESS-297
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-298
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
    ADDRESS-299
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-29A
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-29B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-29C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-29D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_byte
   OPERAND2-
    COMMENT-
    ADDRESS-29E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-29F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_R
    COMMENT-
    ADDRESS-2A0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2A1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-2A2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2A3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_R
    COMMENT-
    ADDRESS-2A4
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2A5
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-2A6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2A7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-2A8
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2A9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_d
    COMMENT-
    ADDRESS-2AA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2AB
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-2AC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_2
    COMMENT-
    ADDRESS-2AD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2AE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_5
    COMMENT-
    ADDRESS-2AF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2B0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_6
    COMMENT-
    ADDRESS-2B1
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2B2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-2B3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_byte
   OPERAND2-
    COMMENT-
    ADDRESS-2B4
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
    ADDRESS-2B5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2B6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-2B7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_I
    COMMENT-
    ADDRESS-2B8
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2B9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-2BA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2BB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_D
    COMMENT-
    ADDRESS-2BC
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2BD
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-2BE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2BF
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_v
    COMMENT-
    ADDRESS-2C0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2C1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
    ADDRESS-2C2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2C3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_c
    COMMENT-
    ADDRESS-2C4
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2C5
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-2C6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2C7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-2C8
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_ID
   OPERAND2-
    COMMENT-
    ADDRESS-2C9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-2CA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_H
    COMMENT-
    ADDRESS-2CB
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2CC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-2CD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2CE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_H
    COMMENT-
    ADDRESS-2CF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2D0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-2D1
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2D2
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_l
    COMMENT-
    ADDRESS-2D3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2D4
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_p
    COMMENT-
    ADDRESS-2D5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2D6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-2D7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_S
    COMMENT-
    ADDRESS-2D8
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2D9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-2DA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2DB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_S
    COMMENT-
    ADDRESS-2DC
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2DD
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
    ADDRESS-2DE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2DF
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-2E0
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2E1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
    ADDRESS-2E2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2E3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_u
    COMMENT-
    ADDRESS-2E4
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2E5
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
    ADDRESS-2E6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2E7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-2E8
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-2E9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2E9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2E9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'ID' to the UART
    ADDRESS-2E9
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2E9
      LABEL-send_ID
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_I
    COMMENT-
    ADDRESS-2EA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2EB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_D
    COMMENT-
    ADDRESS-2EC
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2ED
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-2EE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2EE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2EE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'byte' to the UART
    ADDRESS-2EE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2EE
      LABEL-send_byte
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_b
    COMMENT-
    ADDRESS-2EF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2F0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_y
    COMMENT-
    ADDRESS-2F1
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2F2
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
    ADDRESS-2F3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2F4
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-2F5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2F6
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-2F7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2F7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2F7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Confirm Erase (Y/n) ' to the UART
    ADDRESS-2F7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-2F7
      LABEL-send_Confirm
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-2F8
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_C
    COMMENT-
    ADDRESS-2F9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2FA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
    ADDRESS-2FB
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2FC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_n
    COMMENT-
    ADDRESS-2FD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-2FE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_f
    COMMENT-
    ADDRESS-2FF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-300
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_i
    COMMENT-
    ADDRESS-301
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-302
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-303
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-304
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_m
    COMMENT-
    ADDRESS-305
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-306
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-307
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_Erase
   OPERAND2-
    COMMENT-
    ADDRESS-308
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_open
    COMMENT-
    ADDRESS-309
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-30A
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_Y
    COMMENT-
    ADDRESS-30B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-30C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_divide
    COMMENT-
    ADDRESS-30D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-30E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_n
    COMMENT-
    ADDRESS-30F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-310
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_close
    COMMENT-
    ADDRESS-311
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-312
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_space
   OPERAND2-
    COMMENT-
    ADDRESS-313
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-314
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-314
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-314
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'Abort' to the UART
    ADDRESS-314
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-314
      LABEL-send_Abort
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-315
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_A
    COMMENT-
    ADDRESS-316
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-317
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_b
    COMMENT-
    ADDRESS-318
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-319
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_o
    COMMENT-
    ADDRESS-31A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-31B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-31C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-31D
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
    ADDRESS-31E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-31F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-320
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-321
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-321
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'address=' to the UART
    ADDRESS-321
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-321
      LABEL-send_address
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-322
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-323
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-324
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_d
    COMMENT-
    ADDRESS-325
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-326
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-327
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_r
    COMMENT-
    ADDRESS-328
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-329
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_e
    COMMENT-
    ADDRESS-32A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-32B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_s
    COMMENT-
    ADDRESS-32C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-32D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-32E
      LABEL-send_equals
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_equals
    COMMENT-
    ADDRESS-32F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-330
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-331
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-331
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-331
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Send 'data=' to the UART
    ADDRESS-331
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-331
      LABEL-send_data
INSTRUCTION-CALL
   OPERAND1-send_CR
   OPERAND2-
    COMMENT-
    ADDRESS-332
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_d
    COMMENT-
    ADDRESS-333
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-334
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-335
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-336
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_t
    COMMENT-
    ADDRESS-337
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-338
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-UART_data
   OPERAND2-character_a
    COMMENT-
    ADDRESS-339
      LABEL-
INSTRUCTION-CALL
   OPERAND1-send_to_UART
   OPERAND2-
    COMMENT-
    ADDRESS-33A
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-send_equals
   OPERAND2-
    COMMENT-
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupt Service Routine (ISR)
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;An interrupt occurs whenever the status of the UART receiver FIFO 'half_full' flag
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;changes.
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A change from Low to High means that the buffer is becoming full and therefore
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an XOFF character must be transmitted.
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A change from High to Low means that the buffer is starting to empty and therefore
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;an XON character can be transmitted to restart the flow of new characters.
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-33B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-3F5
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-3F5
   OPERAND2-
    COMMENT-;place at end of memory to keep separate
    ADDRESS-3F5
      LABEL-ISR
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-ISR_preserve_s0
    COMMENT-;preserve register contents
    ADDRESS-3F6
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-status_port
    COMMENT-;test 'half_full' status of receiver buffer.
    ADDRESS-3F7
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-rx_half_full
    COMMENT-
    ADDRESS-3F8
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-isr_send_xon
    COMMENT-
    ADDRESS-3F9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-character_XOFF
    COMMENT-
    ADDRESS-3FA
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-isr_send_character
   OPERAND2-
    COMMENT-
    ADDRESS-3FB
      LABEL-isr_send_xon
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-character_XON
    COMMENT-
    ADDRESS-3FC
      LABEL-isr_send_character
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-UART_write_port
    COMMENT-
    ADDRESS-3FD
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-ISR_preserve_s0
    COMMENT-;restore register contents
    ADDRESS-3FE
      LABEL-
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
   OPERAND2-
    COMMENT-
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupt Vector
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-3FF
   OPERAND2-
    COMMENT-
    ADDRESS-3FF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-ISR
   OPERAND2-
    COMMENT-
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
